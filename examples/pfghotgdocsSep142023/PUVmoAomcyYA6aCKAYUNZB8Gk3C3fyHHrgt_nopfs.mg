Section Eq.
Variable A:SType.
Definition eq : A->A->prop := fun x y:A => forall Q:A->A->prop, Q x y -> Q y x.
End Eq.
Infix = 502 := eq.
Section Ex.
Variable A:SType.
Definition ex : (A->prop)->prop := fun Q:A->prop => forall P:prop, (forall x:A, Q x -> P) -> P.
End Ex.
(* Unicode exists "2203" *)
Binder+ exists , := ex.
(* Parameter Eps_i "174b78e53fc239e8c2aab4ab5a996a27e3e5741e88070dad186e05fb13f275e5" *)
Parameter Eps_i : (set->prop)->set.
Parameter In:set->set->prop.
Parameter Empty : set.
(* Unicode Union "22C3" *)
Parameter Union : set->set.
(* Unicode Power "1D4AB" *)
Parameter Power : set->set.
Parameter Repl : set -> (set -> set) -> set.
Notation Repl Repl.
Parameter UnivOf : set->set.
Definition and : prop -> prop -> prop :=
 (fun x0 x1 : prop => forall x2 : prop, (x0 -> x1 -> x2) -> x2).
(* Parameter explicit_Field_minus "be660f6f1e37e7325ec2a39529b9c937b61a60f864e85f0dabdf2bddacb0986e" "5be570b4bcbe7fefd36c2057491ddcc7b11903d8d98ca54d9b37db60d1bf0f7e" *)
Parameter explicit_Field_minus : set -> set -> set -> (set -> set -> set) -> (set -> set -> set) -> set -> set.
(* Parameter Sep "f7e63d81e8f98ac9bc7864e0b01f93952ef3b0cbf9777abab27bcbd743b6b079" "f336a4ec8d55185095e45a638507748bac5384e04e0c48d008e4f6a9653e9c44" *)
Parameter Sep : set -> (set -> prop) -> set.
(* Parameter explicit_Field "b2707c82b8b416a22264d2934d5221d1115ea55732f96cbb6663fbf7e945d3e3" "32dcc27d27b5003a86f8b13ba9ca16ffaec7168a11c5d9850940847c48148591" *)
Parameter explicit_Field : set -> set -> set -> (set -> set -> set) -> (set -> set -> set) -> prop.
(* Parameter explicit_Reals "e5dee14fc7a24a63555de85859904de8dc1b462044060d68dbb06cc9a590bc38" "2c81615a11c9e3e301f3301ec7862ba122acea20bfe1c120f7bdaf5a2e18faf4" *)
Parameter explicit_Reals : set -> set -> set -> (set -> set -> set) -> (set -> set -> set) -> (set -> set -> prop) -> prop.
(* Parameter explicit_Complex "552d05a240b7958c210e990f72c4938aa612373e1d79a5d97fa37f80e3d844b3" "bacb8536bbb356aa59ba321fb8eade607d1654d8a7e0b33887be9afbcfa5c504" *)
Parameter explicit_Complex : set -> (set -> set) -> (set -> set) -> set -> set -> set -> (set -> set -> set) -> (set -> set -> set) -> prop.
Definition Subq : set -> set -> prop :=
 (fun x0 x1 : set => forall x2, x2 :e x0 -> x2 :e x1).
Axiom andI : (forall x0 x1 : prop, x0 -> x1 -> and x0 x1).
Axiom explicit_Complex_I : (forall x0, forall x1 x2 : set -> set, forall x3 x4 x5, forall x6 x7 : set -> set -> set, explicit_Field x0 x3 x4 x6 x7 -> (forall x8 : prop, (forall x9 : set -> set -> prop, explicit_Reals (Sep x0 (fun x10 : set => forall x11 : set -> set -> prop, x11 (x1 x10) x10 -> x11 x10 (x1 x10))) x3 x4 x6 x7 x9 -> x8) -> x8) -> (forall x8, x8 :e x0 -> x2 x8 :e Sep x0 (fun x9 : set => forall x10 : set -> set -> prop, x10 (x1 x9) x9 -> x10 x9 (x1 x9))) -> x5 :e x0 -> (forall x8, x8 :e x0 -> x1 x8 :e x0) -> (forall x8, x8 :e x0 -> x2 x8 :e x0) -> (forall x8, x8 :e x0 -> x8 = x6 (x1 x8) (x7 x5 (x2 x8))) -> (forall x8, x8 :e x0 -> (forall x9, x9 :e x0 -> x1 x8 = x1 x9 -> x2 x8 = x2 x9 -> x8 = x9)) -> x6 (x7 x5 x5) x4 = x3 -> explicit_Complex x0 x1 x2 x3 x4 x5 x6 x7).
Axiom and6I : (forall x0 x1 x2 x3 x4 x5 : prop, x0 -> x1 -> x2 -> x3 -> x4 -> x5 -> and (and (and (and (and x0 x1) x2) x3) x4) x5).
Theorem missingprop_e8f73c9d41d54867d4d3961d8e230a049ce5318b9a3d1243926e0e7dca94eabd : (forall x0 x1 x2, forall x3 x4 : set -> set -> set, forall x5 : set -> set -> prop, forall x6 : set -> set -> set, forall x7, (forall x8, x8 :e x0 -> (forall x9, x9 :e x0 -> (forall x10, x10 :e x0 -> (forall x11, x11 :e x0 -> x6 x8 x9 = x6 x10 x11 -> and (x8 = x10) (x9 = x11))))) -> (forall x8, x8 :e x0 -> (forall x9, x9 :e x0 -> x3 x8 x9 :e x0)) -> (forall x8, x8 :e x0 -> (forall x9, x9 :e x0 -> x3 x8 x9 = x3 x9 x8)) -> x1 :e x0 -> (forall x8, x8 :e x0 -> x3 x1 x8 = x8) -> (forall x8, x8 :e x0 -> (forall x9, x9 :e x0 -> x4 x8 x9 :e x0)) -> (forall x8, x8 :e x0 -> (forall x9, x9 :e x0 -> x4 x8 x9 = x4 x9 x8)) -> x2 :e x0 -> (forall x8, x8 :e x0 -> x4 x2 x8 = x8) -> explicit_Field_minus x0 x1 x2 x3 x4 x2 :e x0 -> (forall x8, x8 :e x0 -> (forall x9, x9 :e x0 -> x6 x8 x9 :e x7)) -> (forall x8, x8 :e x7 -> (forall x9 : set -> prop, (forall x10, x10 :e x0 -> (forall x11, x11 :e x0 -> x8 = x6 x10 x11 -> x9 (x6 x10 x11))) -> x9 x8)) -> (forall x8, x8 :e x0 -> (forall x9, x9 :e x0 -> Eps_i (fun x11 : set => and (x11 :e x0) (forall x12 : prop, (forall x13, and (x13 :e x0) (x6 x8 x9 = x6 x11 x13) -> x12) -> x12)) = x8)) -> (forall x8, x8 :e x0 -> (forall x9, x9 :e x0 -> Eps_i (fun x11 : set => and (x11 :e x0) (x6 x8 x9 = x6 (Eps_i (fun x13 : set => and (x13 :e x0) (forall x14 : prop, (forall x15, and (x15 :e x0) (x6 x8 x9 = x6 x13 x15) -> x14) -> x14))) x11)) = x9)) -> (forall x8, x8 :e x0 -> x6 x8 x1 :e Sep x7 (fun x9 : set => forall x10 : set -> set -> prop, x10 (x6 (Eps_i (fun x11 : set => and (x11 :e x0) (forall x12 : prop, (forall x13, and (x13 :e x0) (x9 = x6 x11 x13) -> x12) -> x12))) x1) x9 -> x10 x9 (x6 (Eps_i (fun x11 : set => and (x11 :e x0) (forall x12 : prop, (forall x13, and (x13 :e x0) (x9 = x6 x11 x13) -> x12) -> x12))) x1))) -> (forall x8, x8 :e x7 -> Eps_i (fun x9 : set => and (x9 :e x0) (forall x10 : prop, (forall x11, and (x11 :e x0) (x8 = x6 x9 x11) -> x10) -> x10)) :e x0) -> (forall x8, x8 :e x7 -> Eps_i (fun x9 : set => and (x9 :e x0) (x8 = x6 (Eps_i (fun x11 : set => and (x11 :e x0) (forall x12 : prop, (forall x13, and (x13 :e x0) (x8 = x6 x11 x13) -> x12) -> x12))) x9)) :e x0) -> (forall x8, x8 :e x0 -> (forall x9, x9 :e x0 -> (forall x10, x10 :e x0 -> (forall x11, x11 :e x0 -> x6 (x3 (Eps_i (fun x13 : set => and (x13 :e x0) (forall x14 : prop, (forall x15, and (x15 :e x0) (x6 x8 x9 = x6 x13 x15) -> x14) -> x14))) (Eps_i (fun x13 : set => and (x13 :e x0) (forall x14 : prop, (forall x15, and (x15 :e x0) (x6 x10 x11 = x6 x13 x15) -> x14) -> x14)))) (x3 (Eps_i (fun x13 : set => and (x13 :e x0) (x6 x8 x9 = x6 (Eps_i (fun x15 : set => and (x15 :e x0) (forall x16 : prop, (forall x17, and (x17 :e x0) (x6 x8 x9 = x6 x15 x17) -> x16) -> x16))) x13))) (Eps_i (fun x13 : set => and (x13 :e x0) (x6 x10 x11 = x6 (Eps_i (fun x15 : set => and (x15 :e x0) (forall x16 : prop, (forall x17, and (x17 :e x0) (x6 x10 x11 = x6 x15 x17) -> x16) -> x16))) x13)))) = x6 (x3 x8 x10) (x3 x9 x11))))) -> (forall x8, x8 :e x0 -> (forall x9, x9 :e x0 -> (forall x10, x10 :e x0 -> (forall x11, x11 :e x0 -> x6 (x3 (x4 (Eps_i (fun x13 : set => and (x13 :e x0) (forall x14 : prop, (forall x15, and (x15 :e x0) (x6 x8 x9 = x6 x13 x15) -> x14) -> x14))) (Eps_i (fun x13 : set => and (x13 :e x0) (forall x14 : prop, (forall x15, and (x15 :e x0) (x6 x10 x11 = x6 x13 x15) -> x14) -> x14)))) (explicit_Field_minus x0 x1 x2 x3 x4 (x4 (Eps_i (fun x13 : set => and (x13 :e x0) (x6 x8 x9 = x6 (Eps_i (fun x15 : set => and (x15 :e x0) (forall x16 : prop, (forall x17, and (x17 :e x0) (x6 x8 x9 = x6 x15 x17) -> x16) -> x16))) x13))) (Eps_i (fun x13 : set => and (x13 :e x0) (x6 x10 x11 = x6 (Eps_i (fun x15 : set => and (x15 :e x0) (forall x16 : prop, (forall x17, and (x17 :e x0) (x6 x10 x11 = x6 x15 x17) -> x16) -> x16))) x13)))))) (x3 (x4 (Eps_i (fun x13 : set => and (x13 :e x0) (forall x14 : prop, (forall x15, and (x15 :e x0) (x6 x8 x9 = x6 x13 x15) -> x14) -> x14))) (Eps_i (fun x13 : set => and (x13 :e x0) (x6 x10 x11 = x6 (Eps_i (fun x15 : set => and (x15 :e x0) (forall x16 : prop, (forall x17, and (x17 :e x0) (x6 x10 x11 = x6 x15 x17) -> x16) -> x16))) x13)))) (x4 (Eps_i (fun x13 : set => and (x13 :e x0) (x6 x8 x9 = x6 (Eps_i (fun x15 : set => and (x15 :e x0) (forall x16 : prop, (forall x17, and (x17 :e x0) (x6 x8 x9 = x6 x15 x17) -> x16) -> x16))) x13))) (Eps_i (fun x13 : set => and (x13 :e x0) (forall x14 : prop, (forall x15, and (x15 :e x0) (x6 x10 x11 = x6 x13 x15) -> x14) -> x14))))) = x6 (x3 (x4 x8 x10) (explicit_Field_minus x0 x1 x2 x3 x4 (x4 x9 x11))) (x3 (x4 x8 x11) (x4 x9 x10)))))) -> (forall x8, x8 :e x0 -> x3 (explicit_Field_minus x0 x1 x2 x3 x4 x8) x8 = x1) -> (forall x8, x8 :e x0 -> x3 x8 (explicit_Field_minus x0 x1 x2 x3 x4 x8) = x1) -> explicit_Field_minus x0 x1 x2 x3 x4 x1 = x1 -> (forall x8, x8 :e x0 -> x4 x1 x8 = x1) -> (forall x8, x8 :e x0 -> x4 x8 x1 = x1) -> explicit_Field x7 (x6 x1 x1) (x6 x2 x1) (fun x8 x9 : set => x6 (x3 (Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x8 = x6 x10 x12) -> x11) -> x11))) (Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x9 = x6 x10 x12) -> x11) -> x11)))) (x3 (Eps_i (fun x10 : set => and (x10 :e x0) (x8 = x6 (Eps_i (fun x12 : set => and (x12 :e x0) (forall x13 : prop, (forall x14, and (x14 :e x0) (x8 = x6 x12 x14) -> x13) -> x13))) x10))) (Eps_i (fun x10 : set => and (x10 :e x0) (x9 = x6 (Eps_i (fun x12 : set => and (x12 :e x0) (forall x13 : prop, (forall x14, and (x14 :e x0) (x9 = x6 x12 x14) -> x13) -> x13))) x10))))) (fun x8 x9 : set => x6 (x3 (x4 (Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x8 = x6 x10 x12) -> x11) -> x11))) (Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x9 = x6 x10 x12) -> x11) -> x11)))) (explicit_Field_minus x0 x1 x2 x3 x4 (x4 (Eps_i (fun x10 : set => and (x10 :e x0) (x8 = x6 (Eps_i (fun x12 : set => and (x12 :e x0) (forall x13 : prop, (forall x14, and (x14 :e x0) (x8 = x6 x12 x14) -> x13) -> x13))) x10))) (Eps_i (fun x10 : set => and (x10 :e x0) (x9 = x6 (Eps_i (fun x12 : set => and (x12 :e x0) (forall x13 : prop, (forall x14, and (x14 :e x0) (x9 = x6 x12 x14) -> x13) -> x13))) x10)))))) (x3 (x4 (Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x8 = x6 x10 x12) -> x11) -> x11))) (Eps_i (fun x10 : set => and (x10 :e x0) (x9 = x6 (Eps_i (fun x12 : set => and (x12 :e x0) (forall x13 : prop, (forall x14, and (x14 :e x0) (x9 = x6 x12 x14) -> x13) -> x13))) x10)))) (x4 (Eps_i (fun x10 : set => and (x10 :e x0) (x8 = x6 (Eps_i (fun x12 : set => and (x12 :e x0) (forall x13 : prop, (forall x14, and (x14 :e x0) (x8 = x6 x12 x14) -> x13) -> x13))) x10))) (Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x9 = x6 x10 x12) -> x11) -> x11)))))) -> explicit_Reals (Sep x7 (fun x8 : set => forall x9 : set -> set -> prop, x9 (x6 (Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x8 = x6 x10 x12) -> x11) -> x11))) x1) x8 -> x9 x8 (x6 (Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x8 = x6 x10 x12) -> x11) -> x11))) x1))) (x6 x1 x1) (x6 x2 x1) (fun x8 x9 : set => x6 (x3 (Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x8 = x6 x10 x12) -> x11) -> x11))) (Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x9 = x6 x10 x12) -> x11) -> x11)))) (x3 (Eps_i (fun x10 : set => and (x10 :e x0) (x8 = x6 (Eps_i (fun x12 : set => and (x12 :e x0) (forall x13 : prop, (forall x14, and (x14 :e x0) (x8 = x6 x12 x14) -> x13) -> x13))) x10))) (Eps_i (fun x10 : set => and (x10 :e x0) (x9 = x6 (Eps_i (fun x12 : set => and (x12 :e x0) (forall x13 : prop, (forall x14, and (x14 :e x0) (x9 = x6 x12 x14) -> x13) -> x13))) x10))))) (fun x8 x9 : set => x6 (x3 (x4 (Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x8 = x6 x10 x12) -> x11) -> x11))) (Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x9 = x6 x10 x12) -> x11) -> x11)))) (explicit_Field_minus x0 x1 x2 x3 x4 (x4 (Eps_i (fun x10 : set => and (x10 :e x0) (x8 = x6 (Eps_i (fun x12 : set => and (x12 :e x0) (forall x13 : prop, (forall x14, and (x14 :e x0) (x8 = x6 x12 x14) -> x13) -> x13))) x10))) (Eps_i (fun x10 : set => and (x10 :e x0) (x9 = x6 (Eps_i (fun x12 : set => and (x12 :e x0) (forall x13 : prop, (forall x14, and (x14 :e x0) (x9 = x6 x12 x14) -> x13) -> x13))) x10)))))) (x3 (x4 (Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x8 = x6 x10 x12) -> x11) -> x11))) (Eps_i (fun x10 : set => and (x10 :e x0) (x9 = x6 (Eps_i (fun x12 : set => and (x12 :e x0) (forall x13 : prop, (forall x14, and (x14 :e x0) (x9 = x6 x12 x14) -> x13) -> x13))) x10)))) (x4 (Eps_i (fun x10 : set => and (x10 :e x0) (x8 = x6 (Eps_i (fun x12 : set => and (x12 :e x0) (forall x13 : prop, (forall x14, and (x14 :e x0) (x8 = x6 x12 x14) -> x13) -> x13))) x10))) (Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x9 = x6 x10 x12) -> x11) -> x11)))))) (fun x8 x9 : set => x5 (Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x8 = x6 x10 x12) -> x11) -> x11))) (Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x9 = x6 x10 x12) -> x11) -> x11)))) -> and (explicit_Complex x7 (fun x8 : set => x6 (Eps_i (fun x9 : set => and (x9 :e x0) (forall x10 : prop, (forall x11, and (x11 :e x0) (x8 = x6 x9 x11) -> x10) -> x10))) x1) (fun x8 : set => x6 (Eps_i (fun x9 : set => and (x9 :e x0) (x8 = x6 (Eps_i (fun x11 : set => and (x11 :e x0) (forall x12 : prop, (forall x13, and (x13 :e x0) (x8 = x6 x11 x13) -> x12) -> x12))) x9))) x1) (x6 x1 x1) (x6 x2 x1) (x6 x1 x2) (fun x8 x9 : set => x6 (x3 (Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x8 = x6 x10 x12) -> x11) -> x11))) (Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x9 = x6 x10 x12) -> x11) -> x11)))) (x3 (Eps_i (fun x10 : set => and (x10 :e x0) (x8 = x6 (Eps_i (fun x12 : set => and (x12 :e x0) (forall x13 : prop, (forall x14, and (x14 :e x0) (x8 = x6 x12 x14) -> x13) -> x13))) x10))) (Eps_i (fun x10 : set => and (x10 :e x0) (x9 = x6 (Eps_i (fun x12 : set => and (x12 :e x0) (forall x13 : prop, (forall x14, and (x14 :e x0) (x9 = x6 x12 x14) -> x13) -> x13))) x10))))) (fun x8 x9 : set => x6 (x3 (x4 (Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x8 = x6 x10 x12) -> x11) -> x11))) (Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x9 = x6 x10 x12) -> x11) -> x11)))) (explicit_Field_minus x0 x1 x2 x3 x4 (x4 (Eps_i (fun x10 : set => and (x10 :e x0) (x8 = x6 (Eps_i (fun x12 : set => and (x12 :e x0) (forall x13 : prop, (forall x14, and (x14 :e x0) (x8 = x6 x12 x14) -> x13) -> x13))) x10))) (Eps_i (fun x10 : set => and (x10 :e x0) (x9 = x6 (Eps_i (fun x12 : set => and (x12 :e x0) (forall x13 : prop, (forall x14, and (x14 :e x0) (x9 = x6 x12 x14) -> x13) -> x13))) x10)))))) (x3 (x4 (Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x8 = x6 x10 x12) -> x11) -> x11))) (Eps_i (fun x10 : set => and (x10 :e x0) (x9 = x6 (Eps_i (fun x12 : set => and (x12 :e x0) (forall x13 : prop, (forall x14, and (x14 :e x0) (x9 = x6 x12 x14) -> x13) -> x13))) x10)))) (x4 (Eps_i (fun x10 : set => and (x10 :e x0) (x8 = x6 (Eps_i (fun x12 : set => and (x12 :e x0) (forall x13 : prop, (forall x14, and (x14 :e x0) (x8 = x6 x12 x14) -> x13) -> x13))) x10))) (Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x9 = x6 x10 x12) -> x11) -> x11))))))) ((forall x8, x8 :e x0 -> x6 x8 x1 = x8) -> and (and (and (and (and (x0 c= x7) (forall x8, x8 :e x0 -> Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x8 = x6 x10 x12) -> x11) -> x11)) = x8)) (x6 x1 x1 = x1)) (x6 x2 x1 = x2)) (forall x8, x8 :e x0 -> (forall x9, x9 :e x0 -> x6 (x3 (Eps_i (fun x11 : set => and (x11 :e x0) (forall x12 : prop, (forall x13, and (x13 :e x0) (x8 = x6 x11 x13) -> x12) -> x12))) (Eps_i (fun x11 : set => and (x11 :e x0) (forall x12 : prop, (forall x13, and (x13 :e x0) (x9 = x6 x11 x13) -> x12) -> x12)))) (x3 (Eps_i (fun x11 : set => and (x11 :e x0) (x8 = x6 (Eps_i (fun x13 : set => and (x13 :e x0) (forall x14 : prop, (forall x15, and (x15 :e x0) (x8 = x6 x13 x15) -> x14) -> x14))) x11))) (Eps_i (fun x11 : set => and (x11 :e x0) (x9 = x6 (Eps_i (fun x13 : set => and (x13 :e x0) (forall x14 : prop, (forall x15, and (x15 :e x0) (x9 = x6 x13 x15) -> x14) -> x14))) x11)))) = x3 x8 x9))) (forall x8, x8 :e x0 -> (forall x9, x9 :e x0 -> x6 (x3 (x4 (Eps_i (fun x11 : set => and (x11 :e x0) (forall x12 : prop, (forall x13, and (x13 :e x0) (x8 = x6 x11 x13) -> x12) -> x12))) (Eps_i (fun x11 : set => and (x11 :e x0) (forall x12 : prop, (forall x13, and (x13 :e x0) (x9 = x6 x11 x13) -> x12) -> x12)))) (explicit_Field_minus x0 x1 x2 x3 x4 (x4 (Eps_i (fun x11 : set => and (x11 :e x0) (x8 = x6 (Eps_i (fun x13 : set => and (x13 :e x0) (forall x14 : prop, (forall x15, and (x15 :e x0) (x8 = x6 x13 x15) -> x14) -> x14))) x11))) (Eps_i (fun x11 : set => and (x11 :e x0) (x9 = x6 (Eps_i (fun x13 : set => and (x13 :e x0) (forall x14 : prop, (forall x15, and (x15 :e x0) (x9 = x6 x13 x15) -> x14) -> x14))) x11)))))) (x3 (x4 (Eps_i (fun x11 : set => and (x11 :e x0) (forall x12 : prop, (forall x13, and (x13 :e x0) (x8 = x6 x11 x13) -> x12) -> x12))) (Eps_i (fun x11 : set => and (x11 :e x0) (x9 = x6 (Eps_i (fun x13 : set => and (x13 :e x0) (forall x14 : prop, (forall x15, and (x15 :e x0) (x9 = x6 x13 x15) -> x14) -> x14))) x11)))) (x4 (Eps_i (fun x11 : set => and (x11 :e x0) (x8 = x6 (Eps_i (fun x13 : set => and (x13 :e x0) (forall x14 : prop, (forall x15, and (x15 :e x0) (x8 = x6 x13 x15) -> x14) -> x14))) x11))) (Eps_i (fun x11 : set => and (x11 :e x0) (forall x12 : prop, (forall x13, and (x13 :e x0) (x9 = x6 x11 x13) -> x12) -> x12))))) = x4 x8 x9)))).
admit.
Qed.
