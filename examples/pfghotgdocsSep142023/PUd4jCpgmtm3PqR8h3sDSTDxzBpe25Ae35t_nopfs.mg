Section Eq.
Variable A:SType.
Definition eq : A->A->prop := fun x y:A => forall Q:A->A->prop, Q x y -> Q y x.
End Eq.
Infix = 502 := eq.
Section Ex.
Variable A:SType.
Definition ex : (A->prop)->prop := fun Q:A->prop => forall P:prop, (forall x:A, Q x -> P) -> P.
End Ex.
(* Unicode exists "2203" *)
Binder+ exists , := ex.
(* Parameter Eps_i "174b78e53fc239e8c2aab4ab5a996a27e3e5741e88070dad186e05fb13f275e5" *)
Parameter Eps_i : (set->prop)->set.
Parameter In:set->set->prop.
Parameter Empty : set.
(* Unicode Union "22C3" *)
Parameter Union : set->set.
(* Unicode Power "1D4AB" *)
Parameter Power : set->set.
Parameter Repl : set -> (set -> set) -> set.
Notation Repl Repl.
Parameter UnivOf : set->set.
Definition and : prop -> prop -> prop :=
 (fun x0 x1 : prop => forall x2 : prop, (x0 -> x1 -> x2) -> x2).
(* Parameter explicit_Field_minus "be660f6f1e37e7325ec2a39529b9c937b61a60f864e85f0dabdf2bddacb0986e" "5be570b4bcbe7fefd36c2057491ddcc7b11903d8d98ca54d9b37db60d1bf0f7e" *)
Parameter explicit_Field_minus : set -> set -> set -> (set -> set -> set) -> (set -> set -> set) -> set -> set.
(* Parameter ReplSep2 "816cc62796568c2de8e31e57b826d72c2e70ee3394c00fbc921f2e41e996e83a" "da098a2dd3a59275101fdd49b6d2258642997171eac15c6b60570c638743e785" *)
Parameter ReplSep2 : set -> (set -> set) -> (set -> set -> prop) -> (set -> set -> set) -> set.
(* Parameter True "5867641425602c707eaecd5be95229f6fd709c9b58d50af108dfe27cb49ac069" "f81b3934a73154a8595135f10d1564b0719278d3976cc83da7fda60151d770da" *)
Parameter True : prop.
Axiom andI : (forall x0 x1 : prop, x0 -> x1 -> and x0 x1).
Definition False : prop :=
 (forall x0 : prop, x0).
Theorem missingprop_e406ce4a2a97364cd72170b3cb9c744266d010acbf829505dac501c1af8727d3 : (forall x0 x1 x2, forall x3 x4 : set -> set -> set, forall x5 : set -> set -> prop, forall x6 : set -> set -> set, (forall x7, x7 :e x0 -> (forall x8, x8 :e x0 -> x3 x7 x8 :e x0)) -> x1 :e x0 -> (forall x7, x7 :e x0 -> (forall x8, x8 :e x0 -> x4 x7 x8 :e x0)) -> (forall x7, x7 :e x0 -> (forall x8, x8 :e x0 -> (forall x9, x9 :e x0 -> x4 x7 (x4 x8 x9) = x4 (x4 x7 x8) x9))) -> (forall x7, x7 :e x0 -> (forall x8, x8 :e x0 -> x4 x7 x8 = x4 x8 x7)) -> x2 :e x0 -> (forall x7, x7 :e x0 -> (x7 = x1 -> (forall x8 : prop, x8)) -> (forall x8 : prop, (forall x9, and (x9 :e x0) (x4 x7 x9 = x2) -> x8) -> x8)) -> (forall x7, x7 :e x0 -> (forall x8, x8 :e x0 -> (forall x9, x9 :e x0 -> x4 x7 (x3 x8 x9) = x3 (x4 x7 x8) (x4 x7 x9)))) -> (forall x7, x7 :e x0 -> explicit_Field_minus x0 x1 x2 x3 x4 x7 :e x0) -> (forall x7, x7 :e x0 -> (forall x8, x8 :e x0 -> (forall x9, x9 :e x0 -> x4 (x3 x7 x8) x9 = x3 (x4 x7 x9) (x4 x8 x9)))) -> (forall x7, x7 :e x0 -> (forall x8, x8 :e x0 -> explicit_Field_minus x0 x1 x2 x3 x4 (x3 x7 x8) = x3 (explicit_Field_minus x0 x1 x2 x3 x4 x7) (explicit_Field_minus x0 x1 x2 x3 x4 x8))) -> (forall x7, x7 :e x0 -> (forall x8, x8 :e x0 -> x4 (explicit_Field_minus x0 x1 x2 x3 x4 x7) x8 = explicit_Field_minus x0 x1 x2 x3 x4 (x4 x7 x8))) -> (forall x7, x7 :e x0 -> (forall x8, x8 :e x0 -> x4 x7 (explicit_Field_minus x0 x1 x2 x3 x4 x8) = explicit_Field_minus x0 x1 x2 x3 x4 (x4 x7 x8))) -> (forall x7, x7 :e ReplSep2 x0 (fun x8 : set => x0) (fun x8 x9 : set => True) x6 -> Eps_i (fun x8 : set => and (x8 :e x0) (forall x9 : prop, (forall x10, and (x10 :e x0) (x7 = x6 x8 x10) -> x9) -> x9)) :e x0) -> (forall x7, x7 :e ReplSep2 x0 (fun x8 : set => x0) (fun x8 x9 : set => True) x6 -> Eps_i (fun x8 : set => and (x8 :e x0) (x7 = x6 (Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x7 = x6 x10 x12) -> x11) -> x11))) x8)) :e x0) -> (forall x7, x7 :e ReplSep2 x0 (fun x8 : set => x0) (fun x8 x9 : set => True) x6 -> (forall x8, x8 :e ReplSep2 x0 (fun x9 : set => x0) (fun x9 x10 : set => True) x6 -> Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x7 = x6 x10 x12) -> x11) -> x11)) = Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x8 = x6 x10 x12) -> x11) -> x11)) -> Eps_i (fun x10 : set => and (x10 :e x0) (x7 = x6 (Eps_i (fun x12 : set => and (x12 :e x0) (forall x13 : prop, (forall x14, and (x14 :e x0) (x7 = x6 x12 x14) -> x13) -> x13))) x10)) = Eps_i (fun x10 : set => and (x10 :e x0) (x8 = x6 (Eps_i (fun x12 : set => and (x12 :e x0) (forall x13 : prop, (forall x14, and (x14 :e x0) (x8 = x6 x12 x14) -> x13) -> x13))) x10)) -> x7 = x8)) -> (forall x7, x7 :e ReplSep2 x0 (fun x8 : set => x0) (fun x8 x9 : set => True) x6 -> (forall x8, x8 :e ReplSep2 x0 (fun x9 : set => x0) (fun x9 x10 : set => True) x6 -> x6 (x3 (x4 (Eps_i (fun x9 : set => and (x9 :e x0) (forall x10 : prop, (forall x11, and (x11 :e x0) (x7 = x6 x9 x11) -> x10) -> x10))) (Eps_i (fun x9 : set => and (x9 :e x0) (forall x10 : prop, (forall x11, and (x11 :e x0) (x8 = x6 x9 x11) -> x10) -> x10)))) (explicit_Field_minus x0 x1 x2 x3 x4 (x4 (Eps_i (fun x9 : set => and (x9 :e x0) (x7 = x6 (Eps_i (fun x11 : set => and (x11 :e x0) (forall x12 : prop, (forall x13, and (x13 :e x0) (x7 = x6 x11 x13) -> x12) -> x12))) x9))) (Eps_i (fun x9 : set => and (x9 :e x0) (x8 = x6 (Eps_i (fun x11 : set => and (x11 :e x0) (forall x12 : prop, (forall x13, and (x13 :e x0) (x8 = x6 x11 x13) -> x12) -> x12))) x9)))))) (x3 (x4 (Eps_i (fun x9 : set => and (x9 :e x0) (forall x10 : prop, (forall x11, and (x11 :e x0) (x7 = x6 x9 x11) -> x10) -> x10))) (Eps_i (fun x9 : set => and (x9 :e x0) (x8 = x6 (Eps_i (fun x11 : set => and (x11 :e x0) (forall x12 : prop, (forall x13, and (x13 :e x0) (x8 = x6 x11 x13) -> x12) -> x12))) x9)))) (x4 (Eps_i (fun x9 : set => and (x9 :e x0) (x7 = x6 (Eps_i (fun x11 : set => and (x11 :e x0) (forall x12 : prop, (forall x13, and (x13 :e x0) (x7 = x6 x11 x13) -> x12) -> x12))) x9))) (Eps_i (fun x9 : set => and (x9 :e x0) (forall x10 : prop, (forall x11, and (x11 :e x0) (x8 = x6 x9 x11) -> x10) -> x10))))) :e ReplSep2 x0 (fun x9 : set => x0) (fun x9 x10 : set => True) x6)) -> (forall x7, x7 :e ReplSep2 x0 (fun x8 : set => x0) (fun x8 x9 : set => True) x6 -> (forall x8, x8 :e ReplSep2 x0 (fun x9 : set => x0) (fun x9 x10 : set => True) x6 -> Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x6 (x3 (x4 (Eps_i (fun x14 : set => and (x14 :e x0) (forall x15 : prop, (forall x16, and (x16 :e x0) (x7 = x6 x14 x16) -> x15) -> x15))) (Eps_i (fun x14 : set => and (x14 :e x0) (forall x15 : prop, (forall x16, and (x16 :e x0) (x8 = x6 x14 x16) -> x15) -> x15)))) (explicit_Field_minus x0 x1 x2 x3 x4 (x4 (Eps_i (fun x14 : set => and (x14 :e x0) (x7 = x6 (Eps_i (fun x16 : set => and (x16 :e x0) (forall x17 : prop, (forall x18, and (x18 :e x0) (x7 = x6 x16 x18) -> x17) -> x17))) x14))) (Eps_i (fun x14 : set => and (x14 :e x0) (x8 = x6 (Eps_i (fun x16 : set => and (x16 :e x0) (forall x17 : prop, (forall x18, and (x18 :e x0) (x8 = x6 x16 x18) -> x17) -> x17))) x14)))))) (x3 (x4 (Eps_i (fun x14 : set => and (x14 :e x0) (forall x15 : prop, (forall x16, and (x16 :e x0) (x7 = x6 x14 x16) -> x15) -> x15))) (Eps_i (fun x14 : set => and (x14 :e x0) (x8 = x6 (Eps_i (fun x16 : set => and (x16 :e x0) (forall x17 : prop, (forall x18, and (x18 :e x0) (x8 = x6 x16 x18) -> x17) -> x17))) x14)))) (x4 (Eps_i (fun x14 : set => and (x14 :e x0) (x7 = x6 (Eps_i (fun x16 : set => and (x16 :e x0) (forall x17 : prop, (forall x18, and (x18 :e x0) (x7 = x6 x16 x18) -> x17) -> x17))) x14))) (Eps_i (fun x14 : set => and (x14 :e x0) (forall x15 : prop, (forall x16, and (x16 :e x0) (x8 = x6 x14 x16) -> x15) -> x15))))) = x6 x10 x12) -> x11) -> x11)) = x3 (x4 (Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x7 = x6 x10 x12) -> x11) -> x11))) (Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x8 = x6 x10 x12) -> x11) -> x11)))) (explicit_Field_minus x0 x1 x2 x3 x4 (x4 (Eps_i (fun x10 : set => and (x10 :e x0) (x7 = x6 (Eps_i (fun x12 : set => and (x12 :e x0) (forall x13 : prop, (forall x14, and (x14 :e x0) (x7 = x6 x12 x14) -> x13) -> x13))) x10))) (Eps_i (fun x10 : set => and (x10 :e x0) (x8 = x6 (Eps_i (fun x12 : set => and (x12 :e x0) (forall x13 : prop, (forall x14, and (x14 :e x0) (x8 = x6 x12 x14) -> x13) -> x13))) x10))))))) -> (forall x7, x7 :e ReplSep2 x0 (fun x8 : set => x0) (fun x8 x9 : set => True) x6 -> (forall x8, x8 :e ReplSep2 x0 (fun x9 : set => x0) (fun x9 x10 : set => True) x6 -> Eps_i (fun x10 : set => and (x10 :e x0) (x6 (x3 (x4 (Eps_i (fun x12 : set => and (x12 :e x0) (forall x13 : prop, (forall x14, and (x14 :e x0) (x7 = x6 x12 x14) -> x13) -> x13))) (Eps_i (fun x12 : set => and (x12 :e x0) (forall x13 : prop, (forall x14, and (x14 :e x0) (x8 = x6 x12 x14) -> x13) -> x13)))) (explicit_Field_minus x0 x1 x2 x3 x4 (x4 (Eps_i (fun x12 : set => and (x12 :e x0) (x7 = x6 (Eps_i (fun x14 : set => and (x14 :e x0) (forall x15 : prop, (forall x16, and (x16 :e x0) (x7 = x6 x14 x16) -> x15) -> x15))) x12))) (Eps_i (fun x12 : set => and (x12 :e x0) (x8 = x6 (Eps_i (fun x14 : set => and (x14 :e x0) (forall x15 : prop, (forall x16, and (x16 :e x0) (x8 = x6 x14 x16) -> x15) -> x15))) x12)))))) (x3 (x4 (Eps_i (fun x12 : set => and (x12 :e x0) (forall x13 : prop, (forall x14, and (x14 :e x0) (x7 = x6 x12 x14) -> x13) -> x13))) (Eps_i (fun x12 : set => and (x12 :e x0) (x8 = x6 (Eps_i (fun x14 : set => and (x14 :e x0) (forall x15 : prop, (forall x16, and (x16 :e x0) (x8 = x6 x14 x16) -> x15) -> x15))) x12)))) (x4 (Eps_i (fun x12 : set => and (x12 :e x0) (x7 = x6 (Eps_i (fun x14 : set => and (x14 :e x0) (forall x15 : prop, (forall x16, and (x16 :e x0) (x7 = x6 x14 x16) -> x15) -> x15))) x12))) (Eps_i (fun x12 : set => and (x12 :e x0) (forall x13 : prop, (forall x14, and (x14 :e x0) (x8 = x6 x12 x14) -> x13) -> x13))))) = x6 (Eps_i (fun x12 : set => and (x12 :e x0) (forall x13 : prop, (forall x14, and (x14 :e x0) (x6 (x3 (x4 (Eps_i (fun x16 : set => and (x16 :e x0) (forall x17 : prop, (forall x18, and (x18 :e x0) (x7 = x6 x16 x18) -> x17) -> x17))) (Eps_i (fun x16 : set => and (x16 :e x0) (forall x17 : prop, (forall x18, and (x18 :e x0) (x8 = x6 x16 x18) -> x17) -> x17)))) (explicit_Field_minus x0 x1 x2 x3 x4 (x4 (Eps_i (fun x16 : set => and (x16 :e x0) (x7 = x6 (Eps_i (fun x18 : set => and (x18 :e x0) (forall x19 : prop, (forall x20, and (x20 :e x0) (x7 = x6 x18 x20) -> x19) -> x19))) x16))) (Eps_i (fun x16 : set => and (x16 :e x0) (x8 = x6 (Eps_i (fun x18 : set => and (x18 :e x0) (forall x19 : prop, (forall x20, and (x20 :e x0) (x8 = x6 x18 x20) -> x19) -> x19))) x16)))))) (x3 (x4 (Eps_i (fun x16 : set => and (x16 :e x0) (forall x17 : prop, (forall x18, and (x18 :e x0) (x7 = x6 x16 x18) -> x17) -> x17))) (Eps_i (fun x16 : set => and (x16 :e x0) (x8 = x6 (Eps_i (fun x18 : set => and (x18 :e x0) (forall x19 : prop, (forall x20, and (x20 :e x0) (x8 = x6 x18 x20) -> x19) -> x19))) x16)))) (x4 (Eps_i (fun x16 : set => and (x16 :e x0) (x7 = x6 (Eps_i (fun x18 : set => and (x18 :e x0) (forall x19 : prop, (forall x20, and (x20 :e x0) (x7 = x6 x18 x20) -> x19) -> x19))) x16))) (Eps_i (fun x16 : set => and (x16 :e x0) (forall x17 : prop, (forall x18, and (x18 :e x0) (x8 = x6 x16 x18) -> x17) -> x17))))) = x6 x12 x14) -> x13) -> x13))) x10)) = x3 (x4 (Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x7 = x6 x10 x12) -> x11) -> x11))) (Eps_i (fun x10 : set => and (x10 :e x0) (x8 = x6 (Eps_i (fun x12 : set => and (x12 :e x0) (forall x13 : prop, (forall x14, and (x14 :e x0) (x8 = x6 x12 x14) -> x13) -> x13))) x10)))) (x4 (Eps_i (fun x10 : set => and (x10 :e x0) (x7 = x6 (Eps_i (fun x12 : set => and (x12 :e x0) (forall x13 : prop, (forall x14, and (x14 :e x0) (x7 = x6 x12 x14) -> x13) -> x13))) x10))) (Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x8 = x6 x10 x12) -> x11) -> x11)))))) -> (forall x7, x7 :e x0 -> (forall x8, x8 :e x0 -> x6 x7 x8 :e ReplSep2 x0 (fun x9 : set => x0) (fun x9 x10 : set => True) x6)) -> (forall x7, x7 :e x0 -> (forall x8, x8 :e x0 -> Eps_i (fun x10 : set => and (x10 :e x0) (forall x11 : prop, (forall x12, and (x12 :e x0) (x6 x7 x8 = x6 x10 x12) -> x11) -> x11)) = x7)) -> (forall x7, x7 :e x0 -> (forall x8, x8 :e x0 -> Eps_i (fun x10 : set => and (x10 :e x0) (x6 x7 x8 = x6 (Eps_i (fun x12 : set => and (x12 :e x0) (forall x13 : prop, (forall x14, and (x14 :e x0) (x6 x7 x8 = x6 x12 x14) -> x13) -> x13))) x10)) = x8)) -> x6 x1 x1 :e ReplSep2 x0 (fun x7 : set => x0) (fun x7 x8 : set => True) x6 -> x6 x2 x1 :e ReplSep2 x0 (fun x7 : set => x0) (fun x7 x8 : set => True) x6 -> (forall x7, x7 :e x0 -> explicit_Field_minus x0 x1 x2 x3 x4 (explicit_Field_minus x0 x1 x2 x3 x4 x7) = x7) -> (forall x7, x7 :e x0 -> x3 (explicit_Field_minus x0 x1 x2 x3 x4 x7) x7 = x1) -> (forall x7, x7 :e x0 -> x4 x1 x7 = x1) -> (forall x7, x7 :e x0 -> (forall x8, x8 :e x0 -> x3 (x4 x7 x7) (x4 x8 x8) = x1 -> and (x7 = x1) (x8 = x1))) -> (forall x7, x7 :e ReplSep2 x0 (fun x8 : set => x0) (fun x8 x9 : set => True) x6 -> (x7 = x6 x1 x1 -> (forall x8 : prop, x8)) -> (forall x8 : prop, (forall x9, and (x9 :e ReplSep2 x0 (fun x10 : set => x0) (fun x10 x11 : set => True) x6) (x6 (x3 (x4 (Eps_i (fun x11 : set => and (x11 :e x0) (forall x12 : prop, (forall x13, and (x13 :e x0) (x7 = x6 x11 x13) -> x12) -> x12))) (Eps_i (fun x11 : set => and (x11 :e x0) (forall x12 : prop, (forall x13, and (x13 :e x0) (x9 = x6 x11 x13) -> x12) -> x12)))) (explicit_Field_minus x0 x1 x2 x3 x4 (x4 (Eps_i (fun x11 : set => and (x11 :e x0) (x7 = x6 (Eps_i (fun x13 : set => and (x13 :e x0) (forall x14 : prop, (forall x15, and (x15 :e x0) (x7 = x6 x13 x15) -> x14) -> x14))) x11))) (Eps_i (fun x11 : set => and (x11 :e x0) (x9 = x6 (Eps_i (fun x13 : set => and (x13 :e x0) (forall x14 : prop, (forall x15, and (x15 :e x0) (x9 = x6 x13 x15) -> x14) -> x14))) x11)))))) (x3 (x4 (Eps_i (fun x11 : set => and (x11 :e x0) (forall x12 : prop, (forall x13, and (x13 :e x0) (x7 = x6 x11 x13) -> x12) -> x12))) (Eps_i (fun x11 : set => and (x11 :e x0) (x9 = x6 (Eps_i (fun x13 : set => and (x13 :e x0) (forall x14 : prop, (forall x15, and (x15 :e x0) (x9 = x6 x13 x15) -> x14) -> x14))) x11)))) (x4 (Eps_i (fun x11 : set => and (x11 :e x0) (x7 = x6 (Eps_i (fun x13 : set => and (x13 :e x0) (forall x14 : prop, (forall x15, and (x15 :e x0) (x7 = x6 x13 x15) -> x14) -> x14))) x11))) (Eps_i (fun x11 : set => and (x11 :e x0) (forall x12 : prop, (forall x13, and (x13 :e x0) (x9 = x6 x11 x13) -> x12) -> x12))))) = x6 x2 x1) -> x8) -> x8))).
admit.
Qed.
