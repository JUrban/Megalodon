Section Eq.
Variable A:SType.
Definition eq : A->A->prop := fun x y:A => forall Q:A->A->prop, Q x y -> Q y x.
End Eq.
Infix = 502 := eq.
Section Ex.
Variable A:SType.
Definition ex : (A->prop)->prop := fun Q:A->prop => forall P:prop, (forall x:A, Q x -> P) -> P.
End Ex.
(* Unicode exists "2203" *)
Binder+ exists , := ex.
(* Parameter Eps_i "174b78e53fc239e8c2aab4ab5a996a27e3e5741e88070dad186e05fb13f275e5" *)
Parameter Eps_i : (set->prop)->set.
Parameter In:set->set->prop.
Parameter Empty : set.
(* Unicode Union "22C3" *)
Parameter Union : set->set.
(* Unicode Power "1D4AB" *)
Parameter Power : set->set.
Parameter Repl : set -> (set -> set) -> set.
Notation Repl Repl.
Parameter UnivOf : set->set.
(* Parameter int "f7cd39d139f71b389f61d3cf639bf341d01dac1be60ad65b40ee3aa5218e0043" "90ee851305d1ba4b80424ec6e2760ebabb1fd3e399fcb5c6b5c814d898138c16" *)
Parameter int : set.
(* Parameter add_SNo "29b9b279a7a5b776b777d842e678a4acaf3b85b17a0223605e4cc68025e9b2a7" "127d043261bd13d57aaeb99e7d2c02cae2bd0698c0d689b03e69f1ac89b3c2c6" *)
Parameter add_SNo : set -> set -> set.
(* Parameter ordsucc "9db634daee7fc36315ddda5f5f694934869921e9c5f55e8b25c91c0a07c5cbec" "65d8837d7b0172ae830bed36c8407fcd41b7d875033d2284eb2df245b42295a6" *)
Parameter ordsucc : set -> set.
Notation Nat Empty ordsucc.
(* Parameter If_i "8c8f550868df4fdc93407b979afa60092db4b1bb96087bc3c2f17fadf3f35cbf" "b8ff52f838d0ff97beb955ee0b26fad79602e1529f8a2854bda0ecd4193a8a3c" *)
Parameter If_i : prop -> set -> set -> set.
(* Parameter SNoLe "09cdd0b9af76352f6b30bf3c4bca346eaa03d280255f13afb2e73fe8329098b6" "ddf7d378c4df6fcdf73e416f8d4c08965e38e50abe1463a0312048d3dd7ac7e9" *)
Parameter SNoLe : set -> set -> prop.
(* Parameter minus_SNo "6d39c64862ac40c95c6f5e4ed5f02bb019279bfb0cda8c9bbe0e1b813b1e876c" "268a6c1da15b8fe97d37be85147bc7767b27098cdae193faac127195e8824808" *)
Parameter minus_SNo : set -> set.
(* Parameter mul_SNo "f56bf39b8eea93d7f63da529dedb477ae1ab1255c645c47d8915623f364f2d6b" "48d05483e628cb37379dd5d279684d471d85c642fe63533c3ad520b84b18df9d" *)
Parameter mul_SNo : set -> set -> set.
Theorem missingprop_ff694f5880e679b77432dc33f35b5e317176e30f3c7408f96e1d2c7c8a98a7b7 : (forall x0 : set -> set -> set, (forall x1, x1 :e int -> (forall x2, x2 :e int -> x0 x1 x2 :e int)) -> (forall x1 : set -> set, (forall x2, x2 :e int -> x1 x2 :e int) -> (forall x2, x2 :e int -> (forall x3 : set -> set -> set, (forall x4, x4 :e int -> (forall x5, x5 :e int -> x3 x4 x5 :e int)) -> (forall x4 : set -> set, (forall x5, x5 :e int -> x4 x5 :e int) -> (forall x5 : set -> set, (forall x6, x6 :e int -> x5 x6 :e int) -> (forall x6 : set -> set, (forall x7, x7 :e int -> x6 x7 :e int) -> (forall x7, x7 :e int -> (forall x8 : set -> set, (forall x9, x9 :e int -> x8 x9 :e int) -> (forall x9 : set -> set, (forall x10, x10 :e int -> x9 x10 :e int) -> (forall x10, x10 :e int -> (forall x11 : set -> set -> set, (forall x12, x12 :e int -> (forall x13, x13 :e int -> x11 x12 x13 :e int)) -> (forall x12 : set -> set, (forall x13, x13 :e int -> x12 x13 :e int) -> (forall x13 : set -> set, (forall x14, x14 :e int -> x13 x14 :e int) -> (forall x14 : set -> set -> set, (forall x15, x15 :e int -> (forall x16, x16 :e int -> x14 x15 x16 :e int)) -> (forall x15 : set -> set, (forall x16, x16 :e int -> x15 x16 :e int) -> (forall x16 : set -> set, (forall x17, x17 :e int -> x16 x17 :e int) -> (forall x17, x17 :e int -> (forall x18, x18 :e int -> x0 x17 x18 = add_SNo (add_SNo x17 x17) x18)) -> (forall x17, x17 :e int -> x1 x17 = add_SNo x17 x17) -> x2 = 2 -> (forall x17, x17 :e int -> (forall x18, x18 :e int -> x3 x17 x18 = If_i (SNoLe x17 0) x18 (x0 (x3 (add_SNo x17 (minus_SNo 1)) x18) x17))) -> (forall x17, x17 :e int -> x4 x17 = x3 (x1 x17) x2) -> (forall x17, x17 :e int -> x5 x17 = add_SNo (x4 x17) (minus_SNo 1)) -> (forall x17, x17 :e int -> x6 x17 = mul_SNo x17 x17) -> x7 = 1 -> (forall x17, x17 :e int -> x8 x17 = add_SNo x17 x17) -> (forall x17, x17 :e int -> x9 x17 = x17) -> x10 = 2 -> (forall x17, x17 :e int -> (forall x18, x18 :e int -> x11 x17 x18 = If_i (SNoLe x17 0) x18 (x8 (x11 (add_SNo x17 (minus_SNo 1)) x18)))) -> (forall x17, x17 :e int -> x12 x17 = x11 (x9 x17) x10) -> (forall x17, x17 :e int -> x13 x17 = x12 x17) -> (forall x17, x17 :e int -> (forall x18, x18 :e int -> x14 x17 x18 = If_i (SNoLe x17 0) x18 (x6 (x14 (add_SNo x17 (minus_SNo 1)) x18)))) -> (forall x17, x17 :e int -> x15 x17 = x14 x7 (x13 x17)) -> (forall x17, x17 :e int -> x16 x17 = add_SNo 1 (add_SNo (x15 x17) (minus_SNo (mul_SNo 2 (add_SNo 2 x17))))) -> (forall x17, x17 :e int -> SNoLe 0 x17 -> x5 x17 = x16 x17)))))))))))))))))).
Admitted.
Theorem missingprop_d0c79100c060b4bb347a6272fb2bfa0a63066834f02a430c84899660ce2d0ff2 : (forall x0 : set -> set -> set, (forall x1, x1 :e int -> (forall x2, x2 :e int -> x0 x1 x2 :e int)) -> (forall x1 : set -> set -> set, (forall x2, x2 :e int -> (forall x3, x3 :e int -> x1 x2 x3 :e int)) -> (forall x2 : set -> set, (forall x3, x3 :e int -> x2 x3 :e int) -> (forall x3 : set -> set -> set, (forall x4, x4 :e int -> (forall x5, x5 :e int -> x3 x4 x5 :e int)) -> (forall x4 : set -> set -> set, (forall x5, x5 :e int -> (forall x6, x6 :e int -> x4 x5 x6 :e int)) -> (forall x5 : set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> x5 x6 x7 :e int)) -> (forall x6 : set -> set -> set, (forall x7, x7 :e int -> (forall x8, x8 :e int -> x6 x7 x8 :e int)) -> (forall x7 : set -> set, (forall x8, x8 :e int -> x7 x8 :e int) -> (forall x8 : set -> set -> set, (forall x9, x9 :e int -> (forall x10, x10 :e int -> x8 x9 x10 :e int)) -> (forall x9 : set -> set -> set, (forall x10, x10 :e int -> (forall x11, x11 :e int -> x9 x10 x11 :e int)) -> (forall x10 : set -> set -> set, (forall x11, x11 :e int -> (forall x12, x12 :e int -> x10 x11 x12 :e int)) -> (forall x11 : set -> set, (forall x12, x12 :e int -> x11 x12 :e int) -> (forall x12, x12 :e int -> (forall x13 : set -> set -> set, (forall x14, x14 :e int -> (forall x15, x15 :e int -> x13 x14 x15 :e int)) -> (forall x14 : set -> set, (forall x15, x15 :e int -> x14 x15 :e int) -> (forall x15 : set -> set, (forall x16, x16 :e int -> x15 x16 :e int) -> (forall x16 : set -> set -> set, (forall x17, x17 :e int -> (forall x18, x18 :e int -> x16 x17 x18 :e int)) -> (forall x17 : set -> set -> set, (forall x18, x18 :e int -> (forall x19, x19 :e int -> x17 x18 x19 :e int)) -> (forall x18 : set -> set, (forall x19, x19 :e int -> x18 x19 :e int) -> (forall x19 : set -> set -> set, (forall x20, x20 :e int -> (forall x21, x21 :e int -> x19 x20 x21 :e int)) -> (forall x20 : set -> set -> set, (forall x21, x21 :e int -> (forall x22, x22 :e int -> x20 x21 x22 :e int)) -> (forall x21 : set -> set -> set, (forall x22, x22 :e int -> (forall x23, x23 :e int -> x21 x22 x23 :e int)) -> (forall x22 : set -> set, (forall x23, x23 :e int -> x22 x23 :e int) -> (forall x23, x23 :e int -> (forall x24 : set -> set -> set, (forall x25, x25 :e int -> (forall x26, x26 :e int -> x24 x25 x26 :e int)) -> (forall x25 : set -> set, (forall x26, x26 :e int -> x25 x26 :e int) -> (forall x26 : set -> set, (forall x27, x27 :e int -> x26 x27 :e int) -> (forall x27, x27 :e int -> (forall x28, x28 :e int -> x0 x27 x28 = add_SNo x27 x28)) -> (forall x27, x27 :e int -> (forall x28, x28 :e int -> x1 x27 x28 = x28)) -> (forall x27, x27 :e int -> x2 x27 = x27) -> (forall x27, x27 :e int -> (forall x28, x28 :e int -> x3 x27 x28 = If_i (SNoLe x27 0) x28 (x0 (x3 (add_SNo x27 (minus_SNo 1)) x28) x27))) -> (forall x27, x27 :e int -> (forall x28, x28 :e int -> x4 x27 x28 = x3 (x1 x27 x28) (x2 x27))) -> (forall x27, x27 :e int -> (forall x28, x28 :e int -> x5 x27 x28 = x4 x27 x28)) -> (forall x27, x27 :e int -> (forall x28, x28 :e int -> x6 x27 x28 = add_SNo 1 x28)) -> (forall x27, x27 :e int -> x7 x27 = x27) -> (forall x27, x27 :e int -> (forall x28, x28 :e int -> x8 x27 x28 = If_i (SNoLe x27 0) x28 (x5 (x8 (add_SNo x27 (minus_SNo 1)) x28) x27))) -> (forall x27, x27 :e int -> (forall x28, x28 :e int -> x9 x27 x28 = x8 (x6 x27 x28) (x7 x27))) -> (forall x27, x27 :e int -> (forall x28, x28 :e int -> x10 x27 x28 = add_SNo (add_SNo (x9 x27 x28) x27) x28)) -> (forall x27, x27 :e int -> x11 x27 = x27) -> x12 = 1 -> (forall x27, x27 :e int -> (forall x28, x28 :e int -> x13 x27 x28 = If_i (SNoLe x27 0) x28 (x10 (x13 (add_SNo x27 (minus_SNo 1)) x28) x27))) -> (forall x27, x27 :e int -> x14 x27 = x13 (x11 x27) x12) -> (forall x27, x27 :e int -> x15 x27 = add_SNo (add_SNo (mul_SNo (x14 x27) 2) (minus_SNo 1)) (minus_SNo x27)) -> (forall x27, x27 :e int -> (forall x28, x28 :e int -> x16 x27 x28 = add_SNo (add_SNo (mul_SNo x28 x28) x27) x28)) -> (forall x27, x27 :e int -> (forall x28, x28 :e int -> x17 x27 x28 = add_SNo 1 x28)) -> (forall x27, x27 :e int -> x18 x27 = add_SNo 1 x27) -> (forall x27, x27 :e int -> (forall x28, x28 :e int -> x19 x27 x28 = If_i (SNoLe x27 0) x28 (x16 (x19 (add_SNo x27 (minus_SNo 1)) x28) x27))) -> (forall x27, x27 :e int -> (forall x28, x28 :e int -> x20 x27 x28 = x19 (x17 x27 x28) (x18 x27))) -> (forall x27, x27 :e int -> (forall x28, x28 :e int -> x21 x27 x28 = add_SNo (add_SNo (add_SNo (x20 x27 x28) x27) x28) x28)) -> (forall x27, x27 :e int -> x22 x27 = x27) -> x23 = 1 -> (forall x27, x27 :e int -> (forall x28, x28 :e int -> x24 x27 x28 = If_i (SNoLe x27 0) x28 (x21 (x24 (add_SNo x27 (minus_SNo 1)) x28) x27))) -> (forall x27, x27 :e int -> x25 x27 = x24 (x22 x27) x23) -> (forall x27, x27 :e int -> x26 x27 = add_SNo (x25 x27) (minus_SNo x27)) -> (forall x27, x27 :e int -> SNoLe 0 x27 -> x15 x27 = x26 x27)))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_c80b1b1dc26b0d7eff8ffb93112ea75d920a8cde1b51670fac08cd3732c98c6b : (forall x0 : set -> set -> set, (forall x1, x1 :e int -> (forall x2, x2 :e int -> x0 x1 x2 :e int)) -> (forall x1 : set -> set, (forall x2, x2 :e int -> x1 x2 :e int) -> (forall x2 : set -> set, (forall x3, x3 :e int -> x2 x3 :e int) -> (forall x3 : set -> set -> set, (forall x4, x4 :e int -> (forall x5, x5 :e int -> x3 x4 x5 :e int)) -> (forall x4 : set -> set, (forall x5, x5 :e int -> x4 x5 :e int) -> (forall x5 : set -> set, (forall x6, x6 :e int -> x5 x6 :e int) -> (forall x6 : set -> set, (forall x7, x7 :e int -> x6 x7 :e int) -> (forall x7, x7 :e int -> (forall x8 : set -> set, (forall x9, x9 :e int -> x8 x9 :e int) -> (forall x9 : set -> set -> set, (forall x10, x10 :e int -> (forall x11, x11 :e int -> x9 x10 x11 :e int)) -> (forall x10 : set -> set, (forall x11, x11 :e int -> x10 x11 :e int) -> (forall x11 : set -> set, (forall x12, x12 :e int -> x11 x12 :e int) -> (forall x12, x12 :e int -> (forall x13, x13 :e int -> x0 x12 x13 = add_SNo (add_SNo (mul_SNo x13 x13) x12) x13)) -> (forall x12, x12 :e int -> x1 x12 = add_SNo 1 (add_SNo (add_SNo x12 x12) x12)) -> (forall x12, x12 :e int -> x2 x12 = x12) -> (forall x12, x12 :e int -> (forall x13, x13 :e int -> x3 x12 x13 = If_i (SNoLe x12 0) x13 (x0 (x3 (add_SNo x12 (minus_SNo 1)) x13) x12))) -> (forall x12, x12 :e int -> x4 x12 = x3 (x1 x12) (x2 x12)) -> (forall x12, x12 :e int -> x5 x12 = x4 x12) -> (forall x12, x12 :e int -> x6 x12 = mul_SNo x12 x12) -> x7 = 1 -> (forall x12, x12 :e int -> x8 x12 = mul_SNo (add_SNo 1 2) (add_SNo 1 x12)) -> (forall x12, x12 :e int -> (forall x13, x13 :e int -> x9 x12 x13 = If_i (SNoLe x12 0) x13 (x6 (x9 (add_SNo x12 (minus_SNo 1)) x13)))) -> (forall x12, x12 :e int -> x10 x12 = x9 x7 (x8 x12)) -> (forall x12, x12 :e int -> x11 x12 = add_SNo 2 (add_SNo (mul_SNo (add_SNo 2 (x10 x12)) x12) x12)) -> (forall x12, x12 :e int -> SNoLe 0 x12 -> x5 x12 = x11 x12))))))))))))).
Admitted.
Theorem missingprop_77cc725755ca6acb5210559c49fc539fb3a21c8c6f363ee1f96dd85239672d12 : (forall x0 : set -> set -> set, (forall x1, x1 :e int -> (forall x2, x2 :e int -> x0 x1 x2 :e int)) -> (forall x1 : set -> set -> set, (forall x2, x2 :e int -> (forall x3, x3 :e int -> x1 x2 x3 :e int)) -> (forall x2 : set -> set, (forall x3, x3 :e int -> x2 x3 :e int) -> (forall x3 : set -> set -> set, (forall x4, x4 :e int -> (forall x5, x5 :e int -> x3 x4 x5 :e int)) -> (forall x4 : set -> set -> set, (forall x5, x5 :e int -> (forall x6, x6 :e int -> x4 x5 x6 :e int)) -> (forall x5 : set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> x5 x6 x7 :e int)) -> (forall x6, x6 :e int -> (forall x7 : set -> set, (forall x8, x8 :e int -> x7 x8 :e int) -> (forall x8, x8 :e int -> (forall x9 : set -> set, (forall x10, x10 :e int -> x9 x10 :e int) -> (forall x10 : set -> set -> set -> set, (forall x11, x11 :e int -> (forall x12, x12 :e int -> (forall x13, x13 :e int -> x10 x11 x12 x13 :e int))) -> (forall x11 : set -> set -> set -> set, (forall x12, x12 :e int -> (forall x13, x13 :e int -> (forall x14, x14 :e int -> x11 x12 x13 x14 :e int))) -> (forall x12 : set -> set, (forall x13, x13 :e int -> x12 x13 :e int) -> (forall x13 : set -> set, (forall x14, x14 :e int -> x13 x14 :e int) -> (forall x14 : set -> set, (forall x15, x15 :e int -> x14 x15 :e int) -> (forall x15 : set -> set, (forall x16, x16 :e int -> x15 x16 :e int) -> (forall x16, x16 :e int -> (forall x17 : set -> set -> set, (forall x18, x18 :e int -> (forall x19, x19 :e int -> x17 x18 x19 :e int)) -> (forall x18 : set -> set, (forall x19, x19 :e int -> x18 x19 :e int) -> (forall x19 : set -> set -> set, (forall x20, x20 :e int -> (forall x21, x21 :e int -> x19 x20 x21 :e int)) -> (forall x20 : set -> set, (forall x21, x21 :e int -> x20 x21 :e int) -> (forall x21, x21 :e int -> (forall x22 : set -> set -> set, (forall x23, x23 :e int -> (forall x24, x24 :e int -> x22 x23 x24 :e int)) -> (forall x23 : set -> set, (forall x24, x24 :e int -> x23 x24 :e int) -> (forall x24 : set -> set, (forall x25, x25 :e int -> x24 x25 :e int) -> (forall x25, x25 :e int -> (forall x26, x26 :e int -> x0 x25 x26 = mul_SNo x25 x26)) -> (forall x25, x25 :e int -> (forall x26, x26 :e int -> x1 x25 x26 = x26)) -> (forall x25, x25 :e int -> x2 x25 = x25) -> (forall x25, x25 :e int -> (forall x26, x26 :e int -> x3 x25 x26 = If_i (SNoLe x25 0) x26 (x0 (x3 (add_SNo x25 (minus_SNo 1)) x26) x25))) -> (forall x25, x25 :e int -> (forall x26, x26 :e int -> x4 x25 x26 = x3 (x1 x25 x26) (x2 x25))) -> (forall x25, x25 :e int -> (forall x26, x26 :e int -> x5 x25 x26 = x4 x25 x26)) -> x6 = 2 -> (forall x25, x25 :e int -> x7 x25 = x25) -> x8 = 1 -> (forall x25, x25 :e int -> x9 x25 = x25) -> (forall x25, x25 :e int -> (forall x26, x26 :e int -> (forall x27, x27 :e int -> x10 x25 x26 x27 = If_i (SNoLe x25 0) x26 (x5 (x10 (add_SNo x25 (minus_SNo 1)) x26 x27) (x11 (add_SNo x25 (minus_SNo 1)) x26 x27))))) -> (forall x25, x25 :e int -> (forall x26, x26 :e int -> (forall x27, x27 :e int -> x11 x25 x26 x27 = If_i (SNoLe x25 0) x27 x6))) -> (forall x25, x25 :e int -> x12 x25 = x10 (x7 x25) x8 (x9 x25)) -> (forall x25, x25 :e int -> x13 x25 = x12 x25) -> (forall x25, x25 :e int -> x14 x25 = add_SNo x25 x25) -> (forall x25, x25 :e int -> x15 x25 = add_SNo x25 (minus_SNo 1)) -> x16 = 1 -> (forall x25, x25 :e int -> (forall x26, x26 :e int -> x17 x25 x26 = If_i (SNoLe x25 0) x26 (x14 (x17 (add_SNo x25 (minus_SNo 1)) x26)))) -> (forall x25, x25 :e int -> x18 x25 = x17 (x15 x25) x16) -> (forall x25, x25 :e int -> (forall x26, x26 :e int -> x19 x25 x26 = mul_SNo x25 x26)) -> (forall x25, x25 :e int -> x20 x25 = x25) -> x21 = 1 -> (forall x25, x25 :e int -> (forall x26, x26 :e int -> x22 x25 x26 = If_i (SNoLe x25 0) x26 (x19 (x22 (add_SNo x25 (minus_SNo 1)) x26) x25))) -> (forall x25, x25 :e int -> x23 x25 = x22 (x20 x25) x21) -> (forall x25, x25 :e int -> x24 x25 = mul_SNo (x18 x25) (x23 x25)) -> (forall x25, x25 :e int -> SNoLe 0 x25 -> x13 x25 = x24 x25)))))))))))))))))))))))))).
Admitted.
Theorem missingprop_2ea794c8238fffbb84bce54a5a06da40135f2e36bf8b79cfc37ebdfa86e0f9a8 : (forall x0 : set -> set -> set, (forall x1, x1 :e int -> (forall x2, x2 :e int -> x0 x1 x2 :e int)) -> (forall x1 : set -> set, (forall x2, x2 :e int -> x1 x2 :e int) -> (forall x2, x2 :e int -> (forall x3 : set -> set -> set, (forall x4, x4 :e int -> (forall x5, x5 :e int -> x3 x4 x5 :e int)) -> (forall x4 : set -> set, (forall x5, x5 :e int -> x4 x5 :e int) -> (forall x5 : set -> set, (forall x6, x6 :e int -> x5 x6 :e int) -> (forall x6 : set -> set -> set, (forall x7, x7 :e int -> (forall x8, x8 :e int -> x6 x7 x8 :e int)) -> (forall x7 : set -> set -> set, (forall x8, x8 :e int -> (forall x9, x9 :e int -> x7 x8 x9 :e int)) -> (forall x8 : set -> set, (forall x9, x9 :e int -> x8 x9 :e int) -> (forall x9 : set -> set, (forall x10, x10 :e int -> x9 x10 :e int) -> (forall x10, x10 :e int -> (forall x11 : set -> set -> set -> set, (forall x12, x12 :e int -> (forall x13, x13 :e int -> (forall x14, x14 :e int -> x11 x12 x13 x14 :e int))) -> (forall x12 : set -> set -> set -> set, (forall x13, x13 :e int -> (forall x14, x14 :e int -> (forall x15, x15 :e int -> x12 x13 x14 x15 :e int))) -> (forall x13 : set -> set, (forall x14, x14 :e int -> x13 x14 :e int) -> (forall x14 : set -> set, (forall x15, x15 :e int -> x14 x15 :e int) -> (forall x15, x15 :e int -> (forall x16, x16 :e int -> x0 x15 x16 = add_SNo 1 (add_SNo (mul_SNo 2 (mul_SNo x15 x16)) (minus_SNo x15)))) -> (forall x15, x15 :e int -> x1 x15 = x15) -> x2 = 0 -> (forall x15, x15 :e int -> (forall x16, x16 :e int -> x3 x15 x16 = If_i (SNoLe x15 0) x16 (x0 (x3 (add_SNo x15 (minus_SNo 1)) x16) x15))) -> (forall x15, x15 :e int -> x4 x15 = x3 (x1 x15) x2) -> (forall x15, x15 :e int -> x5 x15 = x4 x15) -> (forall x15, x15 :e int -> (forall x16, x16 :e int -> x6 x15 x16 = add_SNo 1 (mul_SNo x15 x16))) -> (forall x15, x15 :e int -> (forall x16, x16 :e int -> x7 x15 x16 = add_SNo 2 x16)) -> (forall x15, x15 :e int -> x8 x15 = add_SNo x15 (minus_SNo 1)) -> (forall x15, x15 :e int -> x9 x15 = If_i (SNoLe x15 0) 0 1) -> x10 = add_SNo 1 2 -> (forall x15, x15 :e int -> (forall x16, x16 :e int -> (forall x17, x17 :e int -> x11 x15 x16 x17 = If_i (SNoLe x15 0) x16 (x6 (x11 (add_SNo x15 (minus_SNo 1)) x16 x17) (x12 (add_SNo x15 (minus_SNo 1)) x16 x17))))) -> (forall x15, x15 :e int -> (forall x16, x16 :e int -> (forall x17, x17 :e int -> x12 x15 x16 x17 = If_i (SNoLe x15 0) x17 (x7 (x11 (add_SNo x15 (minus_SNo 1)) x16 x17) (x12 (add_SNo x15 (minus_SNo 1)) x16 x17))))) -> (forall x15, x15 :e int -> x13 x15 = x11 (x8 x15) (x9 x15) x10) -> (forall x15, x15 :e int -> x14 x15 = x13 x15) -> (forall x15, x15 :e int -> SNoLe 0 x15 -> x5 x15 = x14 x15)))))))))))))))).
Admitted.
Theorem missingprop_7927b160f85656cc0f2fc7968fdfce06c1493dd01f2b66573d9ced18baf42acc : (forall x0 : set -> set -> set, (forall x1, x1 :e int -> (forall x2, x2 :e int -> x0 x1 x2 :e int)) -> (forall x1 : set -> set -> set, (forall x2, x2 :e int -> (forall x3, x3 :e int -> x1 x2 x3 :e int)) -> (forall x2 : set -> set, (forall x3, x3 :e int -> x2 x3 :e int) -> (forall x3, x3 :e int -> (forall x4 : set -> set -> set, (forall x5, x5 :e int -> (forall x6, x6 :e int -> x4 x5 x6 :e int)) -> (forall x5 : set -> set, (forall x6, x6 :e int -> x5 x6 :e int) -> (forall x6 : set -> set, (forall x7, x7 :e int -> x6 x7 :e int) -> (forall x7, x7 :e int -> (forall x8 : set -> set -> set, (forall x9, x9 :e int -> (forall x10, x10 :e int -> x8 x9 x10 :e int)) -> (forall x9 : set -> set, (forall x10, x10 :e int -> x9 x10 :e int) -> (forall x10 : set -> set, (forall x11, x11 :e int -> x10 x11 :e int) -> (forall x11 : set -> set -> set, (forall x12, x12 :e int -> (forall x13, x13 :e int -> x11 x12 x13 :e int)) -> (forall x12 : set -> set -> set, (forall x13, x13 :e int -> (forall x14, x14 :e int -> x12 x13 x14 :e int)) -> (forall x13 : set -> set, (forall x14, x14 :e int -> x13 x14 :e int) -> (forall x14, x14 :e int -> (forall x15 : set -> set -> set, (forall x16, x16 :e int -> (forall x17, x17 :e int -> x15 x16 x17 :e int)) -> (forall x16 : set -> set, (forall x17, x17 :e int -> x16 x17 :e int) -> (forall x17 : set -> set, (forall x18, x18 :e int -> x17 x18 :e int) -> (forall x18, x18 :e int -> (forall x19 : set -> set -> set, (forall x20, x20 :e int -> (forall x21, x21 :e int -> x19 x20 x21 :e int)) -> (forall x20 : set -> set, (forall x21, x21 :e int -> x20 x21 :e int) -> (forall x21 : set -> set, (forall x22, x22 :e int -> x21 x22 :e int) -> (forall x22, x22 :e int -> (forall x23, x23 :e int -> x0 x22 x23 = mul_SNo x22 x23)) -> (forall x22, x22 :e int -> (forall x23, x23 :e int -> x1 x22 x23 = add_SNo 1 (add_SNo x23 (minus_SNo x22)))) -> (forall x22, x22 :e int -> x2 x22 = x22) -> x3 = 0 -> (forall x22, x22 :e int -> (forall x23, x23 :e int -> x4 x22 x23 = If_i (SNoLe x22 0) x23 (x1 (x4 (add_SNo x22 (minus_SNo 1)) x23) x22))) -> (forall x22, x22 :e int -> x5 x22 = x4 (x2 x22) x3) -> (forall x22, x22 :e int -> x6 x22 = x5 x22) -> x7 = 1 -> (forall x22, x22 :e int -> (forall x23, x23 :e int -> x8 x22 x23 = If_i (SNoLe x22 0) x23 (x0 (x8 (add_SNo x22 (minus_SNo 1)) x23) x22))) -> (forall x22, x22 :e int -> x9 x22 = x8 (x6 x22) x7) -> (forall x22, x22 :e int -> x10 x22 = x9 x22) -> (forall x22, x22 :e int -> (forall x23, x23 :e int -> x11 x22 x23 = add_SNo (mul_SNo x22 x23) x22)) -> (forall x22, x22 :e int -> (forall x23, x23 :e int -> x12 x22 x23 = add_SNo x23 (minus_SNo x22))) -> (forall x22, x22 :e int -> x13 x22 = x22) -> x14 = 1 -> (forall x22, x22 :e int -> (forall x23, x23 :e int -> x15 x22 x23 = If_i (SNoLe x22 0) x23 (x12 (x15 (add_SNo x22 (minus_SNo 1)) x23) x22))) -> (forall x22, x22 :e int -> x16 x22 = x15 (x13 x22) x14) -> (forall x22, x22 :e int -> x17 x22 = add_SNo x22 (minus_SNo (x16 x22))) -> x18 = 1 -> (forall x22, x22 :e int -> (forall x23, x23 :e int -> x19 x22 x23 = If_i (SNoLe x22 0) x23 (x11 (x19 (add_SNo x22 (minus_SNo 1)) x23) x22))) -> (forall x22, x22 :e int -> x20 x22 = x19 (x17 x22) x18) -> (forall x22, x22 :e int -> x21 x22 = x20 x22) -> (forall x22, x22 :e int -> SNoLe 0 x22 -> x10 x22 = x21 x22))))))))))))))))))))))).
Admitted.
Theorem missingprop_c96e647a2eef39fcacfaafb40fa61d0ce96b06e62652e2d967002bc80c9b6b0b : (forall x0 : set -> set, (forall x1, x1 :e int -> x0 x1 :e int) -> (forall x1 : set -> set, (forall x2, x2 :e int -> x1 x2 :e int) -> (forall x2 : set -> set, (forall x3, x3 :e int -> x2 x3 :e int) -> (forall x3 : set -> set, (forall x4, x4 :e int -> x3 x4 :e int) -> (forall x4, x4 :e int -> (forall x5 : set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> x5 x6 x7 :e int)) -> (forall x6 : set -> set, (forall x7, x7 :e int -> x6 x7 :e int) -> (forall x7 : set -> set, (forall x8, x8 :e int -> x7 x8 :e int) -> (forall x8 : set -> set -> set, (forall x9, x9 :e int -> (forall x10, x10 :e int -> x8 x9 x10 :e int)) -> (forall x9 : set -> set, (forall x10, x10 :e int -> x9 x10 :e int) -> (forall x10 : set -> set, (forall x11, x11 :e int -> x10 x11 :e int) -> (forall x11 : set -> set, (forall x12, x12 :e int -> x11 x12 :e int) -> (forall x12, x12 :e int -> (forall x13 : set -> set, (forall x14, x14 :e int -> x13 x14 :e int) -> (forall x14 : set -> set, (forall x15, x15 :e int -> x14 x15 :e int) -> (forall x15, x15 :e int -> (forall x16 : set -> set -> set, (forall x17, x17 :e int -> (forall x18, x18 :e int -> x16 x17 x18 :e int)) -> (forall x17 : set -> set, (forall x18, x18 :e int -> x17 x18 :e int) -> (forall x18 : set -> set, (forall x19, x19 :e int -> x18 x19 :e int) -> (forall x19 : set -> set -> set, (forall x20, x20 :e int -> (forall x21, x21 :e int -> x19 x20 x21 :e int)) -> (forall x20 : set -> set, (forall x21, x21 :e int -> x20 x21 :e int) -> (forall x21 : set -> set, (forall x22, x22 :e int -> x21 x22 :e int) -> (forall x22, x22 :e int -> x0 x22 = add_SNo x22 x22) -> (forall x22, x22 :e int -> x1 x22 = x22) -> (forall x22, x22 :e int -> x2 x22 = add_SNo x22 x22) -> (forall x22, x22 :e int -> x3 x22 = x22) -> x4 = 2 -> (forall x22, x22 :e int -> (forall x23, x23 :e int -> x5 x22 x23 = If_i (SNoLe x22 0) x23 (x2 (x5 (add_SNo x22 (minus_SNo 1)) x23)))) -> (forall x22, x22 :e int -> x6 x22 = x5 (x3 x22) x4) -> (forall x22, x22 :e int -> x7 x22 = add_SNo 2 (x6 x22)) -> (forall x22, x22 :e int -> (forall x23, x23 :e int -> x8 x22 x23 = If_i (SNoLe x22 0) x23 (x0 (x8 (add_SNo x22 (minus_SNo 1)) x23)))) -> (forall x22, x22 :e int -> x9 x22 = x8 (x1 x22) (x7 x22)) -> (forall x22, x22 :e int -> x10 x22 = x9 x22) -> (forall x22, x22 :e int -> x11 x22 = add_SNo (mul_SNo x22 x22) x22) -> x12 = 1 -> (forall x22, x22 :e int -> x13 x22 = add_SNo x22 x22) -> (forall x22, x22 :e int -> x14 x22 = x22) -> x15 = 1 -> (forall x22, x22 :e int -> (forall x23, x23 :e int -> x16 x22 x23 = If_i (SNoLe x22 0) x23 (x13 (x16 (add_SNo x22 (minus_SNo 1)) x23)))) -> (forall x22, x22 :e int -> x17 x22 = x16 (x14 x22) x15) -> (forall x22, x22 :e int -> x18 x22 = x17 x22) -> (forall x22, x22 :e int -> (forall x23, x23 :e int -> x19 x22 x23 = If_i (SNoLe x22 0) x23 (x11 (x19 (add_SNo x22 (minus_SNo 1)) x23)))) -> (forall x22, x22 :e int -> x20 x22 = x19 x12 (x18 x22)) -> (forall x22, x22 :e int -> x21 x22 = mul_SNo 2 (x20 x22)) -> (forall x22, x22 :e int -> SNoLe 0 x22 -> x10 x22 = x21 x22))))))))))))))))))))))).
Admitted.
Theorem missingprop_8fb89c19a3f25d2df57a88f598307a204d4078194e93adf133d114f8f76cc013 : (forall x0 : set -> set -> set, (forall x1, x1 :e int -> (forall x2, x2 :e int -> x0 x1 x2 :e int)) -> (forall x1 : set -> set -> set, (forall x2, x2 :e int -> (forall x3, x3 :e int -> x1 x2 x3 :e int)) -> (forall x2 : set -> set, (forall x3, x3 :e int -> x2 x3 :e int) -> (forall x3 : set -> set, (forall x4, x4 :e int -> x3 x4 :e int) -> (forall x4 : set -> set, (forall x5, x5 :e int -> x4 x5 :e int) -> (forall x5 : set -> set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> (forall x8, x8 :e int -> x5 x6 x7 x8 :e int))) -> (forall x6 : set -> set -> set -> set, (forall x7, x7 :e int -> (forall x8, x8 :e int -> (forall x9, x9 :e int -> x6 x7 x8 x9 :e int))) -> (forall x7 : set -> set, (forall x8, x8 :e int -> x7 x8 :e int) -> (forall x8 : set -> set, (forall x9, x9 :e int -> x8 x9 :e int) -> (forall x9 : set -> set -> set, (forall x10, x10 :e int -> (forall x11, x11 :e int -> x9 x10 x11 :e int)) -> (forall x10 : set -> set, (forall x11, x11 :e int -> x10 x11 :e int) -> (forall x11 : set -> set, (forall x12, x12 :e int -> x11 x12 :e int) -> (forall x12 : set -> set, (forall x13, x13 :e int -> x12 x13 :e int) -> (forall x13, x13 :e int -> (forall x14 : set -> set -> set -> set, (forall x15, x15 :e int -> (forall x16, x16 :e int -> (forall x17, x17 :e int -> x14 x15 x16 x17 :e int))) -> (forall x15 : set -> set -> set -> set, (forall x16, x16 :e int -> (forall x17, x17 :e int -> (forall x18, x18 :e int -> x15 x16 x17 x18 :e int))) -> (forall x16 : set -> set, (forall x17, x17 :e int -> x16 x17 :e int) -> (forall x17 : set -> set, (forall x18, x18 :e int -> x17 x18 :e int) -> (forall x18, x18 :e int -> (forall x19, x19 :e int -> x0 x18 x19 = add_SNo x18 x19)) -> (forall x18, x18 :e int -> (forall x19, x19 :e int -> x1 x18 x19 = add_SNo (add_SNo (add_SNo x18 x19) x19) x19)) -> (forall x18, x18 :e int -> x2 x18 = x18) -> (forall x18, x18 :e int -> x3 x18 = If_i (SNoLe x18 0) 1 2) -> (forall x18, x18 :e int -> x4 x18 = x18) -> (forall x18, x18 :e int -> (forall x19, x19 :e int -> (forall x20, x20 :e int -> x5 x18 x19 x20 = If_i (SNoLe x18 0) x19 (x0 (x5 (add_SNo x18 (minus_SNo 1)) x19 x20) (x6 (add_SNo x18 (minus_SNo 1)) x19 x20))))) -> (forall x18, x18 :e int -> (forall x19, x19 :e int -> (forall x20, x20 :e int -> x6 x18 x19 x20 = If_i (SNoLe x18 0) x20 (x1 (x5 (add_SNo x18 (minus_SNo 1)) x19 x20) (x6 (add_SNo x18 (minus_SNo 1)) x19 x20))))) -> (forall x18, x18 :e int -> x7 x18 = x5 (x2 x18) (x3 x18) (x4 x18)) -> (forall x18, x18 :e int -> x8 x18 = x7 x18) -> (forall x18, x18 :e int -> (forall x19, x19 :e int -> x9 x18 x19 = mul_SNo 2 (add_SNo (add_SNo x18 (minus_SNo x19)) x18))) -> (forall x18, x18 :e int -> x10 x18 = x18) -> (forall x18, x18 :e int -> x11 x18 = add_SNo x18 (minus_SNo 1)) -> (forall x18, x18 :e int -> x12 x18 = add_SNo 2 x18) -> x13 = 2 -> (forall x18, x18 :e int -> (forall x19, x19 :e int -> (forall x20, x20 :e int -> x14 x18 x19 x20 = If_i (SNoLe x18 0) x19 (x9 (x14 (add_SNo x18 (minus_SNo 1)) x19 x20) (x15 (add_SNo x18 (minus_SNo 1)) x19 x20))))) -> (forall x18, x18 :e int -> (forall x19, x19 :e int -> (forall x20, x20 :e int -> x15 x18 x19 x20 = If_i (SNoLe x18 0) x20 (x10 (x14 (add_SNo x18 (minus_SNo 1)) x19 x20))))) -> (forall x18, x18 :e int -> x16 x18 = x14 (x11 x18) (x12 x18) x13) -> (forall x18, x18 :e int -> x17 x18 = If_i (SNoLe x18 0) 1 (x16 x18)) -> (forall x18, x18 :e int -> SNoLe 0 x18 -> x8 x18 = x17 x18))))))))))))))))))).
Admitted.
Theorem missingprop_ad11dbbae57e083ada2487aa7fcb6bb5c4eaf28864309c421fc5e87c043c15c4 : (forall x0 : set -> set -> set, (forall x1, x1 :e int -> (forall x2, x2 :e int -> x0 x1 x2 :e int)) -> (forall x1, x1 :e int -> (forall x2 : set -> set, (forall x3, x3 :e int -> x2 x3 :e int) -> (forall x3 : set -> set -> set, (forall x4, x4 :e int -> (forall x5, x5 :e int -> x3 x4 x5 :e int)) -> (forall x4 : set -> set, (forall x5, x5 :e int -> x4 x5 :e int) -> (forall x5 : set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> x5 x6 x7 :e int)) -> (forall x6 : set -> set -> set, (forall x7, x7 :e int -> (forall x8, x8 :e int -> x6 x7 x8 :e int)) -> (forall x7 : set -> set -> set, (forall x8, x8 :e int -> (forall x9, x9 :e int -> x7 x8 x9 :e int)) -> (forall x8, x8 :e int -> (forall x9, x9 :e int -> (forall x10 : set -> set -> set -> set, (forall x11, x11 :e int -> (forall x12, x12 :e int -> (forall x13, x13 :e int -> x10 x11 x12 x13 :e int))) -> (forall x11 : set -> set -> set -> set, (forall x12, x12 :e int -> (forall x13, x13 :e int -> (forall x14, x14 :e int -> x11 x12 x13 x14 :e int))) -> (forall x12 : set -> set -> set, (forall x13, x13 :e int -> (forall x14, x14 :e int -> x12 x13 x14 :e int)) -> (forall x13 : set -> set -> set, (forall x14, x14 :e int -> (forall x15, x15 :e int -> x13 x14 x15 :e int)) -> (forall x14, x14 :e int -> (forall x15 : set -> set, (forall x16, x16 :e int -> x15 x16 :e int) -> (forall x16 : set -> set -> set, (forall x17, x17 :e int -> (forall x18, x18 :e int -> x16 x17 x18 :e int)) -> (forall x17 : set -> set, (forall x18, x18 :e int -> x17 x18 :e int) -> (forall x18 : set -> set -> set, (forall x19, x19 :e int -> (forall x20, x20 :e int -> x18 x19 x20 :e int)) -> (forall x19 : set -> set -> set, (forall x20, x20 :e int -> (forall x21, x21 :e int -> x19 x20 x21 :e int)) -> (forall x20, x20 :e int -> (forall x21 : set -> set -> set, (forall x22, x22 :e int -> (forall x23, x23 :e int -> x21 x22 x23 :e int)) -> (forall x22 : set -> set -> set, (forall x23, x23 :e int -> (forall x24, x24 :e int -> x22 x23 x24 :e int)) -> (forall x23 : set -> set -> set, (forall x24, x24 :e int -> (forall x25, x25 :e int -> x23 x24 x25 :e int)) -> (forall x24 : set -> set, (forall x25, x25 :e int -> x24 x25 :e int) -> (forall x25, x25 :e int -> (forall x26 : set -> set -> set, (forall x27, x27 :e int -> (forall x28, x28 :e int -> x26 x27 x28 :e int)) -> (forall x27 : set -> set, (forall x28, x28 :e int -> x27 x28 :e int) -> (forall x28 : set -> set, (forall x29, x29 :e int -> x28 x29 :e int) -> (forall x29 : set -> set -> set, (forall x30, x30 :e int -> (forall x31, x31 :e int -> x29 x30 x31 :e int)) -> (forall x30 : set -> set -> set, (forall x31, x31 :e int -> (forall x32, x32 :e int -> x30 x31 x32 :e int)) -> (forall x31 : set -> set, (forall x32, x32 :e int -> x31 x32 :e int) -> (forall x32, x32 :e int -> (forall x33, x33 :e int -> (forall x34 : set -> set -> set -> set, (forall x35, x35 :e int -> (forall x36, x36 :e int -> (forall x37, x37 :e int -> x34 x35 x36 x37 :e int))) -> (forall x35 : set -> set -> set -> set, (forall x36, x36 :e int -> (forall x37, x37 :e int -> (forall x38, x38 :e int -> x35 x36 x37 x38 :e int))) -> (forall x36 : set -> set, (forall x37, x37 :e int -> x36 x37 :e int) -> (forall x37 : set -> set, (forall x38, x38 :e int -> x37 x38 :e int) -> (forall x38, x38 :e int -> (forall x39 : set -> set, (forall x40, x40 :e int -> x39 x40 :e int) -> (forall x40 : set -> set, (forall x41, x41 :e int -> x40 x41 :e int) -> (forall x41, x41 :e int -> (forall x42 : set -> set -> set, (forall x43, x43 :e int -> (forall x44, x44 :e int -> x42 x43 x44 :e int)) -> (forall x43 : set -> set, (forall x44, x44 :e int -> x43 x44 :e int) -> (forall x44 : set -> set, (forall x45, x45 :e int -> x44 x45 :e int) -> (forall x45 : set -> set -> set, (forall x46, x46 :e int -> (forall x47, x47 :e int -> x45 x46 x47 :e int)) -> (forall x46 : set -> set, (forall x47, x47 :e int -> x46 x47 :e int) -> (forall x47 : set -> set, (forall x48, x48 :e int -> x47 x48 :e int) -> (forall x48, x48 :e int -> (forall x49 : set -> set -> set, (forall x50, x50 :e int -> (forall x51, x51 :e int -> x49 x50 x51 :e int)) -> (forall x50 : set -> set -> set, (forall x51, x51 :e int -> (forall x52, x52 :e int -> x50 x51 x52 :e int)) -> (forall x51 : set -> set -> set, (forall x52, x52 :e int -> (forall x53, x53 :e int -> x51 x52 x53 :e int)) -> (forall x52 : set -> set -> set, (forall x53, x53 :e int -> (forall x54, x54 :e int -> x52 x53 x54 :e int)) -> (forall x53 : set -> set, (forall x54, x54 :e int -> x53 x54 :e int) -> (forall x54, x54 :e int -> (forall x55 : set -> set -> set, (forall x56, x56 :e int -> (forall x57, x57 :e int -> x55 x56 x57 :e int)) -> (forall x56 : set -> set, (forall x57, x57 :e int -> x56 x57 :e int) -> (forall x57 : set -> set, (forall x58, x58 :e int -> x57 x58 :e int) -> (forall x58, x58 :e int -> (forall x59 : set -> set -> set, (forall x60, x60 :e int -> (forall x61, x61 :e int -> x59 x60 x61 :e int)) -> (forall x60 : set -> set -> set, (forall x61, x61 :e int -> (forall x62, x62 :e int -> x60 x61 x62 :e int)) -> (forall x61 : set -> set -> set, (forall x62, x62 :e int -> (forall x63, x63 :e int -> x61 x62 x63 :e int)) -> (forall x62 : set -> set -> set, (forall x63, x63 :e int -> (forall x64, x64 :e int -> x62 x63 x64 :e int)) -> (forall x63 : set -> set, (forall x64, x64 :e int -> x63 x64 :e int) -> (forall x64, x64 :e int -> (forall x65 : set -> set -> set, (forall x66, x66 :e int -> (forall x67, x67 :e int -> x65 x66 x67 :e int)) -> (forall x66 : set -> set, (forall x67, x67 :e int -> x66 x67 :e int) -> (forall x67 : set -> set, (forall x68, x68 :e int -> x67 x68 :e int) -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> x0 x68 x69 = mul_SNo (add_SNo 2 x69) x68)) -> x1 = 2 -> (forall x68, x68 :e int -> x2 x68 = x68) -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> x3 x68 x69 = If_i (SNoLe x68 0) x69 (x0 (x3 (add_SNo x68 (minus_SNo 1)) x69) x68))) -> (forall x68, x68 :e int -> x4 x68 = x3 x1 (x2 x68)) -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> x5 x68 x69 = add_SNo (add_SNo (x4 x68) (minus_SNo x68)) (mul_SNo (mul_SNo x69 x69) x69))) -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> x6 x68 x69 = add_SNo x69 x69)) -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> x7 x68 x69 = x69)) -> x8 = 1 -> x9 = 2 -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> (forall x70, x70 :e int -> x10 x68 x69 x70 = If_i (SNoLe x68 0) x69 (x5 (x10 (add_SNo x68 (minus_SNo 1)) x69 x70) (x11 (add_SNo x68 (minus_SNo 1)) x69 x70))))) -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> (forall x70, x70 :e int -> x11 x68 x69 x70 = If_i (SNoLe x68 0) x70 (x6 (x10 (add_SNo x68 (minus_SNo 1)) x69 x70) (x11 (add_SNo x68 (minus_SNo 1)) x69 x70))))) -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> x12 x68 x69 = x10 (x7 x68 x69) x8 x9)) -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> x13 x68 x69 = mul_SNo (add_SNo 2 x69) x68)) -> x14 = 2 -> (forall x68, x68 :e int -> x15 x68 = x68) -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> x16 x68 x69 = If_i (SNoLe x68 0) x69 (x13 (x16 (add_SNo x68 (minus_SNo 1)) x69) x68))) -> (forall x68, x68 :e int -> x17 x68 = x16 x14 (x15 x68)) -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> x18 x68 x69 = add_SNo (x12 x68 x69) (x17 x68))) -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> x19 x68 x69 = x69)) -> x20 = 1 -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> x21 x68 x69 = If_i (SNoLe x68 0) x69 (x18 (x21 (add_SNo x68 (minus_SNo 1)) x69) x68))) -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> x22 x68 x69 = x21 (x19 x68 x69) x20)) -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> x23 x68 x69 = add_SNo (add_SNo (x22 x68 x69) (mul_SNo 2 (add_SNo (add_SNo x68 x68) x68))) x68)) -> (forall x68, x68 :e int -> x24 x68 = x68) -> x25 = 1 -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> x26 x68 x69 = If_i (SNoLe x68 0) x69 (x23 (x26 (add_SNo x68 (minus_SNo 1)) x69) x68))) -> (forall x68, x68 :e int -> x27 x68 = x26 (x24 x68) x25) -> (forall x68, x68 :e int -> x28 x68 = x27 x68) -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> x29 x68 x69 = add_SNo (add_SNo (add_SNo x68 x68) x68) x69)) -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> x30 x68 x69 = add_SNo x69 x69)) -> (forall x68, x68 :e int -> x31 x68 = x68) -> x32 = 1 -> x33 = 2 -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> (forall x70, x70 :e int -> x34 x68 x69 x70 = If_i (SNoLe x68 0) x69 (x29 (x34 (add_SNo x68 (minus_SNo 1)) x69 x70) (x35 (add_SNo x68 (minus_SNo 1)) x69 x70))))) -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> (forall x70, x70 :e int -> x35 x68 x69 x70 = If_i (SNoLe x68 0) x70 (x30 (x34 (add_SNo x68 (minus_SNo 1)) x69 x70) (x35 (add_SNo x68 (minus_SNo 1)) x69 x70))))) -> (forall x68, x68 :e int -> x36 x68 = x34 (x31 x68) x32 x33) -> (forall x68, x68 :e int -> x37 x68 = mul_SNo x68 x68) -> x38 = 1 -> (forall x68, x68 :e int -> x39 x68 = add_SNo x68 x68) -> (forall x68, x68 :e int -> x40 x68 = x68) -> x41 = 1 -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> x42 x68 x69 = If_i (SNoLe x68 0) x69 (x39 (x42 (add_SNo x68 (minus_SNo 1)) x69)))) -> (forall x68, x68 :e int -> x43 x68 = x42 (x40 x68) x41) -> (forall x68, x68 :e int -> x44 x68 = x43 x68) -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> x45 x68 x69 = If_i (SNoLe x68 0) x69 (x37 (x45 (add_SNo x68 (minus_SNo 1)) x69)))) -> (forall x68, x68 :e int -> x46 x68 = x45 x38 (x44 x68)) -> (forall x68, x68 :e int -> x47 x68 = mul_SNo (x36 x68) (x46 x68)) -> x48 = 1 -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> x49 x68 x69 = x69)) -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> x50 x68 x69 = If_i (SNoLe x68 0) x69 (x47 (x50 (add_SNo x68 (minus_SNo 1)) x69)))) -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> x51 x68 x69 = x50 x48 (x49 x68 x69))) -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> x52 x68 x69 = add_SNo (add_SNo (x51 x68 x69) (mul_SNo 2 (add_SNo (add_SNo x68 x68) x68))) x68)) -> (forall x68, x68 :e int -> x53 x68 = x68) -> x54 = 1 -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> x55 x68 x69 = If_i (SNoLe x68 0) x69 (x52 (x55 (add_SNo x68 (minus_SNo 1)) x69) x68))) -> (forall x68, x68 :e int -> x56 x68 = x55 (x53 x68) x54) -> (forall x68, x68 :e int -> x57 x68 = x56 x68) -> x58 = 1 -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> x59 x68 x69 = x69)) -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> x60 x68 x69 = If_i (SNoLe x68 0) x69 (x57 (x60 (add_SNo x68 (minus_SNo 1)) x69)))) -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> x61 x68 x69 = x60 x58 (x59 x68 x69))) -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> x62 x68 x69 = add_SNo (add_SNo (x61 x68 x69) (mul_SNo (add_SNo (mul_SNo (add_SNo x68 x68) 2) x68) 2)) x68)) -> (forall x68, x68 :e int -> x63 x68 = x68) -> x64 = 1 -> (forall x68, x68 :e int -> (forall x69, x69 :e int -> x65 x68 x69 = If_i (SNoLe x68 0) x69 (x62 (x65 (add_SNo x68 (minus_SNo 1)) x69) x68))) -> (forall x68, x68 :e int -> x66 x68 = x65 (x63 x68) x64) -> (forall x68, x68 :e int -> x67 x68 = x66 x68) -> (forall x68, x68 :e int -> SNoLe 0 x68 -> x28 x68 = x67 x68))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_9da37b29fc1f2ef404862a48b520c84757451ed84c7a3bd593938ef0567552cf : (forall x0 : set -> set, (forall x1, x1 :e int -> x0 x1 :e int) -> (forall x1 : set -> set -> set, (forall x2, x2 :e int -> (forall x3, x3 :e int -> x1 x2 x3 :e int)) -> (forall x2, x2 :e int -> (forall x3 : set -> set -> set, (forall x4, x4 :e int -> (forall x5, x5 :e int -> x3 x4 x5 :e int)) -> (forall x4 : set -> set -> set, (forall x5, x5 :e int -> (forall x6, x6 :e int -> x4 x5 x6 :e int)) -> (forall x5 : set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> x5 x6 x7 :e int)) -> (forall x6 : set -> set -> set, (forall x7, x7 :e int -> (forall x8, x8 :e int -> x6 x7 x8 :e int)) -> (forall x7, x7 :e int -> (forall x8 : set -> set -> set, (forall x9, x9 :e int -> (forall x10, x10 :e int -> x8 x9 x10 :e int)) -> (forall x9 : set -> set -> set, (forall x10, x10 :e int -> (forall x11, x11 :e int -> x9 x10 x11 :e int)) -> (forall x10 : set -> set -> set, (forall x11, x11 :e int -> (forall x12, x12 :e int -> x10 x11 x12 :e int)) -> (forall x11, x11 :e int -> (forall x12 : set -> set, (forall x13, x13 :e int -> x12 x13 :e int) -> (forall x13 : set -> set -> set, (forall x14, x14 :e int -> (forall x15, x15 :e int -> x13 x14 x15 :e int)) -> (forall x14 : set -> set, (forall x15, x15 :e int -> x14 x15 :e int) -> (forall x15 : set -> set -> set, (forall x16, x16 :e int -> (forall x17, x17 :e int -> x15 x16 x17 :e int)) -> (forall x16 : set -> set -> set, (forall x17, x17 :e int -> (forall x18, x18 :e int -> x16 x17 x18 :e int)) -> (forall x17, x17 :e int -> (forall x18 : set -> set -> set, (forall x19, x19 :e int -> (forall x20, x20 :e int -> x18 x19 x20 :e int)) -> (forall x19 : set -> set -> set, (forall x20, x20 :e int -> (forall x21, x21 :e int -> x19 x20 x21 :e int)) -> (forall x20 : set -> set -> set, (forall x21, x21 :e int -> (forall x22, x22 :e int -> x20 x21 x22 :e int)) -> (forall x21 : set -> set, (forall x22, x22 :e int -> x21 x22 :e int) -> (forall x22, x22 :e int -> (forall x23 : set -> set -> set, (forall x24, x24 :e int -> (forall x25, x25 :e int -> x23 x24 x25 :e int)) -> (forall x24 : set -> set, (forall x25, x25 :e int -> x24 x25 :e int) -> (forall x25 : set -> set, (forall x26, x26 :e int -> x25 x26 :e int) -> (forall x26 : set -> set -> set, (forall x27, x27 :e int -> (forall x28, x28 :e int -> x26 x27 x28 :e int)) -> (forall x27 : set -> set -> set, (forall x28, x28 :e int -> (forall x29, x29 :e int -> x27 x28 x29 :e int)) -> (forall x28 : set -> set, (forall x29, x29 :e int -> x28 x29 :e int) -> (forall x29, x29 :e int -> (forall x30, x30 :e int -> (forall x31 : set -> set -> set -> set, (forall x32, x32 :e int -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x31 x32 x33 x34 :e int))) -> (forall x32 : set -> set -> set -> set, (forall x33, x33 :e int -> (forall x34, x34 :e int -> (forall x35, x35 :e int -> x32 x33 x34 x35 :e int))) -> (forall x33 : set -> set, (forall x34, x34 :e int -> x33 x34 :e int) -> (forall x34 : set -> set, (forall x35, x35 :e int -> x34 x35 :e int) -> (forall x35, x35 :e int -> (forall x36 : set -> set, (forall x37, x37 :e int -> x36 x37 :e int) -> (forall x37 : set -> set, (forall x38, x38 :e int -> x37 x38 :e int) -> (forall x38, x38 :e int -> (forall x39 : set -> set -> set, (forall x40, x40 :e int -> (forall x41, x41 :e int -> x39 x40 x41 :e int)) -> (forall x40 : set -> set, (forall x41, x41 :e int -> x40 x41 :e int) -> (forall x41 : set -> set, (forall x42, x42 :e int -> x41 x42 :e int) -> (forall x42 : set -> set -> set, (forall x43, x43 :e int -> (forall x44, x44 :e int -> x42 x43 x44 :e int)) -> (forall x43 : set -> set, (forall x44, x44 :e int -> x43 x44 :e int) -> (forall x44 : set -> set, (forall x45, x45 :e int -> x44 x45 :e int) -> (forall x45, x45 :e int -> (forall x46 : set -> set -> set, (forall x47, x47 :e int -> (forall x48, x48 :e int -> x46 x47 x48 :e int)) -> (forall x47 : set -> set -> set, (forall x48, x48 :e int -> (forall x49, x49 :e int -> x47 x48 x49 :e int)) -> (forall x48 : set -> set -> set, (forall x49, x49 :e int -> (forall x50, x50 :e int -> x48 x49 x50 :e int)) -> (forall x49 : set -> set -> set, (forall x50, x50 :e int -> (forall x51, x51 :e int -> x49 x50 x51 :e int)) -> (forall x50 : set -> set, (forall x51, x51 :e int -> x50 x51 :e int) -> (forall x51, x51 :e int -> (forall x52 : set -> set -> set, (forall x53, x53 :e int -> (forall x54, x54 :e int -> x52 x53 x54 :e int)) -> (forall x53 : set -> set, (forall x54, x54 :e int -> x53 x54 :e int) -> (forall x54 : set -> set, (forall x55, x55 :e int -> x54 x55 :e int) -> (forall x55, x55 :e int -> (forall x56 : set -> set -> set, (forall x57, x57 :e int -> (forall x58, x58 :e int -> x56 x57 x58 :e int)) -> (forall x57 : set -> set -> set, (forall x58, x58 :e int -> (forall x59, x59 :e int -> x57 x58 x59 :e int)) -> (forall x58 : set -> set -> set, (forall x59, x59 :e int -> (forall x60, x60 :e int -> x58 x59 x60 :e int)) -> (forall x59 : set -> set -> set, (forall x60, x60 :e int -> (forall x61, x61 :e int -> x59 x60 x61 :e int)) -> (forall x60 : set -> set, (forall x61, x61 :e int -> x60 x61 :e int) -> (forall x61, x61 :e int -> (forall x62 : set -> set -> set, (forall x63, x63 :e int -> (forall x64, x64 :e int -> x62 x63 x64 :e int)) -> (forall x63 : set -> set, (forall x64, x64 :e int -> x63 x64 :e int) -> (forall x64 : set -> set, (forall x65, x65 :e int -> x64 x65 :e int) -> (forall x65, x65 :e int -> x0 x65 = add_SNo (add_SNo x65 x65) x65) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x1 x65 x66 = add_SNo x66 x66)) -> x2 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x3 x65 x66 = If_i (SNoLe x65 0) x66 (x0 (x3 (add_SNo x65 (minus_SNo 1)) x66)))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x4 x65 x66 = x3 (x1 x65 x66) x2)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x5 x65 x66 = add_SNo (x4 x65 x66) (mul_SNo 2 (mul_SNo 2 (add_SNo x65 x65))))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x6 x65 x66 = x66)) -> x7 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x8 x65 x66 = If_i (SNoLe x65 0) x66 (x5 (x8 (add_SNo x65 (minus_SNo 1)) x66) x65))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x9 x65 x66 = x8 (x6 x65 x66) x7)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x10 x65 x66 = mul_SNo (add_SNo 2 x66) x65)) -> x11 = 2 -> (forall x65, x65 :e int -> x12 x65 = x65) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x13 x65 x66 = If_i (SNoLe x65 0) x66 (x10 (x13 (add_SNo x65 (minus_SNo 1)) x66) x65))) -> (forall x65, x65 :e int -> x14 x65 = x13 x11 (x12 x65)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x15 x65 x66 = add_SNo (x9 x65 x66) (x14 x65))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x16 x65 x66 = x66)) -> x17 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x18 x65 x66 = If_i (SNoLe x65 0) x66 (x15 (x18 (add_SNo x65 (minus_SNo 1)) x66) x65))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x19 x65 x66 = x18 (x16 x65 x66) x17)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x20 x65 x66 = add_SNo (add_SNo (x19 x65 x66) (mul_SNo 2 (add_SNo (add_SNo x65 x65) x65))) x65)) -> (forall x65, x65 :e int -> x21 x65 = x65) -> x22 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x23 x65 x66 = If_i (SNoLe x65 0) x66 (x20 (x23 (add_SNo x65 (minus_SNo 1)) x66) x65))) -> (forall x65, x65 :e int -> x24 x65 = x23 (x21 x65) x22) -> (forall x65, x65 :e int -> x25 x65 = x24 x65) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x26 x65 x66 = add_SNo (add_SNo (add_SNo x65 x65) x65) x66)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x27 x65 x66 = add_SNo x66 x66)) -> (forall x65, x65 :e int -> x28 x65 = x65) -> x29 = 1 -> x30 = 2 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> (forall x67, x67 :e int -> x31 x65 x66 x67 = If_i (SNoLe x65 0) x66 (x26 (x31 (add_SNo x65 (minus_SNo 1)) x66 x67) (x32 (add_SNo x65 (minus_SNo 1)) x66 x67))))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> (forall x67, x67 :e int -> x32 x65 x66 x67 = If_i (SNoLe x65 0) x67 (x27 (x31 (add_SNo x65 (minus_SNo 1)) x66 x67) (x32 (add_SNo x65 (minus_SNo 1)) x66 x67))))) -> (forall x65, x65 :e int -> x33 x65 = x31 (x28 x65) x29 x30) -> (forall x65, x65 :e int -> x34 x65 = mul_SNo x65 x65) -> x35 = 1 -> (forall x65, x65 :e int -> x36 x65 = add_SNo x65 x65) -> (forall x65, x65 :e int -> x37 x65 = x65) -> x38 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x39 x65 x66 = If_i (SNoLe x65 0) x66 (x36 (x39 (add_SNo x65 (minus_SNo 1)) x66)))) -> (forall x65, x65 :e int -> x40 x65 = x39 (x37 x65) x38) -> (forall x65, x65 :e int -> x41 x65 = x40 x65) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x42 x65 x66 = If_i (SNoLe x65 0) x66 (x34 (x42 (add_SNo x65 (minus_SNo 1)) x66)))) -> (forall x65, x65 :e int -> x43 x65 = x42 x35 (x41 x65)) -> (forall x65, x65 :e int -> x44 x65 = mul_SNo (x33 x65) (x43 x65)) -> x45 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x46 x65 x66 = x66)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x47 x65 x66 = If_i (SNoLe x65 0) x66 (x44 (x47 (add_SNo x65 (minus_SNo 1)) x66)))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x48 x65 x66 = x47 x45 (x46 x65 x66))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x49 x65 x66 = add_SNo (add_SNo (x48 x65 x66) (mul_SNo 2 (add_SNo (add_SNo x65 x65) x65))) x65)) -> (forall x65, x65 :e int -> x50 x65 = x65) -> x51 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x52 x65 x66 = If_i (SNoLe x65 0) x66 (x49 (x52 (add_SNo x65 (minus_SNo 1)) x66) x65))) -> (forall x65, x65 :e int -> x53 x65 = x52 (x50 x65) x51) -> (forall x65, x65 :e int -> x54 x65 = x53 x65) -> x55 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x56 x65 x66 = x66)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x57 x65 x66 = If_i (SNoLe x65 0) x66 (x54 (x57 (add_SNo x65 (minus_SNo 1)) x66)))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x58 x65 x66 = x57 x55 (x56 x65 x66))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x59 x65 x66 = add_SNo (add_SNo (x58 x65 x66) x65) (mul_SNo (mul_SNo (add_SNo x65 x65) 2) 2))) -> (forall x65, x65 :e int -> x60 x65 = x65) -> x61 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x62 x65 x66 = If_i (SNoLe x65 0) x66 (x59 (x62 (add_SNo x65 (minus_SNo 1)) x66) x65))) -> (forall x65, x65 :e int -> x63 x65 = x62 (x60 x65) x61) -> (forall x65, x65 :e int -> x64 x65 = x63 x65) -> (forall x65, x65 :e int -> SNoLe 0 x65 -> x25 x65 = x64 x65)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_7d8ec1ba986b63c25c19f41f0478e966ab4441a448b7847acbb467d87d2b8ae5 : (forall x0 : set -> set -> set, (forall x1, x1 :e int -> (forall x2, x2 :e int -> x0 x1 x2 :e int)) -> (forall x1 : set -> set -> set, (forall x2, x2 :e int -> (forall x3, x3 :e int -> x1 x2 x3 :e int)) -> (forall x2 : set -> set, (forall x3, x3 :e int -> x2 x3 :e int) -> (forall x3, x3 :e int -> (forall x4, x4 :e int -> (forall x5 : set -> set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> (forall x8, x8 :e int -> x5 x6 x7 x8 :e int))) -> (forall x6 : set -> set -> set -> set, (forall x7, x7 :e int -> (forall x8, x8 :e int -> (forall x9, x9 :e int -> x6 x7 x8 x9 :e int))) -> (forall x7 : set -> set, (forall x8, x8 :e int -> x7 x8 :e int) -> (forall x8 : set -> set, (forall x9, x9 :e int -> x8 x9 :e int) -> (forall x9 : set -> set, (forall x10, x10 :e int -> x9 x10 :e int) -> (forall x10, x10 :e int -> (forall x11 : set -> set -> set, (forall x12, x12 :e int -> (forall x13, x13 :e int -> x11 x12 x13 :e int)) -> (forall x12 : set -> set, (forall x13, x13 :e int -> x12 x13 :e int) -> (forall x13 : set -> set, (forall x14, x14 :e int -> x13 x14 :e int) -> (forall x14, x14 :e int -> (forall x15 : set -> set -> set, (forall x16, x16 :e int -> (forall x17, x17 :e int -> x15 x16 x17 :e int)) -> (forall x16 : set -> set -> set, (forall x17, x17 :e int -> (forall x18, x18 :e int -> x16 x17 x18 :e int)) -> (forall x17 : set -> set -> set, (forall x18, x18 :e int -> (forall x19, x19 :e int -> x17 x18 x19 :e int)) -> (forall x18 : set -> set -> set, (forall x19, x19 :e int -> (forall x20, x20 :e int -> x18 x19 x20 :e int)) -> (forall x19 : set -> set, (forall x20, x20 :e int -> x19 x20 :e int) -> (forall x20, x20 :e int -> (forall x21 : set -> set -> set, (forall x22, x22 :e int -> (forall x23, x23 :e int -> x21 x22 x23 :e int)) -> (forall x22 : set -> set, (forall x23, x23 :e int -> x22 x23 :e int) -> (forall x23 : set -> set, (forall x24, x24 :e int -> x23 x24 :e int) -> (forall x24 : set -> set -> set, (forall x25, x25 :e int -> (forall x26, x26 :e int -> x24 x25 x26 :e int)) -> (forall x25 : set -> set -> set, (forall x26, x26 :e int -> (forall x27, x27 :e int -> x25 x26 x27 :e int)) -> (forall x26 : set -> set, (forall x27, x27 :e int -> x26 x27 :e int) -> (forall x27, x27 :e int -> (forall x28, x28 :e int -> (forall x29 : set -> set -> set -> set, (forall x30, x30 :e int -> (forall x31, x31 :e int -> (forall x32, x32 :e int -> x29 x30 x31 x32 :e int))) -> (forall x30 : set -> set -> set -> set, (forall x31, x31 :e int -> (forall x32, x32 :e int -> (forall x33, x33 :e int -> x30 x31 x32 x33 :e int))) -> (forall x31 : set -> set, (forall x32, x32 :e int -> x31 x32 :e int) -> (forall x32 : set -> set -> set, (forall x33, x33 :e int -> (forall x34, x34 :e int -> x32 x33 x34 :e int)) -> (forall x33 : set -> set -> set, (forall x34, x34 :e int -> (forall x35, x35 :e int -> x33 x34 x35 :e int)) -> (forall x34 : set -> set, (forall x35, x35 :e int -> x34 x35 :e int) -> (forall x35, x35 :e int -> (forall x36, x36 :e int -> (forall x37 : set -> set -> set -> set, (forall x38, x38 :e int -> (forall x39, x39 :e int -> (forall x40, x40 :e int -> x37 x38 x39 x40 :e int))) -> (forall x38 : set -> set -> set -> set, (forall x39, x39 :e int -> (forall x40, x40 :e int -> (forall x41, x41 :e int -> x38 x39 x40 x41 :e int))) -> (forall x39 : set -> set, (forall x40, x40 :e int -> x39 x40 :e int) -> (forall x40 : set -> set, (forall x41, x41 :e int -> x40 x41 :e int) -> (forall x41, x41 :e int -> (forall x42 : set -> set -> set, (forall x43, x43 :e int -> (forall x44, x44 :e int -> x42 x43 x44 :e int)) -> (forall x43 : set -> set -> set, (forall x44, x44 :e int -> (forall x45, x45 :e int -> x43 x44 x45 :e int)) -> (forall x44 : set -> set -> set, (forall x45, x45 :e int -> (forall x46, x46 :e int -> x44 x45 x46 :e int)) -> (forall x45 : set -> set -> set, (forall x46, x46 :e int -> (forall x47, x47 :e int -> x45 x46 x47 :e int)) -> (forall x46 : set -> set, (forall x47, x47 :e int -> x46 x47 :e int) -> (forall x47, x47 :e int -> (forall x48 : set -> set -> set, (forall x49, x49 :e int -> (forall x50, x50 :e int -> x48 x49 x50 :e int)) -> (forall x49 : set -> set, (forall x50, x50 :e int -> x49 x50 :e int) -> (forall x50 : set -> set, (forall x51, x51 :e int -> x50 x51 :e int) -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x0 x51 x52 = add_SNo (add_SNo (mul_SNo 2 (add_SNo (mul_SNo x52 x52) x51)) (minus_SNo x52)) x51)) -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x1 x51 x52 = add_SNo x52 x52)) -> (forall x51, x51 :e int -> x2 x51 = x51) -> x3 = 1 -> x4 = 2 -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> (forall x53, x53 :e int -> x5 x51 x52 x53 = If_i (SNoLe x51 0) x52 (x0 (x5 (add_SNo x51 (minus_SNo 1)) x52 x53) (x6 (add_SNo x51 (minus_SNo 1)) x52 x53))))) -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> (forall x53, x53 :e int -> x6 x51 x52 x53 = If_i (SNoLe x51 0) x53 (x1 (x5 (add_SNo x51 (minus_SNo 1)) x52 x53) (x6 (add_SNo x51 (minus_SNo 1)) x52 x53))))) -> (forall x51, x51 :e int -> x7 x51 = x5 (x2 x51) x3 x4) -> (forall x51, x51 :e int -> x8 x51 = add_SNo (add_SNo x51 x51) x51) -> (forall x51, x51 :e int -> x9 x51 = x51) -> x10 = 1 -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x11 x51 x52 = If_i (SNoLe x51 0) x52 (x8 (x11 (add_SNo x51 (minus_SNo 1)) x52)))) -> (forall x51, x51 :e int -> x12 x51 = x11 (x9 x51) x10) -> (forall x51, x51 :e int -> x13 x51 = mul_SNo (x7 x51) (x12 x51)) -> x14 = 1 -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x15 x51 x52 = x52)) -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x16 x51 x52 = If_i (SNoLe x51 0) x52 (x13 (x16 (add_SNo x51 (minus_SNo 1)) x52)))) -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x17 x51 x52 = x16 x14 (x15 x51 x52))) -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x18 x51 x52 = add_SNo (add_SNo (x17 x51 x52) (mul_SNo 2 (add_SNo (mul_SNo 2 (add_SNo x51 x51)) x51))) x51)) -> (forall x51, x51 :e int -> x19 x51 = x51) -> x20 = 1 -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x21 x51 x52 = If_i (SNoLe x51 0) x52 (x18 (x21 (add_SNo x51 (minus_SNo 1)) x52) x51))) -> (forall x51, x51 :e int -> x22 x51 = x21 (x19 x51) x20) -> (forall x51, x51 :e int -> x23 x51 = x22 x51) -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x24 x51 x52 = add_SNo (add_SNo (mul_SNo 2 (add_SNo (mul_SNo x52 x52) x51)) (minus_SNo x52)) x51)) -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x25 x51 x52 = add_SNo x52 x52)) -> (forall x51, x51 :e int -> x26 x51 = x51) -> x27 = 1 -> x28 = 2 -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> (forall x53, x53 :e int -> x29 x51 x52 x53 = If_i (SNoLe x51 0) x52 (x24 (x29 (add_SNo x51 (minus_SNo 1)) x52 x53) (x30 (add_SNo x51 (minus_SNo 1)) x52 x53))))) -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> (forall x53, x53 :e int -> x30 x51 x52 x53 = If_i (SNoLe x51 0) x53 (x25 (x29 (add_SNo x51 (minus_SNo 1)) x52 x53) (x30 (add_SNo x51 (minus_SNo 1)) x52 x53))))) -> (forall x51, x51 :e int -> x31 x51 = x29 (x26 x51) x27 x28) -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x32 x51 x52 = mul_SNo x51 x52)) -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x33 x51 x52 = x52)) -> (forall x51, x51 :e int -> x34 x51 = x51) -> x35 = 1 -> x36 = add_SNo 1 2 -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> (forall x53, x53 :e int -> x37 x51 x52 x53 = If_i (SNoLe x51 0) x52 (x32 (x37 (add_SNo x51 (minus_SNo 1)) x52 x53) (x38 (add_SNo x51 (minus_SNo 1)) x52 x53))))) -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> (forall x53, x53 :e int -> x38 x51 x52 x53 = If_i (SNoLe x51 0) x53 (x33 (x37 (add_SNo x51 (minus_SNo 1)) x52 x53) (x38 (add_SNo x51 (minus_SNo 1)) x52 x53))))) -> (forall x51, x51 :e int -> x39 x51 = x37 (x34 x51) x35 x36) -> (forall x51, x51 :e int -> x40 x51 = mul_SNo (x31 x51) (x39 x51)) -> x41 = 1 -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x42 x51 x52 = x52)) -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x43 x51 x52 = If_i (SNoLe x51 0) x52 (x40 (x43 (add_SNo x51 (minus_SNo 1)) x52)))) -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x44 x51 x52 = x43 x41 (x42 x51 x52))) -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x45 x51 x52 = add_SNo (add_SNo (x44 x51 x52) (mul_SNo 2 (add_SNo (mul_SNo 2 (add_SNo x51 x51)) x51))) x51)) -> (forall x51, x51 :e int -> x46 x51 = x51) -> x47 = 1 -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x48 x51 x52 = If_i (SNoLe x51 0) x52 (x45 (x48 (add_SNo x51 (minus_SNo 1)) x52) x51))) -> (forall x51, x51 :e int -> x49 x51 = x48 (x46 x51) x47) -> (forall x51, x51 :e int -> x50 x51 = x49 x51) -> (forall x51, x51 :e int -> SNoLe 0 x51 -> x23 x51 = x50 x51)))))))))))))))))))))))))))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_1e3e213bc24c080a9e6758503bbffd24dfb0cf8d72b1507f8b3a17afc06b1eac : (forall x0 : set -> set, (forall x1, x1 :e int -> x0 x1 :e int) -> (forall x1 : set -> set, (forall x2, x2 :e int -> x1 x2 :e int) -> (forall x2 : set -> set, (forall x3, x3 :e int -> x2 x3 :e int) -> (forall x3 : set -> set, (forall x4, x4 :e int -> x3 x4 :e int) -> (forall x4, x4 :e int -> (forall x5 : set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> x5 x6 x7 :e int)) -> (forall x6 : set -> set, (forall x7, x7 :e int -> x6 x7 :e int) -> (forall x7 : set -> set, (forall x8, x8 :e int -> x7 x8 :e int) -> (forall x8 : set -> set -> set, (forall x9, x9 :e int -> (forall x10, x10 :e int -> x8 x9 x10 :e int)) -> (forall x9 : set -> set, (forall x10, x10 :e int -> x9 x10 :e int) -> (forall x10 : set -> set, (forall x11, x11 :e int -> x10 x11 :e int) -> (forall x11, x11 :e int -> (forall x12 : set -> set -> set, (forall x13, x13 :e int -> (forall x14, x14 :e int -> x12 x13 x14 :e int)) -> (forall x13 : set -> set -> set, (forall x14, x14 :e int -> (forall x15, x15 :e int -> x13 x14 x15 :e int)) -> (forall x14 : set -> set -> set, (forall x15, x15 :e int -> (forall x16, x16 :e int -> x14 x15 x16 :e int)) -> (forall x15 : set -> set -> set, (forall x16, x16 :e int -> (forall x17, x17 :e int -> x15 x16 x17 :e int)) -> (forall x16, x16 :e int -> (forall x17 : set -> set, (forall x18, x18 :e int -> x17 x18 :e int) -> (forall x18 : set -> set -> set, (forall x19, x19 :e int -> (forall x20, x20 :e int -> x18 x19 x20 :e int)) -> (forall x19 : set -> set, (forall x20, x20 :e int -> x19 x20 :e int) -> (forall x20 : set -> set -> set, (forall x21, x21 :e int -> (forall x22, x22 :e int -> x20 x21 x22 :e int)) -> (forall x21 : set -> set -> set, (forall x22, x22 :e int -> (forall x23, x23 :e int -> x21 x22 x23 :e int)) -> (forall x22, x22 :e int -> (forall x23 : set -> set -> set, (forall x24, x24 :e int -> (forall x25, x25 :e int -> x23 x24 x25 :e int)) -> (forall x24 : set -> set -> set, (forall x25, x25 :e int -> (forall x26, x26 :e int -> x24 x25 x26 :e int)) -> (forall x25 : set -> set -> set, (forall x26, x26 :e int -> (forall x27, x27 :e int -> x25 x26 x27 :e int)) -> (forall x26 : set -> set, (forall x27, x27 :e int -> x26 x27 :e int) -> (forall x27, x27 :e int -> (forall x28 : set -> set -> set, (forall x29, x29 :e int -> (forall x30, x30 :e int -> x28 x29 x30 :e int)) -> (forall x29 : set -> set, (forall x30, x30 :e int -> x29 x30 :e int) -> (forall x30 : set -> set, (forall x31, x31 :e int -> x30 x31 :e int) -> (forall x31 : set -> set, (forall x32, x32 :e int -> x31 x32 :e int) -> (forall x32 : set -> set, (forall x33, x33 :e int -> x32 x33 :e int) -> (forall x33, x33 :e int -> (forall x34 : set -> set -> set, (forall x35, x35 :e int -> (forall x36, x36 :e int -> x34 x35 x36 :e int)) -> (forall x35 : set -> set, (forall x36, x36 :e int -> x35 x36 :e int) -> (forall x36 : set -> set -> set, (forall x37, x37 :e int -> (forall x38, x38 :e int -> x36 x37 x38 :e int)) -> (forall x37 : set -> set -> set, (forall x38, x38 :e int -> (forall x39, x39 :e int -> x37 x38 x39 :e int)) -> (forall x38 : set -> set, (forall x39, x39 :e int -> x38 x39 :e int) -> (forall x39, x39 :e int -> (forall x40, x40 :e int -> (forall x41 : set -> set -> set -> set, (forall x42, x42 :e int -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x41 x42 x43 x44 :e int))) -> (forall x42 : set -> set -> set -> set, (forall x43, x43 :e int -> (forall x44, x44 :e int -> (forall x45, x45 :e int -> x42 x43 x44 x45 :e int))) -> (forall x43 : set -> set, (forall x44, x44 :e int -> x43 x44 :e int) -> (forall x44 : set -> set, (forall x45, x45 :e int -> x44 x45 :e int) -> (forall x45, x45 :e int -> (forall x46 : set -> set -> set, (forall x47, x47 :e int -> (forall x48, x48 :e int -> x46 x47 x48 :e int)) -> (forall x47 : set -> set -> set, (forall x48, x48 :e int -> (forall x49, x49 :e int -> x47 x48 x49 :e int)) -> (forall x48 : set -> set -> set, (forall x49, x49 :e int -> (forall x50, x50 :e int -> x48 x49 x50 :e int)) -> (forall x49 : set -> set -> set, (forall x50, x50 :e int -> (forall x51, x51 :e int -> x49 x50 x51 :e int)) -> (forall x50 : set -> set, (forall x51, x51 :e int -> x50 x51 :e int) -> (forall x51, x51 :e int -> (forall x52 : set -> set -> set, (forall x53, x53 :e int -> (forall x54, x54 :e int -> x52 x53 x54 :e int)) -> (forall x53 : set -> set, (forall x54, x54 :e int -> x53 x54 :e int) -> (forall x54 : set -> set, (forall x55, x55 :e int -> x54 x55 :e int) -> (forall x55, x55 :e int -> (forall x56 : set -> set -> set, (forall x57, x57 :e int -> (forall x58, x58 :e int -> x56 x57 x58 :e int)) -> (forall x57 : set -> set -> set, (forall x58, x58 :e int -> (forall x59, x59 :e int -> x57 x58 x59 :e int)) -> (forall x58 : set -> set -> set, (forall x59, x59 :e int -> (forall x60, x60 :e int -> x58 x59 x60 :e int)) -> (forall x59 : set -> set -> set, (forall x60, x60 :e int -> (forall x61, x61 :e int -> x59 x60 x61 :e int)) -> (forall x60 : set -> set, (forall x61, x61 :e int -> x60 x61 :e int) -> (forall x61, x61 :e int -> (forall x62 : set -> set -> set, (forall x63, x63 :e int -> (forall x64, x64 :e int -> x62 x63 x64 :e int)) -> (forall x63 : set -> set, (forall x64, x64 :e int -> x63 x64 :e int) -> (forall x64 : set -> set, (forall x65, x65 :e int -> x64 x65 :e int) -> (forall x65, x65 :e int -> x0 x65 = mul_SNo 2 (add_SNo (add_SNo x65 x65) x65)) -> (forall x65, x65 :e int -> x1 x65 = x65) -> (forall x65, x65 :e int -> x2 x65 = add_SNo x65 x65) -> (forall x65, x65 :e int -> x3 x65 = x65) -> x4 = 2 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x5 x65 x66 = If_i (SNoLe x65 0) x66 (x2 (x5 (add_SNo x65 (minus_SNo 1)) x66)))) -> (forall x65, x65 :e int -> x6 x65 = x5 (x3 x65) x4) -> (forall x65, x65 :e int -> x7 x65 = add_SNo (x6 x65) (minus_SNo 1)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x8 x65 x66 = If_i (SNoLe x65 0) x66 (x0 (x8 (add_SNo x65 (minus_SNo 1)) x66)))) -> (forall x65, x65 :e int -> x9 x65 = x8 (x1 x65) (x7 x65)) -> (forall x65, x65 :e int -> x10 x65 = x9 x65) -> x11 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x12 x65 x66 = x66)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x13 x65 x66 = If_i (SNoLe x65 0) x66 (x10 (x13 (add_SNo x65 (minus_SNo 1)) x66)))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x14 x65 x66 = x13 x11 (x12 x65 x66))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x15 x65 x66 = mul_SNo (add_SNo 2 x66) x65)) -> x16 = 2 -> (forall x65, x65 :e int -> x17 x65 = x65) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x18 x65 x66 = If_i (SNoLe x65 0) x66 (x15 (x18 (add_SNo x65 (minus_SNo 1)) x66) x65))) -> (forall x65, x65 :e int -> x19 x65 = x18 x16 (x17 x65)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x20 x65 x66 = add_SNo (x14 x65 x66) (add_SNo (x19 x65) (minus_SNo x65)))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x21 x65 x66 = x66)) -> x22 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x23 x65 x66 = If_i (SNoLe x65 0) x66 (x20 (x23 (add_SNo x65 (minus_SNo 1)) x66) x65))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x24 x65 x66 = x23 (x21 x65 x66) x22)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x25 x65 x66 = add_SNo (add_SNo (x24 x65 x66) (mul_SNo 2 (add_SNo (add_SNo x65 x65) x65))) x65)) -> (forall x65, x65 :e int -> x26 x65 = x65) -> x27 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x28 x65 x66 = If_i (SNoLe x65 0) x66 (x25 (x28 (add_SNo x65 (minus_SNo 1)) x66) x65))) -> (forall x65, x65 :e int -> x29 x65 = x28 (x26 x65) x27) -> (forall x65, x65 :e int -> x30 x65 = x29 x65) -> (forall x65, x65 :e int -> x31 x65 = add_SNo x65 x65) -> (forall x65, x65 :e int -> x32 x65 = x65) -> x33 = 2 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x34 x65 x66 = If_i (SNoLe x65 0) x66 (x31 (x34 (add_SNo x65 (minus_SNo 1)) x66)))) -> (forall x65, x65 :e int -> x35 x65 = x34 (x32 x65) x33) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x36 x65 x66 = mul_SNo x65 x66)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x37 x65 x66 = x66)) -> (forall x65, x65 :e int -> x38 x65 = x65) -> x39 = 1 -> x40 = add_SNo 2 (add_SNo 2 2) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> (forall x67, x67 :e int -> x41 x65 x66 x67 = If_i (SNoLe x65 0) x66 (x36 (x41 (add_SNo x65 (minus_SNo 1)) x66 x67) (x42 (add_SNo x65 (minus_SNo 1)) x66 x67))))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> (forall x67, x67 :e int -> x42 x65 x66 x67 = If_i (SNoLe x65 0) x67 (x37 (x41 (add_SNo x65 (minus_SNo 1)) x66 x67) (x42 (add_SNo x65 (minus_SNo 1)) x66 x67))))) -> (forall x65, x65 :e int -> x43 x65 = x41 (x38 x65) x39 x40) -> (forall x65, x65 :e int -> x44 x65 = mul_SNo (add_SNo (x35 x65) (minus_SNo 1)) (x43 x65)) -> x45 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x46 x65 x66 = x66)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x47 x65 x66 = If_i (SNoLe x65 0) x66 (x44 (x47 (add_SNo x65 (minus_SNo 1)) x66)))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x48 x65 x66 = x47 x45 (x46 x65 x66))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x49 x65 x66 = add_SNo (add_SNo (x48 x65 x66) (mul_SNo 2 (add_SNo (add_SNo x65 x65) x65))) x65)) -> (forall x65, x65 :e int -> x50 x65 = x65) -> x51 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x52 x65 x66 = If_i (SNoLe x65 0) x66 (x49 (x52 (add_SNo x65 (minus_SNo 1)) x66) x65))) -> (forall x65, x65 :e int -> x53 x65 = x52 (x50 x65) x51) -> (forall x65, x65 :e int -> x54 x65 = x53 x65) -> x55 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x56 x65 x66 = x66)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x57 x65 x66 = If_i (SNoLe x65 0) x66 (x54 (x57 (add_SNo x65 (minus_SNo 1)) x66)))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x58 x65 x66 = x57 x55 (x56 x65 x66))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x59 x65 x66 = add_SNo (add_SNo (x58 x65 x66) x65) (mul_SNo (add_SNo (mul_SNo (mul_SNo x65 2) 2) x65) 2))) -> (forall x65, x65 :e int -> x60 x65 = x65) -> x61 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x62 x65 x66 = If_i (SNoLe x65 0) x66 (x59 (x62 (add_SNo x65 (minus_SNo 1)) x66) x65))) -> (forall x65, x65 :e int -> x63 x65 = x62 (x60 x65) x61) -> (forall x65, x65 :e int -> x64 x65 = x63 x65) -> (forall x65, x65 :e int -> SNoLe 0 x65 -> x30 x65 = x64 x65)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_a1859811d45408014ae2105aed4e1f101f43587893caa99ff24029c602278e52 : (forall x0 : set -> set, (forall x1, x1 :e int -> x0 x1 :e int) -> (forall x1 : set -> set -> set, (forall x2, x2 :e int -> (forall x3, x3 :e int -> x1 x2 x3 :e int)) -> (forall x2, x2 :e int -> (forall x3 : set -> set -> set, (forall x4, x4 :e int -> (forall x5, x5 :e int -> x3 x4 x5 :e int)) -> (forall x4 : set -> set -> set, (forall x5, x5 :e int -> (forall x6, x6 :e int -> x4 x5 x6 :e int)) -> (forall x5 : set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> x5 x6 x7 :e int)) -> (forall x6 : set -> set -> set, (forall x7, x7 :e int -> (forall x8, x8 :e int -> x6 x7 x8 :e int)) -> (forall x7, x7 :e int -> (forall x8 : set -> set -> set, (forall x9, x9 :e int -> (forall x10, x10 :e int -> x8 x9 x10 :e int)) -> (forall x9 : set -> set -> set, (forall x10, x10 :e int -> (forall x11, x11 :e int -> x9 x10 x11 :e int)) -> (forall x10 : set -> set -> set, (forall x11, x11 :e int -> (forall x12, x12 :e int -> x10 x11 x12 :e int)) -> (forall x11 : set -> set -> set, (forall x12, x12 :e int -> (forall x13, x13 :e int -> x11 x12 x13 :e int)) -> (forall x12, x12 :e int -> (forall x13 : set -> set -> set, (forall x14, x14 :e int -> (forall x15, x15 :e int -> x13 x14 x15 :e int)) -> (forall x14 : set -> set -> set, (forall x15, x15 :e int -> (forall x16, x16 :e int -> x14 x15 x16 :e int)) -> (forall x15 : set -> set -> set, (forall x16, x16 :e int -> (forall x17, x17 :e int -> x15 x16 x17 :e int)) -> (forall x16 : set -> set, (forall x17, x17 :e int -> x16 x17 :e int) -> (forall x17, x17 :e int -> (forall x18 : set -> set -> set, (forall x19, x19 :e int -> (forall x20, x20 :e int -> x18 x19 x20 :e int)) -> (forall x19 : set -> set, (forall x20, x20 :e int -> x19 x20 :e int) -> (forall x20 : set -> set, (forall x21, x21 :e int -> x20 x21 :e int) -> (forall x21 : set -> set -> set, (forall x22, x22 :e int -> (forall x23, x23 :e int -> x21 x22 x23 :e int)) -> (forall x22 : set -> set -> set, (forall x23, x23 :e int -> (forall x24, x24 :e int -> x22 x23 x24 :e int)) -> (forall x23 : set -> set, (forall x24, x24 :e int -> x23 x24 :e int) -> (forall x24, x24 :e int -> (forall x25, x25 :e int -> (forall x26 : set -> set -> set -> set, (forall x27, x27 :e int -> (forall x28, x28 :e int -> (forall x29, x29 :e int -> x26 x27 x28 x29 :e int))) -> (forall x27 : set -> set -> set -> set, (forall x28, x28 :e int -> (forall x29, x29 :e int -> (forall x30, x30 :e int -> x27 x28 x29 x30 :e int))) -> (forall x28 : set -> set, (forall x29, x29 :e int -> x28 x29 :e int) -> (forall x29 : set -> set -> set, (forall x30, x30 :e int -> (forall x31, x31 :e int -> x29 x30 x31 :e int)) -> (forall x30 : set -> set -> set, (forall x31, x31 :e int -> (forall x32, x32 :e int -> x30 x31 x32 :e int)) -> (forall x31 : set -> set, (forall x32, x32 :e int -> x31 x32 :e int) -> (forall x32, x32 :e int -> (forall x33, x33 :e int -> (forall x34 : set -> set -> set -> set, (forall x35, x35 :e int -> (forall x36, x36 :e int -> (forall x37, x37 :e int -> x34 x35 x36 x37 :e int))) -> (forall x35 : set -> set -> set -> set, (forall x36, x36 :e int -> (forall x37, x37 :e int -> (forall x38, x38 :e int -> x35 x36 x37 x38 :e int))) -> (forall x36 : set -> set, (forall x37, x37 :e int -> x36 x37 :e int) -> (forall x37 : set -> set, (forall x38, x38 :e int -> x37 x38 :e int) -> (forall x38, x38 :e int -> (forall x39 : set -> set -> set, (forall x40, x40 :e int -> (forall x41, x41 :e int -> x39 x40 x41 :e int)) -> (forall x40 : set -> set -> set, (forall x41, x41 :e int -> (forall x42, x42 :e int -> x40 x41 x42 :e int)) -> (forall x41 : set -> set -> set, (forall x42, x42 :e int -> (forall x43, x43 :e int -> x41 x42 x43 :e int)) -> (forall x42 : set -> set -> set, (forall x43, x43 :e int -> (forall x44, x44 :e int -> x42 x43 x44 :e int)) -> (forall x43 : set -> set, (forall x44, x44 :e int -> x43 x44 :e int) -> (forall x44, x44 :e int -> (forall x45 : set -> set -> set, (forall x46, x46 :e int -> (forall x47, x47 :e int -> x45 x46 x47 :e int)) -> (forall x46 : set -> set, (forall x47, x47 :e int -> x46 x47 :e int) -> (forall x47 : set -> set, (forall x48, x48 :e int -> x47 x48 :e int) -> (forall x48, x48 :e int -> (forall x49 : set -> set -> set, (forall x50, x50 :e int -> (forall x51, x51 :e int -> x49 x50 x51 :e int)) -> (forall x50 : set -> set -> set, (forall x51, x51 :e int -> (forall x52, x52 :e int -> x50 x51 x52 :e int)) -> (forall x51 : set -> set -> set, (forall x52, x52 :e int -> (forall x53, x53 :e int -> x51 x52 x53 :e int)) -> (forall x52 : set -> set -> set, (forall x53, x53 :e int -> (forall x54, x54 :e int -> x52 x53 x54 :e int)) -> (forall x53 : set -> set, (forall x54, x54 :e int -> x53 x54 :e int) -> (forall x54, x54 :e int -> (forall x55 : set -> set -> set, (forall x56, x56 :e int -> (forall x57, x57 :e int -> x55 x56 x57 :e int)) -> (forall x56 : set -> set, (forall x57, x57 :e int -> x56 x57 :e int) -> (forall x57 : set -> set, (forall x58, x58 :e int -> x57 x58 :e int) -> (forall x58, x58 :e int -> x0 x58 = add_SNo (add_SNo x58 x58) x58) -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> x1 x58 x59 = add_SNo x59 x59)) -> x2 = 1 -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> x3 x58 x59 = If_i (SNoLe x58 0) x59 (x0 (x3 (add_SNo x58 (minus_SNo 1)) x59)))) -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> x4 x58 x59 = x3 (x1 x58 x59) x2)) -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> x5 x58 x59 = add_SNo (x4 x58 x59) (mul_SNo 2 (add_SNo (add_SNo x58 x58) x58)))) -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> x6 x58 x59 = x59)) -> x7 = 1 -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> x8 x58 x59 = If_i (SNoLe x58 0) x59 (x5 (x8 (add_SNo x58 (minus_SNo 1)) x59) x58))) -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> x9 x58 x59 = x8 (x6 x58 x59) x7)) -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> x10 x58 x59 = add_SNo (x9 x58 x59) (mul_SNo 2 (add_SNo (mul_SNo 2 (add_SNo x58 x58)) x58)))) -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> x11 x58 x59 = x59)) -> x12 = 1 -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> x13 x58 x59 = If_i (SNoLe x58 0) x59 (x10 (x13 (add_SNo x58 (minus_SNo 1)) x59) x58))) -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> x14 x58 x59 = x13 (x11 x58 x59) x12)) -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> x15 x58 x59 = add_SNo (add_SNo (x14 x58 x59) (mul_SNo 2 (add_SNo (add_SNo x58 x58) x58))) x58)) -> (forall x58, x58 :e int -> x16 x58 = x58) -> x17 = 1 -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> x18 x58 x59 = If_i (SNoLe x58 0) x59 (x15 (x18 (add_SNo x58 (minus_SNo 1)) x59) x58))) -> (forall x58, x58 :e int -> x19 x58 = x18 (x16 x58) x17) -> (forall x58, x58 :e int -> x20 x58 = x19 x58) -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> x21 x58 x59 = add_SNo (add_SNo (add_SNo x58 x58) x58) x59)) -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> x22 x58 x59 = add_SNo x59 x59)) -> (forall x58, x58 :e int -> x23 x58 = x58) -> x24 = 1 -> x25 = 2 -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> (forall x60, x60 :e int -> x26 x58 x59 x60 = If_i (SNoLe x58 0) x59 (x21 (x26 (add_SNo x58 (minus_SNo 1)) x59 x60) (x27 (add_SNo x58 (minus_SNo 1)) x59 x60))))) -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> (forall x60, x60 :e int -> x27 x58 x59 x60 = If_i (SNoLe x58 0) x60 (x22 (x26 (add_SNo x58 (minus_SNo 1)) x59 x60) (x27 (add_SNo x58 (minus_SNo 1)) x59 x60))))) -> (forall x58, x58 :e int -> x28 x58 = x26 (x23 x58) x24 x25) -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> x29 x58 x59 = mul_SNo x58 x59)) -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> x30 x58 x59 = x59)) -> (forall x58, x58 :e int -> x31 x58 = x58) -> x32 = 1 -> x33 = add_SNo 1 2 -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> (forall x60, x60 :e int -> x34 x58 x59 x60 = If_i (SNoLe x58 0) x59 (x29 (x34 (add_SNo x58 (minus_SNo 1)) x59 x60) (x35 (add_SNo x58 (minus_SNo 1)) x59 x60))))) -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> (forall x60, x60 :e int -> x35 x58 x59 x60 = If_i (SNoLe x58 0) x60 (x30 (x34 (add_SNo x58 (minus_SNo 1)) x59 x60) (x35 (add_SNo x58 (minus_SNo 1)) x59 x60))))) -> (forall x58, x58 :e int -> x36 x58 = x34 (x31 x58) x32 x33) -> (forall x58, x58 :e int -> x37 x58 = mul_SNo (x28 x58) (x36 x58)) -> x38 = 1 -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> x39 x58 x59 = x59)) -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> x40 x58 x59 = If_i (SNoLe x58 0) x59 (x37 (x40 (add_SNo x58 (minus_SNo 1)) x59)))) -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> x41 x58 x59 = x40 x38 (x39 x58 x59))) -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> x42 x58 x59 = add_SNo (x41 x58 x59) (mul_SNo 2 (add_SNo (mul_SNo 2 (add_SNo x58 x58)) x58)))) -> (forall x58, x58 :e int -> x43 x58 = x58) -> x44 = 1 -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> x45 x58 x59 = If_i (SNoLe x58 0) x59 (x42 (x45 (add_SNo x58 (minus_SNo 1)) x59) x58))) -> (forall x58, x58 :e int -> x46 x58 = x45 (x43 x58) x44) -> (forall x58, x58 :e int -> x47 x58 = x46 x58) -> x48 = 1 -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> x49 x58 x59 = x59)) -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> x50 x58 x59 = If_i (SNoLe x58 0) x59 (x47 (x50 (add_SNo x58 (minus_SNo 1)) x59)))) -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> x51 x58 x59 = x50 x48 (x49 x58 x59))) -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> x52 x58 x59 = add_SNo (add_SNo (x51 x58 x59) (mul_SNo 2 (add_SNo (add_SNo x58 x58) x58))) x58)) -> (forall x58, x58 :e int -> x53 x58 = x58) -> x54 = 1 -> (forall x58, x58 :e int -> (forall x59, x59 :e int -> x55 x58 x59 = If_i (SNoLe x58 0) x59 (x52 (x55 (add_SNo x58 (minus_SNo 1)) x59) x58))) -> (forall x58, x58 :e int -> x56 x58 = x55 (x53 x58) x54) -> (forall x58, x58 :e int -> x57 x58 = x56 x58) -> (forall x58, x58 :e int -> SNoLe 0 x58 -> x20 x58 = x57 x58))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_f2fa681d6a508bc7a5dbdf1745e6088dc6ba50e96286db9849b63689f2b937b0 : (forall x0 : set -> set -> set, (forall x1, x1 :e int -> (forall x2, x2 :e int -> x0 x1 x2 :e int)) -> (forall x1 : set -> set -> set, (forall x2, x2 :e int -> (forall x3, x3 :e int -> x1 x2 x3 :e int)) -> (forall x2 : set -> set -> set, (forall x3, x3 :e int -> (forall x4, x4 :e int -> x2 x3 x4 :e int)) -> (forall x3, x3 :e int -> (forall x4, x4 :e int -> (forall x5 : set -> set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> (forall x8, x8 :e int -> x5 x6 x7 x8 :e int))) -> (forall x6 : set -> set -> set -> set, (forall x7, x7 :e int -> (forall x8, x8 :e int -> (forall x9, x9 :e int -> x6 x7 x8 x9 :e int))) -> (forall x7 : set -> set -> set, (forall x8, x8 :e int -> (forall x9, x9 :e int -> x7 x8 x9 :e int)) -> (forall x8 : set -> set -> set, (forall x9, x9 :e int -> (forall x10, x10 :e int -> x8 x9 x10 :e int)) -> (forall x9 : set -> set -> set, (forall x10, x10 :e int -> (forall x11, x11 :e int -> x9 x10 x11 :e int)) -> (forall x10, x10 :e int -> (forall x11 : set -> set -> set, (forall x12, x12 :e int -> (forall x13, x13 :e int -> x11 x12 x13 :e int)) -> (forall x12 : set -> set -> set, (forall x13, x13 :e int -> (forall x14, x14 :e int -> x12 x13 x14 :e int)) -> (forall x13 : set -> set -> set, (forall x14, x14 :e int -> (forall x15, x15 :e int -> x13 x14 x15 :e int)) -> (forall x14 : set -> set, (forall x15, x15 :e int -> x14 x15 :e int) -> (forall x15, x15 :e int -> (forall x16 : set -> set -> set, (forall x17, x17 :e int -> (forall x18, x18 :e int -> x16 x17 x18 :e int)) -> (forall x17 : set -> set, (forall x18, x18 :e int -> x17 x18 :e int) -> (forall x18 : set -> set, (forall x19, x19 :e int -> x18 x19 :e int) -> (forall x19 : set -> set -> set, (forall x20, x20 :e int -> (forall x21, x21 :e int -> x19 x20 x21 :e int)) -> (forall x20 : set -> set -> set, (forall x21, x21 :e int -> (forall x22, x22 :e int -> x20 x21 x22 :e int)) -> (forall x21 : set -> set -> set, (forall x22, x22 :e int -> (forall x23, x23 :e int -> x21 x22 x23 :e int)) -> (forall x22, x22 :e int -> (forall x23, x23 :e int -> (forall x24 : set -> set -> set -> set, (forall x25, x25 :e int -> (forall x26, x26 :e int -> (forall x27, x27 :e int -> x24 x25 x26 x27 :e int))) -> (forall x25 : set -> set -> set -> set, (forall x26, x26 :e int -> (forall x27, x27 :e int -> (forall x28, x28 :e int -> x25 x26 x27 x28 :e int))) -> (forall x26 : set -> set -> set, (forall x27, x27 :e int -> (forall x28, x28 :e int -> x26 x27 x28 :e int)) -> (forall x27 : set -> set -> set, (forall x28, x28 :e int -> (forall x29, x29 :e int -> x27 x28 x29 :e int)) -> (forall x28 : set -> set, (forall x29, x29 :e int -> x28 x29 :e int) -> (forall x29, x29 :e int -> (forall x30 : set -> set -> set, (forall x31, x31 :e int -> (forall x32, x32 :e int -> x30 x31 x32 :e int)) -> (forall x31 : set -> set, (forall x32, x32 :e int -> x31 x32 :e int) -> (forall x32 : set -> set, (forall x33, x33 :e int -> x32 x33 :e int) -> (forall x33 : set -> set, (forall x34, x34 :e int -> x33 x34 :e int) -> (forall x34, x34 :e int -> (forall x35 : set -> set -> set, (forall x36, x36 :e int -> (forall x37, x37 :e int -> x35 x36 x37 :e int)) -> (forall x36 : set -> set, (forall x37, x37 :e int -> x36 x37 :e int) -> (forall x37 : set -> set, (forall x38, x38 :e int -> x37 x38 :e int) -> (forall x38, x38 :e int -> (forall x39 : set -> set -> set, (forall x40, x40 :e int -> (forall x41, x41 :e int -> x39 x40 x41 :e int)) -> (forall x40 : set -> set -> set, (forall x41, x41 :e int -> (forall x42, x42 :e int -> x40 x41 x42 :e int)) -> (forall x41 : set -> set -> set, (forall x42, x42 :e int -> (forall x43, x43 :e int -> x41 x42 x43 :e int)) -> (forall x42 : set -> set -> set, (forall x43, x43 :e int -> (forall x44, x44 :e int -> x42 x43 x44 :e int)) -> (forall x43 : set -> set, (forall x44, x44 :e int -> x43 x44 :e int) -> (forall x44, x44 :e int -> (forall x45 : set -> set -> set, (forall x46, x46 :e int -> (forall x47, x47 :e int -> x45 x46 x47 :e int)) -> (forall x46 : set -> set, (forall x47, x47 :e int -> x46 x47 :e int) -> (forall x47 : set -> set, (forall x48, x48 :e int -> x47 x48 :e int) -> (forall x48, x48 :e int -> (forall x49, x49 :e int -> x0 x48 x49 = add_SNo (mul_SNo 2 (add_SNo (add_SNo x48 x48) x48)) (mul_SNo (mul_SNo x49 x49) x49))) -> (forall x48, x48 :e int -> (forall x49, x49 :e int -> x1 x48 x49 = add_SNo x49 x49)) -> (forall x48, x48 :e int -> (forall x49, x49 :e int -> x2 x48 x49 = x49)) -> x3 = 1 -> x4 = 2 -> (forall x48, x48 :e int -> (forall x49, x49 :e int -> (forall x50, x50 :e int -> x5 x48 x49 x50 = If_i (SNoLe x48 0) x49 (x0 (x5 (add_SNo x48 (minus_SNo 1)) x49 x50) (x6 (add_SNo x48 (minus_SNo 1)) x49 x50))))) -> (forall x48, x48 :e int -> (forall x49, x49 :e int -> (forall x50, x50 :e int -> x6 x48 x49 x50 = If_i (SNoLe x48 0) x50 (x1 (x5 (add_SNo x48 (minus_SNo 1)) x49 x50) (x6 (add_SNo x48 (minus_SNo 1)) x49 x50))))) -> (forall x48, x48 :e int -> (forall x49, x49 :e int -> x7 x48 x49 = x5 (x2 x48 x49) x3 x4)) -> (forall x48, x48 :e int -> (forall x49, x49 :e int -> x8 x48 x49 = add_SNo (x7 x48 x49) (mul_SNo 2 (add_SNo (mul_SNo 2 (add_SNo x48 x48)) x48)))) -> (forall x48, x48 :e int -> (forall x49, x49 :e int -> x9 x48 x49 = x49)) -> x10 = 1 -> (forall x48, x48 :e int -> (forall x49, x49 :e int -> x11 x48 x49 = If_i (SNoLe x48 0) x49 (x8 (x11 (add_SNo x48 (minus_SNo 1)) x49) x48))) -> (forall x48, x48 :e int -> (forall x49, x49 :e int -> x12 x48 x49 = x11 (x9 x48 x49) x10)) -> (forall x48, x48 :e int -> (forall x49, x49 :e int -> x13 x48 x49 = add_SNo (add_SNo (x12 x48 x49) (mul_SNo 2 (add_SNo (add_SNo x48 x48) x48))) x48)) -> (forall x48, x48 :e int -> x14 x48 = x48) -> x15 = 1 -> (forall x48, x48 :e int -> (forall x49, x49 :e int -> x16 x48 x49 = If_i (SNoLe x48 0) x49 (x13 (x16 (add_SNo x48 (minus_SNo 1)) x49) x48))) -> (forall x48, x48 :e int -> x17 x48 = x16 (x14 x48) x15) -> (forall x48, x48 :e int -> x18 x48 = x17 x48) -> (forall x48, x48 :e int -> (forall x49, x49 :e int -> x19 x48 x49 = add_SNo (add_SNo (add_SNo (mul_SNo x49 x49) x48) x48) x48)) -> (forall x48, x48 :e int -> (forall x49, x49 :e int -> x20 x48 x49 = add_SNo x49 x49)) -> (forall x48, x48 :e int -> (forall x49, x49 :e int -> x21 x48 x49 = x49)) -> x22 = 1 -> x23 = 2 -> (forall x48, x48 :e int -> (forall x49, x49 :e int -> (forall x50, x50 :e int -> x24 x48 x49 x50 = If_i (SNoLe x48 0) x49 (x19 (x24 (add_SNo x48 (minus_SNo 1)) x49 x50) (x25 (add_SNo x48 (minus_SNo 1)) x49 x50))))) -> (forall x48, x48 :e int -> (forall x49, x49 :e int -> (forall x50, x50 :e int -> x25 x48 x49 x50 = If_i (SNoLe x48 0) x50 (x20 (x24 (add_SNo x48 (minus_SNo 1)) x49 x50) (x25 (add_SNo x48 (minus_SNo 1)) x49 x50))))) -> (forall x48, x48 :e int -> (forall x49, x49 :e int -> x26 x48 x49 = x24 (x21 x48 x49) x22 x23)) -> (forall x48, x48 :e int -> (forall x49, x49 :e int -> x27 x48 x49 = add_SNo (add_SNo (x26 x48 x49) (mul_SNo 2 (add_SNo x48 x48))) x48)) -> (forall x48, x48 :e int -> x28 x48 = x48) -> x29 = 1 -> (forall x48, x48 :e int -> (forall x49, x49 :e int -> x30 x48 x49 = If_i (SNoLe x48 0) x49 (x27 (x30 (add_SNo x48 (minus_SNo 1)) x49) x48))) -> (forall x48, x48 :e int -> x31 x48 = x30 (x28 x48) x29) -> (forall x48, x48 :e int -> x32 x48 = add_SNo x48 x48) -> (forall x48, x48 :e int -> x33 x48 = x48) -> x34 = 1 -> (forall x48, x48 :e int -> (forall x49, x49 :e int -> x35 x48 x49 = If_i (SNoLe x48 0) x49 (x32 (x35 (add_SNo x48 (minus_SNo 1)) x49)))) -> (forall x48, x48 :e int -> x36 x48 = x35 (x33 x48) x34) -> (forall x48, x48 :e int -> x37 x48 = mul_SNo (x31 x48) (x36 x48)) -> x38 = 1 -> (forall x48, x48 :e int -> (forall x49, x49 :e int -> x39 x48 x49 = x49)) -> (forall x48, x48 :e int -> (forall x49, x49 :e int -> x40 x48 x49 = If_i (SNoLe x48 0) x49 (x37 (x40 (add_SNo x48 (minus_SNo 1)) x49)))) -> (forall x48, x48 :e int -> (forall x49, x49 :e int -> x41 x48 x49 = x40 x38 (x39 x48 x49))) -> (forall x48, x48 :e int -> (forall x49, x49 :e int -> x42 x48 x49 = add_SNo (add_SNo (x41 x48 x49) (mul_SNo 2 (add_SNo (add_SNo x48 x48) x48))) x48)) -> (forall x48, x48 :e int -> x43 x48 = x48) -> x44 = 1 -> (forall x48, x48 :e int -> (forall x49, x49 :e int -> x45 x48 x49 = If_i (SNoLe x48 0) x49 (x42 (x45 (add_SNo x48 (minus_SNo 1)) x49) x48))) -> (forall x48, x48 :e int -> x46 x48 = x45 (x43 x48) x44) -> (forall x48, x48 :e int -> x47 x48 = x46 x48) -> (forall x48, x48 :e int -> SNoLe 0 x48 -> x18 x48 = x47 x48))))))))))))))))))))))))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_c51efad28dfb2501fe8ff1e8a46977064ad827a474b38d67f88e766826d0fb21 : (forall x0 : set -> set, (forall x1, x1 :e int -> x0 x1 :e int) -> (forall x1 : set -> set -> set, (forall x2, x2 :e int -> (forall x3, x3 :e int -> x1 x2 x3 :e int)) -> (forall x2, x2 :e int -> (forall x3 : set -> set -> set, (forall x4, x4 :e int -> (forall x5, x5 :e int -> x3 x4 x5 :e int)) -> (forall x4 : set -> set -> set, (forall x5, x5 :e int -> (forall x6, x6 :e int -> x4 x5 x6 :e int)) -> (forall x5 : set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> x5 x6 x7 :e int)) -> (forall x6 : set -> set -> set, (forall x7, x7 :e int -> (forall x8, x8 :e int -> x6 x7 x8 :e int)) -> (forall x7, x7 :e int -> (forall x8 : set -> set -> set, (forall x9, x9 :e int -> (forall x10, x10 :e int -> x8 x9 x10 :e int)) -> (forall x9 : set -> set -> set, (forall x10, x10 :e int -> (forall x11, x11 :e int -> x9 x10 x11 :e int)) -> (forall x10 : set -> set -> set, (forall x11, x11 :e int -> (forall x12, x12 :e int -> x10 x11 x12 :e int)) -> (forall x11, x11 :e int -> (forall x12 : set -> set, (forall x13, x13 :e int -> x12 x13 :e int) -> (forall x13 : set -> set -> set, (forall x14, x14 :e int -> (forall x15, x15 :e int -> x13 x14 x15 :e int)) -> (forall x14 : set -> set, (forall x15, x15 :e int -> x14 x15 :e int) -> (forall x15 : set -> set -> set, (forall x16, x16 :e int -> (forall x17, x17 :e int -> x15 x16 x17 :e int)) -> (forall x16 : set -> set -> set, (forall x17, x17 :e int -> (forall x18, x18 :e int -> x16 x17 x18 :e int)) -> (forall x17, x17 :e int -> (forall x18 : set -> set -> set, (forall x19, x19 :e int -> (forall x20, x20 :e int -> x18 x19 x20 :e int)) -> (forall x19 : set -> set -> set, (forall x20, x20 :e int -> (forall x21, x21 :e int -> x19 x20 x21 :e int)) -> (forall x20 : set -> set -> set, (forall x21, x21 :e int -> (forall x22, x22 :e int -> x20 x21 x22 :e int)) -> (forall x21 : set -> set, (forall x22, x22 :e int -> x21 x22 :e int) -> (forall x22, x22 :e int -> (forall x23 : set -> set -> set, (forall x24, x24 :e int -> (forall x25, x25 :e int -> x23 x24 x25 :e int)) -> (forall x24 : set -> set, (forall x25, x25 :e int -> x24 x25 :e int) -> (forall x25 : set -> set, (forall x26, x26 :e int -> x25 x26 :e int) -> (forall x26 : set -> set -> set, (forall x27, x27 :e int -> (forall x28, x28 :e int -> x26 x27 x28 :e int)) -> (forall x27 : set -> set -> set, (forall x28, x28 :e int -> (forall x29, x29 :e int -> x27 x28 x29 :e int)) -> (forall x28 : set -> set, (forall x29, x29 :e int -> x28 x29 :e int) -> (forall x29, x29 :e int -> (forall x30, x30 :e int -> (forall x31 : set -> set -> set -> set, (forall x32, x32 :e int -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x31 x32 x33 x34 :e int))) -> (forall x32 : set -> set -> set -> set, (forall x33, x33 :e int -> (forall x34, x34 :e int -> (forall x35, x35 :e int -> x32 x33 x34 x35 :e int))) -> (forall x33 : set -> set, (forall x34, x34 :e int -> x33 x34 :e int) -> (forall x34 : set -> set, (forall x35, x35 :e int -> x34 x35 :e int) -> (forall x35, x35 :e int -> (forall x36 : set -> set, (forall x37, x37 :e int -> x36 x37 :e int) -> (forall x37 : set -> set, (forall x38, x38 :e int -> x37 x38 :e int) -> (forall x38, x38 :e int -> (forall x39 : set -> set -> set, (forall x40, x40 :e int -> (forall x41, x41 :e int -> x39 x40 x41 :e int)) -> (forall x40 : set -> set, (forall x41, x41 :e int -> x40 x41 :e int) -> (forall x41 : set -> set, (forall x42, x42 :e int -> x41 x42 :e int) -> (forall x42 : set -> set -> set, (forall x43, x43 :e int -> (forall x44, x44 :e int -> x42 x43 x44 :e int)) -> (forall x43 : set -> set, (forall x44, x44 :e int -> x43 x44 :e int) -> (forall x44 : set -> set, (forall x45, x45 :e int -> x44 x45 :e int) -> (forall x45, x45 :e int -> (forall x46 : set -> set -> set, (forall x47, x47 :e int -> (forall x48, x48 :e int -> x46 x47 x48 :e int)) -> (forall x47 : set -> set -> set, (forall x48, x48 :e int -> (forall x49, x49 :e int -> x47 x48 x49 :e int)) -> (forall x48 : set -> set -> set, (forall x49, x49 :e int -> (forall x50, x50 :e int -> x48 x49 x50 :e int)) -> (forall x49 : set -> set -> set, (forall x50, x50 :e int -> (forall x51, x51 :e int -> x49 x50 x51 :e int)) -> (forall x50 : set -> set, (forall x51, x51 :e int -> x50 x51 :e int) -> (forall x51, x51 :e int -> (forall x52 : set -> set -> set, (forall x53, x53 :e int -> (forall x54, x54 :e int -> x52 x53 x54 :e int)) -> (forall x53 : set -> set, (forall x54, x54 :e int -> x53 x54 :e int) -> (forall x54 : set -> set, (forall x55, x55 :e int -> x54 x55 :e int) -> (forall x55, x55 :e int -> (forall x56 : set -> set -> set, (forall x57, x57 :e int -> (forall x58, x58 :e int -> x56 x57 x58 :e int)) -> (forall x57 : set -> set -> set, (forall x58, x58 :e int -> (forall x59, x59 :e int -> x57 x58 x59 :e int)) -> (forall x58 : set -> set -> set, (forall x59, x59 :e int -> (forall x60, x60 :e int -> x58 x59 x60 :e int)) -> (forall x59 : set -> set -> set, (forall x60, x60 :e int -> (forall x61, x61 :e int -> x59 x60 x61 :e int)) -> (forall x60 : set -> set, (forall x61, x61 :e int -> x60 x61 :e int) -> (forall x61, x61 :e int -> (forall x62 : set -> set -> set, (forall x63, x63 :e int -> (forall x64, x64 :e int -> x62 x63 x64 :e int)) -> (forall x63 : set -> set, (forall x64, x64 :e int -> x63 x64 :e int) -> (forall x64 : set -> set, (forall x65, x65 :e int -> x64 x65 :e int) -> (forall x65, x65 :e int -> x0 x65 = add_SNo (add_SNo x65 x65) x65) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x1 x65 x66 = add_SNo x66 x66)) -> x2 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x3 x65 x66 = If_i (SNoLe x65 0) x66 (x0 (x3 (add_SNo x65 (minus_SNo 1)) x66)))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x4 x65 x66 = x3 (x1 x65 x66) x2)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x5 x65 x66 = add_SNo (x4 x65 x66) (mul_SNo 2 (mul_SNo 2 (add_SNo x65 x65))))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x6 x65 x66 = x66)) -> x7 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x8 x65 x66 = If_i (SNoLe x65 0) x66 (x5 (x8 (add_SNo x65 (minus_SNo 1)) x66) x65))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x9 x65 x66 = x8 (x6 x65 x66) x7)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x10 x65 x66 = mul_SNo (add_SNo 2 x66) x65)) -> x11 = 2 -> (forall x65, x65 :e int -> x12 x65 = x65) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x13 x65 x66 = If_i (SNoLe x65 0) x66 (x10 (x13 (add_SNo x65 (minus_SNo 1)) x66) x65))) -> (forall x65, x65 :e int -> x14 x65 = x13 x11 (x12 x65)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x15 x65 x66 = add_SNo (x9 x65 x66) (x14 x65))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x16 x65 x66 = x66)) -> x17 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x18 x65 x66 = If_i (SNoLe x65 0) x66 (x15 (x18 (add_SNo x65 (minus_SNo 1)) x66) x65))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x19 x65 x66 = x18 (x16 x65 x66) x17)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x20 x65 x66 = add_SNo (add_SNo (x19 x65 x66) (mul_SNo 2 (add_SNo x65 x65))) x65)) -> (forall x65, x65 :e int -> x21 x65 = x65) -> x22 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x23 x65 x66 = If_i (SNoLe x65 0) x66 (x20 (x23 (add_SNo x65 (minus_SNo 1)) x66) x65))) -> (forall x65, x65 :e int -> x24 x65 = x23 (x21 x65) x22) -> (forall x65, x65 :e int -> x25 x65 = x24 x65) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x26 x65 x66 = add_SNo (add_SNo (add_SNo x65 x65) x65) x66)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x27 x65 x66 = add_SNo x66 x66)) -> (forall x65, x65 :e int -> x28 x65 = x65) -> x29 = 1 -> x30 = 2 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> (forall x67, x67 :e int -> x31 x65 x66 x67 = If_i (SNoLe x65 0) x66 (x26 (x31 (add_SNo x65 (minus_SNo 1)) x66 x67) (x32 (add_SNo x65 (minus_SNo 1)) x66 x67))))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> (forall x67, x67 :e int -> x32 x65 x66 x67 = If_i (SNoLe x65 0) x67 (x27 (x31 (add_SNo x65 (minus_SNo 1)) x66 x67) (x32 (add_SNo x65 (minus_SNo 1)) x66 x67))))) -> (forall x65, x65 :e int -> x33 x65 = x31 (x28 x65) x29 x30) -> (forall x65, x65 :e int -> x34 x65 = mul_SNo x65 x65) -> x35 = 1 -> (forall x65, x65 :e int -> x36 x65 = add_SNo x65 x65) -> (forall x65, x65 :e int -> x37 x65 = x65) -> x38 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x39 x65 x66 = If_i (SNoLe x65 0) x66 (x36 (x39 (add_SNo x65 (minus_SNo 1)) x66)))) -> (forall x65, x65 :e int -> x40 x65 = x39 (x37 x65) x38) -> (forall x65, x65 :e int -> x41 x65 = x40 x65) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x42 x65 x66 = If_i (SNoLe x65 0) x66 (x34 (x42 (add_SNo x65 (minus_SNo 1)) x66)))) -> (forall x65, x65 :e int -> x43 x65 = x42 x35 (x41 x65)) -> (forall x65, x65 :e int -> x44 x65 = mul_SNo (x33 x65) (x43 x65)) -> x45 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x46 x65 x66 = x66)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x47 x65 x66 = If_i (SNoLe x65 0) x66 (x44 (x47 (add_SNo x65 (minus_SNo 1)) x66)))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x48 x65 x66 = x47 x45 (x46 x65 x66))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x49 x65 x66 = add_SNo (add_SNo (x48 x65 x66) (mul_SNo 2 (add_SNo x65 x65))) x65)) -> (forall x65, x65 :e int -> x50 x65 = x65) -> x51 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x52 x65 x66 = If_i (SNoLe x65 0) x66 (x49 (x52 (add_SNo x65 (minus_SNo 1)) x66) x65))) -> (forall x65, x65 :e int -> x53 x65 = x52 (x50 x65) x51) -> (forall x65, x65 :e int -> x54 x65 = x53 x65) -> x55 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x56 x65 x66 = x66)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x57 x65 x66 = If_i (SNoLe x65 0) x66 (x54 (x57 (add_SNo x65 (minus_SNo 1)) x66)))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x58 x65 x66 = x57 x55 (x56 x65 x66))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x59 x65 x66 = add_SNo (add_SNo (x58 x65 x66) x65) (mul_SNo (mul_SNo (add_SNo x65 x65) 2) 2))) -> (forall x65, x65 :e int -> x60 x65 = x65) -> x61 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x62 x65 x66 = If_i (SNoLe x65 0) x66 (x59 (x62 (add_SNo x65 (minus_SNo 1)) x66) x65))) -> (forall x65, x65 :e int -> x63 x65 = x62 (x60 x65) x61) -> (forall x65, x65 :e int -> x64 x65 = x63 x65) -> (forall x65, x65 :e int -> SNoLe 0 x65 -> x25 x65 = x64 x65)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_d8b5afcb3c20335ecd777adf6eb08e2b5d18f648443c8f08f3727e4a5cb84271 : (forall x0 : set -> set, (forall x1, x1 :e int -> x0 x1 :e int) -> (forall x1 : set -> set, (forall x2, x2 :e int -> x1 x2 :e int) -> (forall x2 : set -> set, (forall x3, x3 :e int -> x2 x3 :e int) -> (forall x3 : set -> set, (forall x4, x4 :e int -> x3 x4 :e int) -> (forall x4, x4 :e int -> (forall x5 : set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> x5 x6 x7 :e int)) -> (forall x6 : set -> set, (forall x7, x7 :e int -> x6 x7 :e int) -> (forall x7 : set -> set, (forall x8, x8 :e int -> x7 x8 :e int) -> (forall x8 : set -> set -> set, (forall x9, x9 :e int -> (forall x10, x10 :e int -> x8 x9 x10 :e int)) -> (forall x9 : set -> set, (forall x10, x10 :e int -> x9 x10 :e int) -> (forall x10 : set -> set, (forall x11, x11 :e int -> x10 x11 :e int) -> (forall x11, x11 :e int -> (forall x12 : set -> set -> set, (forall x13, x13 :e int -> (forall x14, x14 :e int -> x12 x13 x14 :e int)) -> (forall x13 : set -> set -> set, (forall x14, x14 :e int -> (forall x15, x15 :e int -> x13 x14 x15 :e int)) -> (forall x14 : set -> set -> set, (forall x15, x15 :e int -> (forall x16, x16 :e int -> x14 x15 x16 :e int)) -> (forall x15 : set -> set -> set, (forall x16, x16 :e int -> (forall x17, x17 :e int -> x15 x16 x17 :e int)) -> (forall x16 : set -> set -> set, (forall x17, x17 :e int -> (forall x18, x18 :e int -> x16 x17 x18 :e int)) -> (forall x17, x17 :e int -> (forall x18 : set -> set -> set, (forall x19, x19 :e int -> (forall x20, x20 :e int -> x18 x19 x20 :e int)) -> (forall x19 : set -> set -> set, (forall x20, x20 :e int -> (forall x21, x21 :e int -> x19 x20 x21 :e int)) -> (forall x20 : set -> set -> set, (forall x21, x21 :e int -> (forall x22, x22 :e int -> x20 x21 x22 :e int)) -> (forall x21, x21 :e int -> (forall x22 : set -> set, (forall x23, x23 :e int -> x22 x23 :e int) -> (forall x23 : set -> set -> set, (forall x24, x24 :e int -> (forall x25, x25 :e int -> x23 x24 x25 :e int)) -> (forall x24 : set -> set, (forall x25, x25 :e int -> x24 x25 :e int) -> (forall x25 : set -> set -> set, (forall x26, x26 :e int -> (forall x27, x27 :e int -> x25 x26 x27 :e int)) -> (forall x26 : set -> set, (forall x27, x27 :e int -> x26 x27 :e int) -> (forall x27, x27 :e int -> (forall x28 : set -> set -> set, (forall x29, x29 :e int -> (forall x30, x30 :e int -> x28 x29 x30 :e int)) -> (forall x29 : set -> set, (forall x30, x30 :e int -> x29 x30 :e int) -> (forall x30 : set -> set, (forall x31, x31 :e int -> x30 x31 :e int) -> (forall x31 : set -> set, (forall x32, x32 :e int -> x31 x32 :e int) -> (forall x32 : set -> set, (forall x33, x33 :e int -> x32 x33 :e int) -> (forall x33, x33 :e int -> (forall x34 : set -> set -> set, (forall x35, x35 :e int -> (forall x36, x36 :e int -> x34 x35 x36 :e int)) -> (forall x35 : set -> set, (forall x36, x36 :e int -> x35 x36 :e int) -> (forall x36 : set -> set -> set, (forall x37, x37 :e int -> (forall x38, x38 :e int -> x36 x37 x38 :e int)) -> (forall x37 : set -> set -> set, (forall x38, x38 :e int -> (forall x39, x39 :e int -> x37 x38 x39 :e int)) -> (forall x38 : set -> set, (forall x39, x39 :e int -> x38 x39 :e int) -> (forall x39, x39 :e int -> (forall x40, x40 :e int -> (forall x41 : set -> set -> set -> set, (forall x42, x42 :e int -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x41 x42 x43 x44 :e int))) -> (forall x42 : set -> set -> set -> set, (forall x43, x43 :e int -> (forall x44, x44 :e int -> (forall x45, x45 :e int -> x42 x43 x44 x45 :e int))) -> (forall x43 : set -> set, (forall x44, x44 :e int -> x43 x44 :e int) -> (forall x44 : set -> set, (forall x45, x45 :e int -> x44 x45 :e int) -> (forall x45, x45 :e int -> (forall x46 : set -> set -> set, (forall x47, x47 :e int -> (forall x48, x48 :e int -> x46 x47 x48 :e int)) -> (forall x47 : set -> set -> set, (forall x48, x48 :e int -> (forall x49, x49 :e int -> x47 x48 x49 :e int)) -> (forall x48 : set -> set -> set, (forall x49, x49 :e int -> (forall x50, x50 :e int -> x48 x49 x50 :e int)) -> (forall x49 : set -> set -> set, (forall x50, x50 :e int -> (forall x51, x51 :e int -> x49 x50 x51 :e int)) -> (forall x50 : set -> set, (forall x51, x51 :e int -> x50 x51 :e int) -> (forall x51, x51 :e int -> (forall x52 : set -> set -> set, (forall x53, x53 :e int -> (forall x54, x54 :e int -> x52 x53 x54 :e int)) -> (forall x53 : set -> set, (forall x54, x54 :e int -> x53 x54 :e int) -> (forall x54 : set -> set, (forall x55, x55 :e int -> x54 x55 :e int) -> (forall x55 : set -> set, (forall x56, x56 :e int -> x55 x56 :e int) -> (forall x56, x56 :e int -> (forall x57 : set -> set -> set, (forall x58, x58 :e int -> (forall x59, x59 :e int -> x57 x58 x59 :e int)) -> (forall x58 : set -> set, (forall x59, x59 :e int -> x58 x59 :e int) -> (forall x59 : set -> set, (forall x60, x60 :e int -> x59 x60 :e int) -> (forall x60, x60 :e int -> (forall x61 : set -> set -> set, (forall x62, x62 :e int -> (forall x63, x63 :e int -> x61 x62 x63 :e int)) -> (forall x62 : set -> set -> set, (forall x63, x63 :e int -> (forall x64, x64 :e int -> x62 x63 x64 :e int)) -> (forall x63 : set -> set -> set, (forall x64, x64 :e int -> (forall x65, x65 :e int -> x63 x64 x65 :e int)) -> (forall x64 : set -> set -> set, (forall x65, x65 :e int -> (forall x66, x66 :e int -> x64 x65 x66 :e int)) -> (forall x65 : set -> set, (forall x66, x66 :e int -> x65 x66 :e int) -> (forall x66, x66 :e int -> (forall x67 : set -> set -> set, (forall x68, x68 :e int -> (forall x69, x69 :e int -> x67 x68 x69 :e int)) -> (forall x68 : set -> set, (forall x69, x69 :e int -> x68 x69 :e int) -> (forall x69 : set -> set, (forall x70, x70 :e int -> x69 x70 :e int) -> (forall x70, x70 :e int -> x0 x70 = add_SNo (mul_SNo 2 (add_SNo x70 x70)) x70) -> (forall x70, x70 :e int -> x1 x70 = x70) -> (forall x70, x70 :e int -> x2 x70 = add_SNo x70 x70) -> (forall x70, x70 :e int -> x3 x70 = x70) -> x4 = 2 -> (forall x70, x70 :e int -> (forall x71, x71 :e int -> x5 x70 x71 = If_i (SNoLe x70 0) x71 (x2 (x5 (add_SNo x70 (minus_SNo 1)) x71)))) -> (forall x70, x70 :e int -> x6 x70 = x5 (x3 x70) x4) -> (forall x70, x70 :e int -> x7 x70 = add_SNo (x6 x70) (minus_SNo 1)) -> (forall x70, x70 :e int -> (forall x71, x71 :e int -> x8 x70 x71 = If_i (SNoLe x70 0) x71 (x0 (x8 (add_SNo x70 (minus_SNo 1)) x71)))) -> (forall x70, x70 :e int -> x9 x70 = x8 (x1 x70) (x7 x70)) -> (forall x70, x70 :e int -> x10 x70 = x9 x70) -> x11 = 1 -> (forall x70, x70 :e int -> (forall x71, x71 :e int -> x12 x70 x71 = x71)) -> (forall x70, x70 :e int -> (forall x71, x71 :e int -> x13 x70 x71 = If_i (SNoLe x70 0) x71 (x10 (x13 (add_SNo x70 (minus_SNo 1)) x71)))) -> (forall x70, x70 :e int -> (forall x71, x71 :e int -> x14 x70 x71 = x13 x11 (x12 x70 x71))) -> (forall x70, x70 :e int -> (forall x71, x71 :e int -> x15 x70 x71 = add_SNo (x14 x70 x71) (mul_SNo 2 (add_SNo (add_SNo x70 x70) x70)))) -> (forall x70, x70 :e int -> (forall x71, x71 :e int -> x16 x70 x71 = x71)) -> x17 = 1 -> (forall x70, x70 :e int -> (forall x71, x71 :e int -> x18 x70 x71 = If_i (SNoLe x70 0) x71 (x15 (x18 (add_SNo x70 (minus_SNo 1)) x71) x70))) -> (forall x70, x70 :e int -> (forall x71, x71 :e int -> x19 x70 x71 = x18 (x16 x70 x71) x17)) -> (forall x70, x70 :e int -> (forall x71, x71 :e int -> x20 x70 x71 = mul_SNo (add_SNo 2 x71) x70)) -> x21 = 2 -> (forall x70, x70 :e int -> x22 x70 = x70) -> (forall x70, x70 :e int -> (forall x71, x71 :e int -> x23 x70 x71 = If_i (SNoLe x70 0) x71 (x20 (x23 (add_SNo x70 (minus_SNo 1)) x71) x70))) -> (forall x70, x70 :e int -> x24 x70 = x23 x21 (x22 x70)) -> (forall x70, x70 :e int -> (forall x71, x71 :e int -> x25 x70 x71 = add_SNo (x19 x70 x71) (x24 x70))) -> (forall x70, x70 :e int -> x26 x70 = x70) -> x27 = 1 -> (forall x70, x70 :e int -> (forall x71, x71 :e int -> x28 x70 x71 = If_i (SNoLe x70 0) x71 (x25 (x28 (add_SNo x70 (minus_SNo 1)) x71) x70))) -> (forall x70, x70 :e int -> x29 x70 = x28 (x26 x70) x27) -> (forall x70, x70 :e int -> x30 x70 = x29 x70) -> (forall x70, x70 :e int -> x31 x70 = add_SNo x70 x70) -> (forall x70, x70 :e int -> x32 x70 = x70) -> x33 = 2 -> (forall x70, x70 :e int -> (forall x71, x71 :e int -> x34 x70 x71 = If_i (SNoLe x70 0) x71 (x31 (x34 (add_SNo x70 (minus_SNo 1)) x71)))) -> (forall x70, x70 :e int -> x35 x70 = x34 (x32 x70) x33) -> (forall x70, x70 :e int -> (forall x71, x71 :e int -> x36 x70 x71 = mul_SNo x70 x71)) -> (forall x70, x70 :e int -> (forall x71, x71 :e int -> x37 x70 x71 = x71)) -> (forall x70, x70 :e int -> x38 x70 = x70) -> x39 = 1 -> x40 = add_SNo 1 2 -> (forall x70, x70 :e int -> (forall x71, x71 :e int -> (forall x72, x72 :e int -> x41 x70 x71 x72 = If_i (SNoLe x70 0) x71 (x36 (x41 (add_SNo x70 (minus_SNo 1)) x71 x72) (x42 (add_SNo x70 (minus_SNo 1)) x71 x72))))) -> (forall x70, x70 :e int -> (forall x71, x71 :e int -> (forall x72, x72 :e int -> x42 x70 x71 x72 = If_i (SNoLe x70 0) x72 (x37 (x41 (add_SNo x70 (minus_SNo 1)) x71 x72) (x42 (add_SNo x70 (minus_SNo 1)) x71 x72))))) -> (forall x70, x70 :e int -> x43 x70 = x41 (x38 x70) x39 x40) -> (forall x70, x70 :e int -> x44 x70 = mul_SNo (add_SNo (x35 x70) (minus_SNo 1)) (x43 x70)) -> x45 = 1 -> (forall x70, x70 :e int -> (forall x71, x71 :e int -> x46 x70 x71 = x71)) -> (forall x70, x70 :e int -> (forall x71, x71 :e int -> x47 x70 x71 = If_i (SNoLe x70 0) x71 (x44 (x47 (add_SNo x70 (minus_SNo 1)) x71)))) -> (forall x70, x70 :e int -> (forall x71, x71 :e int -> x48 x70 x71 = x47 x45 (x46 x70 x71))) -> (forall x70, x70 :e int -> (forall x71, x71 :e int -> x49 x70 x71 = add_SNo (add_SNo (x48 x70 x71) (mul_SNo 2 (add_SNo x70 x70))) x70)) -> (forall x70, x70 :e int -> x50 x70 = x70) -> x51 = 1 -> (forall x70, x70 :e int -> (forall x71, x71 :e int -> x52 x70 x71 = If_i (SNoLe x70 0) x71 (x49 (x52 (add_SNo x70 (minus_SNo 1)) x71) x70))) -> (forall x70, x70 :e int -> x53 x70 = x52 (x50 x70) x51) -> (forall x70, x70 :e int -> x54 x70 = add_SNo x70 x70) -> (forall x70, x70 :e int -> x55 x70 = x70) -> x56 = 1 -> (forall x70, x70 :e int -> (forall x71, x71 :e int -> x57 x70 x71 = If_i (SNoLe x70 0) x71 (x54 (x57 (add_SNo x70 (minus_SNo 1)) x71)))) -> (forall x70, x70 :e int -> x58 x70 = x57 (x55 x70) x56) -> (forall x70, x70 :e int -> x59 x70 = mul_SNo (x53 x70) (x58 x70)) -> x60 = 1 -> (forall x70, x70 :e int -> (forall x71, x71 :e int -> x61 x70 x71 = x71)) -> (forall x70, x70 :e int -> (forall x71, x71 :e int -> x62 x70 x71 = If_i (SNoLe x70 0) x71 (x59 (x62 (add_SNo x70 (minus_SNo 1)) x71)))) -> (forall x70, x70 :e int -> (forall x71, x71 :e int -> x63 x70 x71 = x62 x60 (x61 x70 x71))) -> (forall x70, x70 :e int -> (forall x71, x71 :e int -> x64 x70 x71 = add_SNo (add_SNo (x63 x70 x71) (mul_SNo 2 (add_SNo x70 x70))) x70)) -> (forall x70, x70 :e int -> x65 x70 = x70) -> x66 = 1 -> (forall x70, x70 :e int -> (forall x71, x71 :e int -> x67 x70 x71 = If_i (SNoLe x70 0) x71 (x64 (x67 (add_SNo x70 (minus_SNo 1)) x71) x70))) -> (forall x70, x70 :e int -> x68 x70 = x67 (x65 x70) x66) -> (forall x70, x70 :e int -> x69 x70 = x68 x70) -> (forall x70, x70 :e int -> SNoLe 0 x70 -> x30 x70 = x69 x70))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_838a346b46c211bf095df3a62580c032a37ff9e9547bdecd7cbb9f2aa505dae4 : (forall x0 : set -> set, (forall x1, x1 :e int -> x0 x1 :e int) -> (forall x1 : set -> set -> set, (forall x2, x2 :e int -> (forall x3, x3 :e int -> x1 x2 x3 :e int)) -> (forall x2, x2 :e int -> (forall x3 : set -> set -> set, (forall x4, x4 :e int -> (forall x5, x5 :e int -> x3 x4 x5 :e int)) -> (forall x4 : set -> set -> set, (forall x5, x5 :e int -> (forall x6, x6 :e int -> x4 x5 x6 :e int)) -> (forall x5 : set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> x5 x6 x7 :e int)) -> (forall x6, x6 :e int -> (forall x7 : set -> set, (forall x8, x8 :e int -> x7 x8 :e int) -> (forall x8 : set -> set -> set, (forall x9, x9 :e int -> (forall x10, x10 :e int -> x8 x9 x10 :e int)) -> (forall x9 : set -> set, (forall x10, x10 :e int -> x9 x10 :e int) -> (forall x10 : set -> set -> set, (forall x11, x11 :e int -> (forall x12, x12 :e int -> x10 x11 x12 :e int)) -> (forall x11 : set -> set -> set, (forall x12, x12 :e int -> (forall x13, x13 :e int -> x11 x12 x13 :e int)) -> (forall x12, x12 :e int -> (forall x13 : set -> set -> set, (forall x14, x14 :e int -> (forall x15, x15 :e int -> x13 x14 x15 :e int)) -> (forall x14 : set -> set -> set, (forall x15, x15 :e int -> (forall x16, x16 :e int -> x14 x15 x16 :e int)) -> (forall x15 : set -> set -> set, (forall x16, x16 :e int -> (forall x17, x17 :e int -> x15 x16 x17 :e int)) -> (forall x16 : set -> set -> set, (forall x17, x17 :e int -> (forall x18, x18 :e int -> x16 x17 x18 :e int)) -> (forall x17, x17 :e int -> (forall x18 : set -> set -> set, (forall x19, x19 :e int -> (forall x20, x20 :e int -> x18 x19 x20 :e int)) -> (forall x19 : set -> set -> set, (forall x20, x20 :e int -> (forall x21, x21 :e int -> x19 x20 x21 :e int)) -> (forall x20 : set -> set -> set, (forall x21, x21 :e int -> (forall x22, x22 :e int -> x20 x21 x22 :e int)) -> (forall x21 : set -> set, (forall x22, x22 :e int -> x21 x22 :e int) -> (forall x22, x22 :e int -> (forall x23 : set -> set -> set, (forall x24, x24 :e int -> (forall x25, x25 :e int -> x23 x24 x25 :e int)) -> (forall x24 : set -> set, (forall x25, x25 :e int -> x24 x25 :e int) -> (forall x25 : set -> set, (forall x26, x26 :e int -> x25 x26 :e int) -> (forall x26 : set -> set -> set, (forall x27, x27 :e int -> (forall x28, x28 :e int -> x26 x27 x28 :e int)) -> (forall x27 : set -> set -> set, (forall x28, x28 :e int -> (forall x29, x29 :e int -> x27 x28 x29 :e int)) -> (forall x28 : set -> set, (forall x29, x29 :e int -> x28 x29 :e int) -> (forall x29, x29 :e int -> (forall x30, x30 :e int -> (forall x31 : set -> set -> set -> set, (forall x32, x32 :e int -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x31 x32 x33 x34 :e int))) -> (forall x32 : set -> set -> set -> set, (forall x33, x33 :e int -> (forall x34, x34 :e int -> (forall x35, x35 :e int -> x32 x33 x34 x35 :e int))) -> (forall x33 : set -> set, (forall x34, x34 :e int -> x33 x34 :e int) -> (forall x34 : set -> set -> set, (forall x35, x35 :e int -> (forall x36, x36 :e int -> x34 x35 x36 :e int)) -> (forall x35 : set -> set -> set, (forall x36, x36 :e int -> (forall x37, x37 :e int -> x35 x36 x37 :e int)) -> (forall x36 : set -> set, (forall x37, x37 :e int -> x36 x37 :e int) -> (forall x37, x37 :e int -> (forall x38, x38 :e int -> (forall x39 : set -> set -> set -> set, (forall x40, x40 :e int -> (forall x41, x41 :e int -> (forall x42, x42 :e int -> x39 x40 x41 x42 :e int))) -> (forall x40 : set -> set -> set -> set, (forall x41, x41 :e int -> (forall x42, x42 :e int -> (forall x43, x43 :e int -> x40 x41 x42 x43 :e int))) -> (forall x41 : set -> set, (forall x42, x42 :e int -> x41 x42 :e int) -> (forall x42 : set -> set, (forall x43, x43 :e int -> x42 x43 :e int) -> (forall x43, x43 :e int -> (forall x44 : set -> set -> set, (forall x45, x45 :e int -> (forall x46, x46 :e int -> x44 x45 x46 :e int)) -> (forall x45 : set -> set -> set, (forall x46, x46 :e int -> (forall x47, x47 :e int -> x45 x46 x47 :e int)) -> (forall x46 : set -> set -> set, (forall x47, x47 :e int -> (forall x48, x48 :e int -> x46 x47 x48 :e int)) -> (forall x47 : set -> set -> set, (forall x48, x48 :e int -> (forall x49, x49 :e int -> x47 x48 x49 :e int)) -> (forall x48 : set -> set, (forall x49, x49 :e int -> x48 x49 :e int) -> (forall x49, x49 :e int -> (forall x50 : set -> set -> set, (forall x51, x51 :e int -> (forall x52, x52 :e int -> x50 x51 x52 :e int)) -> (forall x51 : set -> set, (forall x52, x52 :e int -> x51 x52 :e int) -> (forall x52 : set -> set, (forall x53, x53 :e int -> x52 x53 :e int) -> (forall x53, x53 :e int -> (forall x54 : set -> set -> set, (forall x55, x55 :e int -> (forall x56, x56 :e int -> x54 x55 x56 :e int)) -> (forall x55 : set -> set -> set, (forall x56, x56 :e int -> (forall x57, x57 :e int -> x55 x56 x57 :e int)) -> (forall x56 : set -> set -> set, (forall x57, x57 :e int -> (forall x58, x58 :e int -> x56 x57 x58 :e int)) -> (forall x57 : set -> set -> set, (forall x58, x58 :e int -> (forall x59, x59 :e int -> x57 x58 x59 :e int)) -> (forall x58 : set -> set, (forall x59, x59 :e int -> x58 x59 :e int) -> (forall x59, x59 :e int -> (forall x60 : set -> set -> set, (forall x61, x61 :e int -> (forall x62, x62 :e int -> x60 x61 x62 :e int)) -> (forall x61 : set -> set, (forall x62, x62 :e int -> x61 x62 :e int) -> (forall x62 : set -> set, (forall x63, x63 :e int -> x62 x63 :e int) -> (forall x63, x63 :e int -> x0 x63 = add_SNo (add_SNo x63 x63) x63) -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> x1 x63 x64 = add_SNo x64 x64)) -> x2 = 1 -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> x3 x63 x64 = If_i (SNoLe x63 0) x64 (x0 (x3 (add_SNo x63 (minus_SNo 1)) x64)))) -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> x4 x63 x64 = x3 (x1 x63 x64) x2)) -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> x5 x63 x64 = mul_SNo (add_SNo 2 x64) x63)) -> x6 = 2 -> (forall x63, x63 :e int -> x7 x63 = x63) -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> x8 x63 x64 = If_i (SNoLe x63 0) x64 (x5 (x8 (add_SNo x63 (minus_SNo 1)) x64) x63))) -> (forall x63, x63 :e int -> x9 x63 = x8 x6 (x7 x63)) -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> x10 x63 x64 = add_SNo (x4 x63 x64) (add_SNo (x9 x63) (minus_SNo x63)))) -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> x11 x63 x64 = x64)) -> x12 = 1 -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> x13 x63 x64 = If_i (SNoLe x63 0) x64 (x10 (x13 (add_SNo x63 (minus_SNo 1)) x64) x63))) -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> x14 x63 x64 = x13 (x11 x63 x64) x12)) -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> x15 x63 x64 = add_SNo (x14 x63 x64) (mul_SNo 2 (add_SNo (add_SNo x63 x63) x63)))) -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> x16 x63 x64 = x64)) -> x17 = 1 -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> x18 x63 x64 = If_i (SNoLe x63 0) x64 (x15 (x18 (add_SNo x63 (minus_SNo 1)) x64) x63))) -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> x19 x63 x64 = x18 (x16 x63 x64) x17)) -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> x20 x63 x64 = add_SNo (add_SNo (x19 x63 x64) (mul_SNo 2 (add_SNo x63 x63))) x63)) -> (forall x63, x63 :e int -> x21 x63 = x63) -> x22 = 1 -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> x23 x63 x64 = If_i (SNoLe x63 0) x64 (x20 (x23 (add_SNo x63 (minus_SNo 1)) x64) x63))) -> (forall x63, x63 :e int -> x24 x63 = x23 (x21 x63) x22) -> (forall x63, x63 :e int -> x25 x63 = x24 x63) -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> x26 x63 x64 = add_SNo (add_SNo (add_SNo x63 x63) x63) x64)) -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> x27 x63 x64 = add_SNo x64 x64)) -> (forall x63, x63 :e int -> x28 x63 = x63) -> x29 = 1 -> x30 = 2 -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> (forall x65, x65 :e int -> x31 x63 x64 x65 = If_i (SNoLe x63 0) x64 (x26 (x31 (add_SNo x63 (minus_SNo 1)) x64 x65) (x32 (add_SNo x63 (minus_SNo 1)) x64 x65))))) -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> (forall x65, x65 :e int -> x32 x63 x64 x65 = If_i (SNoLe x63 0) x65 (x27 (x31 (add_SNo x63 (minus_SNo 1)) x64 x65) (x32 (add_SNo x63 (minus_SNo 1)) x64 x65))))) -> (forall x63, x63 :e int -> x33 x63 = x31 (x28 x63) x29 x30) -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> x34 x63 x64 = mul_SNo x63 x64)) -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> x35 x63 x64 = x64)) -> (forall x63, x63 :e int -> x36 x63 = x63) -> x37 = 1 -> x38 = add_SNo 1 2 -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> (forall x65, x65 :e int -> x39 x63 x64 x65 = If_i (SNoLe x63 0) x64 (x34 (x39 (add_SNo x63 (minus_SNo 1)) x64 x65) (x40 (add_SNo x63 (minus_SNo 1)) x64 x65))))) -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> (forall x65, x65 :e int -> x40 x63 x64 x65 = If_i (SNoLe x63 0) x65 (x35 (x39 (add_SNo x63 (minus_SNo 1)) x64 x65) (x40 (add_SNo x63 (minus_SNo 1)) x64 x65))))) -> (forall x63, x63 :e int -> x41 x63 = x39 (x36 x63) x37 x38) -> (forall x63, x63 :e int -> x42 x63 = mul_SNo (x33 x63) (x41 x63)) -> x43 = 1 -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> x44 x63 x64 = x64)) -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> x45 x63 x64 = If_i (SNoLe x63 0) x64 (x42 (x45 (add_SNo x63 (minus_SNo 1)) x64)))) -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> x46 x63 x64 = x45 x43 (x44 x63 x64))) -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> x47 x63 x64 = add_SNo (add_SNo (x46 x63 x64) (mul_SNo 2 (add_SNo x63 x63))) x63)) -> (forall x63, x63 :e int -> x48 x63 = x63) -> x49 = 1 -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> x50 x63 x64 = If_i (SNoLe x63 0) x64 (x47 (x50 (add_SNo x63 (minus_SNo 1)) x64) x63))) -> (forall x63, x63 :e int -> x51 x63 = x50 (x48 x63) x49) -> (forall x63, x63 :e int -> x52 x63 = x51 x63) -> x53 = 1 -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> x54 x63 x64 = x64)) -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> x55 x63 x64 = If_i (SNoLe x63 0) x64 (x52 (x55 (add_SNo x63 (minus_SNo 1)) x64)))) -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> x56 x63 x64 = x55 x53 (x54 x63 x64))) -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> x57 x63 x64 = add_SNo (add_SNo (x56 x63 x64) (mul_SNo 2 (add_SNo (mul_SNo 2 (add_SNo x63 x63)) x63))) x63)) -> (forall x63, x63 :e int -> x58 x63 = x63) -> x59 = 1 -> (forall x63, x63 :e int -> (forall x64, x64 :e int -> x60 x63 x64 = If_i (SNoLe x63 0) x64 (x57 (x60 (add_SNo x63 (minus_SNo 1)) x64) x63))) -> (forall x63, x63 :e int -> x61 x63 = x60 (x58 x63) x59) -> (forall x63, x63 :e int -> x62 x63 = x61 x63) -> (forall x63, x63 :e int -> SNoLe 0 x63 -> x25 x63 = x62 x63)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_485c061f645fd6948caa992263ff7eeec8f383892657a014b38d009ec29965ba : (forall x0 : set -> set, (forall x1, x1 :e int -> x0 x1 :e int) -> (forall x1 : set -> set, (forall x2, x2 :e int -> x1 x2 :e int) -> (forall x2 : set -> set, (forall x3, x3 :e int -> x2 x3 :e int) -> (forall x3 : set -> set, (forall x4, x4 :e int -> x3 x4 :e int) -> (forall x4, x4 :e int -> (forall x5 : set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> x5 x6 x7 :e int)) -> (forall x6 : set -> set, (forall x7, x7 :e int -> x6 x7 :e int) -> (forall x7 : set -> set, (forall x8, x8 :e int -> x7 x8 :e int) -> (forall x8 : set -> set -> set, (forall x9, x9 :e int -> (forall x10, x10 :e int -> x8 x9 x10 :e int)) -> (forall x9 : set -> set, (forall x10, x10 :e int -> x9 x10 :e int) -> (forall x10 : set -> set, (forall x11, x11 :e int -> x10 x11 :e int) -> (forall x11, x11 :e int -> (forall x12 : set -> set -> set, (forall x13, x13 :e int -> (forall x14, x14 :e int -> x12 x13 x14 :e int)) -> (forall x13 : set -> set -> set, (forall x14, x14 :e int -> (forall x15, x15 :e int -> x13 x14 x15 :e int)) -> (forall x14 : set -> set -> set, (forall x15, x15 :e int -> (forall x16, x16 :e int -> x14 x15 x16 :e int)) -> (forall x15 : set -> set -> set, (forall x16, x16 :e int -> (forall x17, x17 :e int -> x15 x16 x17 :e int)) -> (forall x16 : set -> set -> set, (forall x17, x17 :e int -> (forall x18, x18 :e int -> x16 x17 x18 :e int)) -> (forall x17, x17 :e int -> (forall x18 : set -> set -> set, (forall x19, x19 :e int -> (forall x20, x20 :e int -> x18 x19 x20 :e int)) -> (forall x19 : set -> set -> set, (forall x20, x20 :e int -> (forall x21, x21 :e int -> x19 x20 x21 :e int)) -> (forall x20 : set -> set -> set, (forall x21, x21 :e int -> (forall x22, x22 :e int -> x20 x21 x22 :e int)) -> (forall x21 : set -> set, (forall x22, x22 :e int -> x21 x22 :e int) -> (forall x22, x22 :e int -> (forall x23 : set -> set -> set, (forall x24, x24 :e int -> (forall x25, x25 :e int -> x23 x24 x25 :e int)) -> (forall x24 : set -> set, (forall x25, x25 :e int -> x24 x25 :e int) -> (forall x25 : set -> set, (forall x26, x26 :e int -> x25 x26 :e int) -> (forall x26 : set -> set, (forall x27, x27 :e int -> x26 x27 :e int) -> (forall x27 : set -> set, (forall x28, x28 :e int -> x27 x28 :e int) -> (forall x28, x28 :e int -> (forall x29 : set -> set -> set, (forall x30, x30 :e int -> (forall x31, x31 :e int -> x29 x30 x31 :e int)) -> (forall x30 : set -> set, (forall x31, x31 :e int -> x30 x31 :e int) -> (forall x31 : set -> set -> set, (forall x32, x32 :e int -> (forall x33, x33 :e int -> x31 x32 x33 :e int)) -> (forall x32 : set -> set -> set, (forall x33, x33 :e int -> (forall x34, x34 :e int -> x32 x33 x34 :e int)) -> (forall x33 : set -> set, (forall x34, x34 :e int -> x33 x34 :e int) -> (forall x34, x34 :e int -> (forall x35, x35 :e int -> (forall x36 : set -> set -> set -> set, (forall x37, x37 :e int -> (forall x38, x38 :e int -> (forall x39, x39 :e int -> x36 x37 x38 x39 :e int))) -> (forall x37 : set -> set -> set -> set, (forall x38, x38 :e int -> (forall x39, x39 :e int -> (forall x40, x40 :e int -> x37 x38 x39 x40 :e int))) -> (forall x38 : set -> set, (forall x39, x39 :e int -> x38 x39 :e int) -> (forall x39 : set -> set, (forall x40, x40 :e int -> x39 x40 :e int) -> (forall x40, x40 :e int -> (forall x41 : set -> set -> set, (forall x42, x42 :e int -> (forall x43, x43 :e int -> x41 x42 x43 :e int)) -> (forall x42 : set -> set -> set, (forall x43, x43 :e int -> (forall x44, x44 :e int -> x42 x43 x44 :e int)) -> (forall x43 : set -> set -> set, (forall x44, x44 :e int -> (forall x45, x45 :e int -> x43 x44 x45 :e int)) -> (forall x44 : set -> set -> set, (forall x45, x45 :e int -> (forall x46, x46 :e int -> x44 x45 x46 :e int)) -> (forall x45 : set -> set, (forall x46, x46 :e int -> x45 x46 :e int) -> (forall x46, x46 :e int -> (forall x47 : set -> set -> set, (forall x48, x48 :e int -> (forall x49, x49 :e int -> x47 x48 x49 :e int)) -> (forall x48 : set -> set, (forall x49, x49 :e int -> x48 x49 :e int) -> (forall x49 : set -> set, (forall x50, x50 :e int -> x49 x50 :e int) -> (forall x50, x50 :e int -> (forall x51 : set -> set -> set, (forall x52, x52 :e int -> (forall x53, x53 :e int -> x51 x52 x53 :e int)) -> (forall x52 : set -> set -> set, (forall x53, x53 :e int -> (forall x54, x54 :e int -> x52 x53 x54 :e int)) -> (forall x53 : set -> set -> set, (forall x54, x54 :e int -> (forall x55, x55 :e int -> x53 x54 x55 :e int)) -> (forall x54 : set -> set -> set, (forall x55, x55 :e int -> (forall x56, x56 :e int -> x54 x55 x56 :e int)) -> (forall x55 : set -> set, (forall x56, x56 :e int -> x55 x56 :e int) -> (forall x56, x56 :e int -> (forall x57 : set -> set -> set, (forall x58, x58 :e int -> (forall x59, x59 :e int -> x57 x58 x59 :e int)) -> (forall x58 : set -> set, (forall x59, x59 :e int -> x58 x59 :e int) -> (forall x59 : set -> set, (forall x60, x60 :e int -> x59 x60 :e int) -> (forall x60, x60 :e int -> x0 x60 = mul_SNo 2 (add_SNo (add_SNo x60 x60) x60)) -> (forall x60, x60 :e int -> x1 x60 = x60) -> (forall x60, x60 :e int -> x2 x60 = add_SNo x60 x60) -> (forall x60, x60 :e int -> x3 x60 = x60) -> x4 = 2 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x5 x60 x61 = If_i (SNoLe x60 0) x61 (x2 (x5 (add_SNo x60 (minus_SNo 1)) x61)))) -> (forall x60, x60 :e int -> x6 x60 = x5 (x3 x60) x4) -> (forall x60, x60 :e int -> x7 x60 = add_SNo (x6 x60) (minus_SNo 1)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x8 x60 x61 = If_i (SNoLe x60 0) x61 (x0 (x8 (add_SNo x60 (minus_SNo 1)) x61)))) -> (forall x60, x60 :e int -> x9 x60 = x8 (x1 x60) (x7 x60)) -> (forall x60, x60 :e int -> x10 x60 = x9 x60) -> x11 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x12 x60 x61 = x61)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x13 x60 x61 = If_i (SNoLe x60 0) x61 (x10 (x13 (add_SNo x60 (minus_SNo 1)) x61)))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x14 x60 x61 = x13 x11 (x12 x60 x61))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x15 x60 x61 = add_SNo (add_SNo (x14 x60 x61) (mul_SNo 2 (add_SNo (add_SNo x60 x60) x60))) x60)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x16 x60 x61 = x61)) -> x17 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x18 x60 x61 = If_i (SNoLe x60 0) x61 (x15 (x18 (add_SNo x60 (minus_SNo 1)) x61) x60))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x19 x60 x61 = x18 (x16 x60 x61) x17)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x20 x60 x61 = add_SNo (add_SNo (x19 x60 x61) (mul_SNo 2 (add_SNo x60 x60))) x60)) -> (forall x60, x60 :e int -> x21 x60 = x60) -> x22 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x23 x60 x61 = If_i (SNoLe x60 0) x61 (x20 (x23 (add_SNo x60 (minus_SNo 1)) x61) x60))) -> (forall x60, x60 :e int -> x24 x60 = x23 (x21 x60) x22) -> (forall x60, x60 :e int -> x25 x60 = x24 x60) -> (forall x60, x60 :e int -> x26 x60 = add_SNo x60 x60) -> (forall x60, x60 :e int -> x27 x60 = x60) -> x28 = 2 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x29 x60 x61 = If_i (SNoLe x60 0) x61 (x26 (x29 (add_SNo x60 (minus_SNo 1)) x61)))) -> (forall x60, x60 :e int -> x30 x60 = x29 (x27 x60) x28) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x31 x60 x61 = mul_SNo x60 x61)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x32 x60 x61 = x61)) -> (forall x60, x60 :e int -> x33 x60 = x60) -> x34 = 1 -> x35 = add_SNo 2 (add_SNo 2 2) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> (forall x62, x62 :e int -> x36 x60 x61 x62 = If_i (SNoLe x60 0) x61 (x31 (x36 (add_SNo x60 (minus_SNo 1)) x61 x62) (x37 (add_SNo x60 (minus_SNo 1)) x61 x62))))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> (forall x62, x62 :e int -> x37 x60 x61 x62 = If_i (SNoLe x60 0) x62 (x32 (x36 (add_SNo x60 (minus_SNo 1)) x61 x62) (x37 (add_SNo x60 (minus_SNo 1)) x61 x62))))) -> (forall x60, x60 :e int -> x38 x60 = x36 (x33 x60) x34 x35) -> (forall x60, x60 :e int -> x39 x60 = mul_SNo (add_SNo (x30 x60) (minus_SNo 1)) (x38 x60)) -> x40 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x41 x60 x61 = x61)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x42 x60 x61 = If_i (SNoLe x60 0) x61 (x39 (x42 (add_SNo x60 (minus_SNo 1)) x61)))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x43 x60 x61 = x42 x40 (x41 x60 x61))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x44 x60 x61 = add_SNo (add_SNo (x43 x60 x61) (mul_SNo 2 (add_SNo x60 x60))) x60)) -> (forall x60, x60 :e int -> x45 x60 = x60) -> x46 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x47 x60 x61 = If_i (SNoLe x60 0) x61 (x44 (x47 (add_SNo x60 (minus_SNo 1)) x61) x60))) -> (forall x60, x60 :e int -> x48 x60 = x47 (x45 x60) x46) -> (forall x60, x60 :e int -> x49 x60 = x48 x60) -> x50 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x51 x60 x61 = x61)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x52 x60 x61 = If_i (SNoLe x60 0) x61 (x49 (x52 (add_SNo x60 (minus_SNo 1)) x61)))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x53 x60 x61 = x52 x50 (x51 x60 x61))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x54 x60 x61 = add_SNo (add_SNo (x53 x60 x61) x60) (mul_SNo (add_SNo (add_SNo x60 x60) x60) 2))) -> (forall x60, x60 :e int -> x55 x60 = x60) -> x56 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x57 x60 x61 = If_i (SNoLe x60 0) x61 (x54 (x57 (add_SNo x60 (minus_SNo 1)) x61) x60))) -> (forall x60, x60 :e int -> x58 x60 = x57 (x55 x60) x56) -> (forall x60, x60 :e int -> x59 x60 = x58 x60) -> (forall x60, x60 :e int -> SNoLe 0 x60 -> x25 x60 = x59 x60))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_c5e62d878f70e5010f8826d5d182cdf612fd7e6e9618b8d486a12d6e352035d6 : (forall x0 : set -> set -> set, (forall x1, x1 :e int -> (forall x2, x2 :e int -> x0 x1 x2 :e int)) -> (forall x1 : set -> set -> set, (forall x2, x2 :e int -> (forall x3, x3 :e int -> x1 x2 x3 :e int)) -> (forall x2 : set -> set, (forall x3, x3 :e int -> x2 x3 :e int) -> (forall x3, x3 :e int -> (forall x4, x4 :e int -> (forall x5 : set -> set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> (forall x8, x8 :e int -> x5 x6 x7 x8 :e int))) -> (forall x6 : set -> set -> set -> set, (forall x7, x7 :e int -> (forall x8, x8 :e int -> (forall x9, x9 :e int -> x6 x7 x8 x9 :e int))) -> (forall x7 : set -> set, (forall x8, x8 :e int -> x7 x8 :e int) -> (forall x8 : set -> set, (forall x9, x9 :e int -> x8 x9 :e int) -> (forall x9 : set -> set, (forall x10, x10 :e int -> x9 x10 :e int) -> (forall x10, x10 :e int -> (forall x11 : set -> set -> set, (forall x12, x12 :e int -> (forall x13, x13 :e int -> x11 x12 x13 :e int)) -> (forall x12 : set -> set, (forall x13, x13 :e int -> x12 x13 :e int) -> (forall x13 : set -> set, (forall x14, x14 :e int -> x13 x14 :e int) -> (forall x14, x14 :e int -> (forall x15 : set -> set -> set, (forall x16, x16 :e int -> (forall x17, x17 :e int -> x15 x16 x17 :e int)) -> (forall x16 : set -> set -> set, (forall x17, x17 :e int -> (forall x18, x18 :e int -> x16 x17 x18 :e int)) -> (forall x17 : set -> set -> set, (forall x18, x18 :e int -> (forall x19, x19 :e int -> x17 x18 x19 :e int)) -> (forall x18 : set -> set, (forall x19, x19 :e int -> x18 x19 :e int) -> (forall x19, x19 :e int -> (forall x20 : set -> set, (forall x21, x21 :e int -> x20 x21 :e int) -> (forall x21 : set -> set -> set, (forall x22, x22 :e int -> (forall x23, x23 :e int -> x21 x22 x23 :e int)) -> (forall x22 : set -> set, (forall x23, x23 :e int -> x22 x23 :e int) -> (forall x23 : set -> set -> set, (forall x24, x24 :e int -> (forall x25, x25 :e int -> x23 x24 x25 :e int)) -> (forall x24 : set -> set, (forall x25, x25 :e int -> x24 x25 :e int) -> (forall x25, x25 :e int -> (forall x26 : set -> set -> set, (forall x27, x27 :e int -> (forall x28, x28 :e int -> x26 x27 x28 :e int)) -> (forall x27 : set -> set, (forall x28, x28 :e int -> x27 x28 :e int) -> (forall x28 : set -> set, (forall x29, x29 :e int -> x28 x29 :e int) -> (forall x29 : set -> set -> set, (forall x30, x30 :e int -> (forall x31, x31 :e int -> x29 x30 x31 :e int)) -> (forall x30 : set -> set -> set, (forall x31, x31 :e int -> (forall x32, x32 :e int -> x30 x31 x32 :e int)) -> (forall x31 : set -> set, (forall x32, x32 :e int -> x31 x32 :e int) -> (forall x32, x32 :e int -> (forall x33, x33 :e int -> (forall x34 : set -> set -> set -> set, (forall x35, x35 :e int -> (forall x36, x36 :e int -> (forall x37, x37 :e int -> x34 x35 x36 x37 :e int))) -> (forall x35 : set -> set -> set -> set, (forall x36, x36 :e int -> (forall x37, x37 :e int -> (forall x38, x38 :e int -> x35 x36 x37 x38 :e int))) -> (forall x36 : set -> set, (forall x37, x37 :e int -> x36 x37 :e int) -> (forall x37 : set -> set, (forall x38, x38 :e int -> x37 x38 :e int) -> (forall x38 : set -> set, (forall x39, x39 :e int -> x38 x39 :e int) -> (forall x39, x39 :e int -> (forall x40 : set -> set -> set, (forall x41, x41 :e int -> (forall x42, x42 :e int -> x40 x41 x42 :e int)) -> (forall x41 : set -> set, (forall x42, x42 :e int -> x41 x42 :e int) -> (forall x42 : set -> set, (forall x43, x43 :e int -> x42 x43 :e int) -> (forall x43, x43 :e int -> (forall x44 : set -> set -> set, (forall x45, x45 :e int -> (forall x46, x46 :e int -> x44 x45 x46 :e int)) -> (forall x45 : set -> set -> set, (forall x46, x46 :e int -> (forall x47, x47 :e int -> x45 x46 x47 :e int)) -> (forall x46 : set -> set -> set, (forall x47, x47 :e int -> (forall x48, x48 :e int -> x46 x47 x48 :e int)) -> (forall x47 : set -> set -> set, (forall x48, x48 :e int -> (forall x49, x49 :e int -> x47 x48 x49 :e int)) -> (forall x48 : set -> set, (forall x49, x49 :e int -> x48 x49 :e int) -> (forall x49, x49 :e int -> (forall x50 : set -> set -> set, (forall x51, x51 :e int -> (forall x52, x52 :e int -> x50 x51 x52 :e int)) -> (forall x51 : set -> set, (forall x52, x52 :e int -> x51 x52 :e int) -> (forall x52 : set -> set, (forall x53, x53 :e int -> x52 x53 :e int) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x0 x53 x54 = add_SNo (add_SNo (mul_SNo 2 (add_SNo (add_SNo (mul_SNo x54 x54) x53) x53)) (minus_SNo x54)) x53)) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x1 x53 x54 = add_SNo x54 x54)) -> (forall x53, x53 :e int -> x2 x53 = x53) -> x3 = 1 -> x4 = 2 -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> (forall x55, x55 :e int -> x5 x53 x54 x55 = If_i (SNoLe x53 0) x54 (x0 (x5 (add_SNo x53 (minus_SNo 1)) x54 x55) (x6 (add_SNo x53 (minus_SNo 1)) x54 x55))))) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> (forall x55, x55 :e int -> x6 x53 x54 x55 = If_i (SNoLe x53 0) x55 (x1 (x5 (add_SNo x53 (minus_SNo 1)) x54 x55) (x6 (add_SNo x53 (minus_SNo 1)) x54 x55))))) -> (forall x53, x53 :e int -> x7 x53 = x5 (x2 x53) x3 x4) -> (forall x53, x53 :e int -> x8 x53 = add_SNo x53 x53) -> (forall x53, x53 :e int -> x9 x53 = x53) -> x10 = 1 -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x11 x53 x54 = If_i (SNoLe x53 0) x54 (x8 (x11 (add_SNo x53 (minus_SNo 1)) x54)))) -> (forall x53, x53 :e int -> x12 x53 = x11 (x9 x53) x10) -> (forall x53, x53 :e int -> x13 x53 = mul_SNo (x7 x53) (x12 x53)) -> x14 = 1 -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x15 x53 x54 = x54)) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x16 x53 x54 = If_i (SNoLe x53 0) x54 (x13 (x16 (add_SNo x53 (minus_SNo 1)) x54)))) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x17 x53 x54 = x16 x14 (x15 x53 x54))) -> (forall x53, x53 :e int -> x18 x53 = add_SNo (add_SNo x53 x53) x53) -> x19 = 2 -> (forall x53, x53 :e int -> x20 x53 = x53) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x21 x53 x54 = If_i (SNoLe x53 0) x54 (x18 (x21 (add_SNo x53 (minus_SNo 1)) x54)))) -> (forall x53, x53 :e int -> x22 x53 = x21 x19 (x20 x53)) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x23 x53 x54 = add_SNo (x17 x53 x54) (x22 x53))) -> (forall x53, x53 :e int -> x24 x53 = x53) -> x25 = 1 -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x26 x53 x54 = If_i (SNoLe x53 0) x54 (x23 (x26 (add_SNo x53 (minus_SNo 1)) x54) x53))) -> (forall x53, x53 :e int -> x27 x53 = x26 (x24 x53) x25) -> (forall x53, x53 :e int -> x28 x53 = x27 x53) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x29 x53 x54 = add_SNo (add_SNo (mul_SNo 2 (add_SNo (add_SNo (mul_SNo x54 x54) x53) x53)) (minus_SNo x54)) x53)) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x30 x53 x54 = add_SNo x54 x54)) -> (forall x53, x53 :e int -> x31 x53 = x53) -> x32 = 1 -> x33 = 2 -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> (forall x55, x55 :e int -> x34 x53 x54 x55 = If_i (SNoLe x53 0) x54 (x29 (x34 (add_SNo x53 (minus_SNo 1)) x54 x55) (x35 (add_SNo x53 (minus_SNo 1)) x54 x55))))) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> (forall x55, x55 :e int -> x35 x53 x54 x55 = If_i (SNoLe x53 0) x55 (x30 (x34 (add_SNo x53 (minus_SNo 1)) x54 x55) (x35 (add_SNo x53 (minus_SNo 1)) x54 x55))))) -> (forall x53, x53 :e int -> x36 x53 = x34 (x31 x53) x32 x33) -> (forall x53, x53 :e int -> x37 x53 = add_SNo x53 x53) -> (forall x53, x53 :e int -> x38 x53 = x53) -> x39 = 1 -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x40 x53 x54 = If_i (SNoLe x53 0) x54 (x37 (x40 (add_SNo x53 (minus_SNo 1)) x54)))) -> (forall x53, x53 :e int -> x41 x53 = x40 (x38 x53) x39) -> (forall x53, x53 :e int -> x42 x53 = mul_SNo (x36 x53) (x41 x53)) -> x43 = 1 -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x44 x53 x54 = x54)) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x45 x53 x54 = If_i (SNoLe x53 0) x54 (x42 (x45 (add_SNo x53 (minus_SNo 1)) x54)))) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x46 x53 x54 = x45 x43 (x44 x53 x54))) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x47 x53 x54 = add_SNo (add_SNo (x46 x53 x54) (mul_SNo 2 (mul_SNo 2 (add_SNo x53 x53)))) x53)) -> (forall x53, x53 :e int -> x48 x53 = x53) -> x49 = 1 -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x50 x53 x54 = If_i (SNoLe x53 0) x54 (x47 (x50 (add_SNo x53 (minus_SNo 1)) x54) x53))) -> (forall x53, x53 :e int -> x51 x53 = x50 (x48 x53) x49) -> (forall x53, x53 :e int -> x52 x53 = x51 x53) -> (forall x53, x53 :e int -> SNoLe 0 x53 -> x28 x53 = x52 x53)))))))))))))))))))))))))))))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_5b06cae5b9b1000261e6864d7f8fc238a5100ecad7fd246bac6ee6f9950f1421 : (forall x0 : set -> set -> set, (forall x1, x1 :e int -> (forall x2, x2 :e int -> x0 x1 x2 :e int)) -> (forall x1 : set -> set -> set, (forall x2, x2 :e int -> (forall x3, x3 :e int -> x1 x2 x3 :e int)) -> (forall x2 : set -> set -> set, (forall x3, x3 :e int -> (forall x4, x4 :e int -> x2 x3 x4 :e int)) -> (forall x3, x3 :e int -> (forall x4, x4 :e int -> (forall x5 : set -> set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> (forall x8, x8 :e int -> x5 x6 x7 x8 :e int))) -> (forall x6 : set -> set -> set -> set, (forall x7, x7 :e int -> (forall x8, x8 :e int -> (forall x9, x9 :e int -> x6 x7 x8 x9 :e int))) -> (forall x7 : set -> set -> set, (forall x8, x8 :e int -> (forall x9, x9 :e int -> x7 x8 x9 :e int)) -> (forall x8 : set -> set -> set, (forall x9, x9 :e int -> (forall x10, x10 :e int -> x8 x9 x10 :e int)) -> (forall x9, x9 :e int -> (forall x10 : set -> set, (forall x11, x11 :e int -> x10 x11 :e int) -> (forall x11 : set -> set -> set, (forall x12, x12 :e int -> (forall x13, x13 :e int -> x11 x12 x13 :e int)) -> (forall x12 : set -> set, (forall x13, x13 :e int -> x12 x13 :e int) -> (forall x13 : set -> set -> set, (forall x14, x14 :e int -> (forall x15, x15 :e int -> x13 x14 x15 :e int)) -> (forall x14 : set -> set, (forall x15, x15 :e int -> x14 x15 :e int) -> (forall x15, x15 :e int -> (forall x16 : set -> set -> set, (forall x17, x17 :e int -> (forall x18, x18 :e int -> x16 x17 x18 :e int)) -> (forall x17 : set -> set, (forall x18, x18 :e int -> x17 x18 :e int) -> (forall x18 : set -> set, (forall x19, x19 :e int -> x18 x19 :e int) -> (forall x19 : set -> set -> set, (forall x20, x20 :e int -> (forall x21, x21 :e int -> x19 x20 x21 :e int)) -> (forall x20 : set -> set -> set, (forall x21, x21 :e int -> (forall x22, x22 :e int -> x20 x21 x22 :e int)) -> (forall x21 : set -> set -> set, (forall x22, x22 :e int -> (forall x23, x23 :e int -> x21 x22 x23 :e int)) -> (forall x22, x22 :e int -> (forall x23, x23 :e int -> (forall x24 : set -> set -> set -> set, (forall x25, x25 :e int -> (forall x26, x26 :e int -> (forall x27, x27 :e int -> x24 x25 x26 x27 :e int))) -> (forall x25 : set -> set -> set -> set, (forall x26, x26 :e int -> (forall x27, x27 :e int -> (forall x28, x28 :e int -> x25 x26 x27 x28 :e int))) -> (forall x26 : set -> set -> set, (forall x27, x27 :e int -> (forall x28, x28 :e int -> x26 x27 x28 :e int)) -> (forall x27 : set -> set -> set, (forall x28, x28 :e int -> (forall x29, x29 :e int -> x27 x28 x29 :e int)) -> (forall x28 : set -> set, (forall x29, x29 :e int -> x28 x29 :e int) -> (forall x29, x29 :e int -> (forall x30 : set -> set -> set, (forall x31, x31 :e int -> (forall x32, x32 :e int -> x30 x31 x32 :e int)) -> (forall x31 : set -> set, (forall x32, x32 :e int -> x31 x32 :e int) -> (forall x32 : set -> set, (forall x33, x33 :e int -> x32 x33 :e int) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x0 x33 x34 = add_SNo (add_SNo (mul_SNo (add_SNo (add_SNo x34 (minus_SNo 1)) x34) (mul_SNo x34 x34)) x33) (mul_SNo 2 (add_SNo (add_SNo x33 x33) x33)))) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x1 x33 x34 = add_SNo x34 x34)) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x2 x33 x34 = x34)) -> x3 = 1 -> x4 = 2 -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> (forall x35, x35 :e int -> x5 x33 x34 x35 = If_i (SNoLe x33 0) x34 (x0 (x5 (add_SNo x33 (minus_SNo 1)) x34 x35) (x6 (add_SNo x33 (minus_SNo 1)) x34 x35))))) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> (forall x35, x35 :e int -> x6 x33 x34 x35 = If_i (SNoLe x33 0) x35 (x1 (x5 (add_SNo x33 (minus_SNo 1)) x34 x35) (x6 (add_SNo x33 (minus_SNo 1)) x34 x35))))) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x7 x33 x34 = x5 (x2 x33 x34) x3 x4)) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x8 x33 x34 = mul_SNo (add_SNo 2 x34) x33)) -> x9 = 2 -> (forall x33, x33 :e int -> x10 x33 = x33) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x11 x33 x34 = If_i (SNoLe x33 0) x34 (x8 (x11 (add_SNo x33 (minus_SNo 1)) x34) x33))) -> (forall x33, x33 :e int -> x12 x33 = x11 x9 (x10 x33)) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x13 x33 x34 = add_SNo (x7 x33 x34) (add_SNo (x12 x33) (minus_SNo x33)))) -> (forall x33, x33 :e int -> x14 x33 = x33) -> x15 = 1 -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x16 x33 x34 = If_i (SNoLe x33 0) x34 (x13 (x16 (add_SNo x33 (minus_SNo 1)) x34) x33))) -> (forall x33, x33 :e int -> x17 x33 = x16 (x14 x33) x15) -> (forall x33, x33 :e int -> x18 x33 = x17 x33) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x19 x33 x34 = add_SNo (add_SNo (mul_SNo (add_SNo (add_SNo x34 (minus_SNo 1)) x34) (mul_SNo x34 x34)) x33) (mul_SNo 2 (add_SNo (add_SNo x33 x33) x33)))) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x20 x33 x34 = add_SNo x34 x34)) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x21 x33 x34 = x34)) -> x22 = 1 -> x23 = 2 -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> (forall x35, x35 :e int -> x24 x33 x34 x35 = If_i (SNoLe x33 0) x34 (x19 (x24 (add_SNo x33 (minus_SNo 1)) x34 x35) (x25 (add_SNo x33 (minus_SNo 1)) x34 x35))))) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> (forall x35, x35 :e int -> x25 x33 x34 x35 = If_i (SNoLe x33 0) x35 (x20 (x24 (add_SNo x33 (minus_SNo 1)) x34 x35) (x25 (add_SNo x33 (minus_SNo 1)) x34 x35))))) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x26 x33 x34 = x24 (x21 x33 x34) x22 x23)) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x27 x33 x34 = add_SNo (add_SNo (x26 x33 x34) (mul_SNo 2 (add_SNo (mul_SNo 2 (add_SNo x33 x33)) x33))) x33)) -> (forall x33, x33 :e int -> x28 x33 = x33) -> x29 = 1 -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x30 x33 x34 = If_i (SNoLe x33 0) x34 (x27 (x30 (add_SNo x33 (minus_SNo 1)) x34) x33))) -> (forall x33, x33 :e int -> x31 x33 = x30 (x28 x33) x29) -> (forall x33, x33 :e int -> x32 x33 = x31 x33) -> (forall x33, x33 :e int -> SNoLe 0 x33 -> x18 x33 = x32 x33)))))))))))))))))))))))))))))))))).
Admitted.
