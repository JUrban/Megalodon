Section Eq.
Variable A:SType.
Definition eq : A->A->prop := fun x y:A => forall Q:A->A->prop, Q x y -> Q y x.
End Eq.
Infix = 502 := eq.
Section Ex.
Variable A:SType.
Definition ex : (A->prop)->prop := fun Q:A->prop => forall P:prop, (forall x:A, Q x -> P) -> P.
End Ex.
(* Unicode exists "2203" *)
Binder+ exists , := ex.
(* Parameter Eps_i "174b78e53fc239e8c2aab4ab5a996a27e3e5741e88070dad186e05fb13f275e5" *)
Parameter Eps_i : (set->prop)->set.
Parameter In:set->set->prop.
Parameter Empty : set.
(* Unicode Union "22C3" *)
Parameter Union : set->set.
(* Unicode Power "1D4AB" *)
Parameter Power : set->set.
Parameter Repl : set -> (set -> set) -> set.
Notation Repl Repl.
Parameter UnivOf : set->set.
(* Parameter int "f7cd39d139f71b389f61d3cf639bf341d01dac1be60ad65b40ee3aa5218e0043" "90ee851305d1ba4b80424ec6e2760ebabb1fd3e399fcb5c6b5c814d898138c16" *)
Parameter int : set.
(* Parameter mul_SNo "f56bf39b8eea93d7f63da529dedb477ae1ab1255c645c47d8915623f364f2d6b" "48d05483e628cb37379dd5d279684d471d85c642fe63533c3ad520b84b18df9d" *)
Parameter mul_SNo : set -> set -> set.
(* Parameter ordsucc "9db634daee7fc36315ddda5f5f694934869921e9c5f55e8b25c91c0a07c5cbec" "65d8837d7b0172ae830bed36c8407fcd41b7d875033d2284eb2df245b42295a6" *)
Parameter ordsucc : set -> set.
Notation Nat Empty ordsucc.
(* Parameter add_SNo "29b9b279a7a5b776b777d842e678a4acaf3b85b17a0223605e4cc68025e9b2a7" "127d043261bd13d57aaeb99e7d2c02cae2bd0698c0d689b03e69f1ac89b3c2c6" *)
Parameter add_SNo : set -> set -> set.
(* Parameter If_i "8c8f550868df4fdc93407b979afa60092db4b1bb96087bc3c2f17fadf3f35cbf" "b8ff52f838d0ff97beb955ee0b26fad79602e1529f8a2854bda0ecd4193a8a3c" *)
Parameter If_i : prop -> set -> set -> set.
(* Parameter SNoLe "09cdd0b9af76352f6b30bf3c4bca346eaa03d280255f13afb2e73fe8329098b6" "ddf7d378c4df6fcdf73e416f8d4c08965e38e50abe1463a0312048d3dd7ac7e9" *)
Parameter SNoLe : set -> set -> prop.
(* Parameter minus_SNo "6d39c64862ac40c95c6f5e4ed5f02bb019279bfb0cda8c9bbe0e1b813b1e876c" "268a6c1da15b8fe97d37be85147bc7767b27098cdae193faac127195e8824808" *)
Parameter minus_SNo : set -> set.
Theorem missingprop_56ff56d24f28c0affe8e0ecb1f7ee48094c11b55ee30af16ffd90c9288d5cbe9 : (forall x0 : set -> set, (forall x1, x1 :e int -> x0 x1 :e int) -> (forall x1 : set -> set, (forall x2, x2 :e int -> x1 x2 :e int) -> (forall x2 : set -> set, (forall x3, x3 :e int -> x2 x3 :e int) -> (forall x3 : set -> set, (forall x4, x4 :e int -> x3 x4 :e int) -> (forall x4, x4 :e int -> (forall x5 : set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> x5 x6 x7 :e int)) -> (forall x6 : set -> set, (forall x7, x7 :e int -> x6 x7 :e int) -> (forall x7 : set -> set, (forall x8, x8 :e int -> x7 x8 :e int) -> (forall x8 : set -> set -> set, (forall x9, x9 :e int -> (forall x10, x10 :e int -> x8 x9 x10 :e int)) -> (forall x9 : set -> set, (forall x10, x10 :e int -> x9 x10 :e int) -> (forall x10 : set -> set, (forall x11, x11 :e int -> x10 x11 :e int) -> (forall x11, x11 :e int -> (forall x12 : set -> set -> set, (forall x13, x13 :e int -> (forall x14, x14 :e int -> x12 x13 x14 :e int)) -> (forall x13 : set -> set -> set, (forall x14, x14 :e int -> (forall x15, x15 :e int -> x13 x14 x15 :e int)) -> (forall x14 : set -> set -> set, (forall x15, x15 :e int -> (forall x16, x16 :e int -> x14 x15 x16 :e int)) -> (forall x15 : set -> set -> set, (forall x16, x16 :e int -> (forall x17, x17 :e int -> x15 x16 x17 :e int)) -> (forall x16 : set -> set -> set, (forall x17, x17 :e int -> (forall x18, x18 :e int -> x16 x17 x18 :e int)) -> (forall x17, x17 :e int -> (forall x18 : set -> set -> set, (forall x19, x19 :e int -> (forall x20, x20 :e int -> x18 x19 x20 :e int)) -> (forall x19 : set -> set -> set, (forall x20, x20 :e int -> (forall x21, x21 :e int -> x19 x20 x21 :e int)) -> (forall x20 : set -> set -> set, (forall x21, x21 :e int -> (forall x22, x22 :e int -> x20 x21 x22 :e int)) -> (forall x21 : set -> set, (forall x22, x22 :e int -> x21 x22 :e int) -> (forall x22, x22 :e int -> (forall x23 : set -> set -> set, (forall x24, x24 :e int -> (forall x25, x25 :e int -> x23 x24 x25 :e int)) -> (forall x24 : set -> set, (forall x25, x25 :e int -> x24 x25 :e int) -> (forall x25 : set -> set, (forall x26, x26 :e int -> x25 x26 :e int) -> (forall x26 : set -> set, (forall x27, x27 :e int -> x26 x27 :e int) -> (forall x27 : set -> set, (forall x28, x28 :e int -> x27 x28 :e int) -> (forall x28 : set -> set, (forall x29, x29 :e int -> x28 x29 :e int) -> (forall x29 : set -> set, (forall x30, x30 :e int -> x29 x30 :e int) -> (forall x30, x30 :e int -> (forall x31 : set -> set -> set, (forall x32, x32 :e int -> (forall x33, x33 :e int -> x31 x32 x33 :e int)) -> (forall x32 : set -> set, (forall x33, x33 :e int -> x32 x33 :e int) -> (forall x33 : set -> set, (forall x34, x34 :e int -> x33 x34 :e int) -> (forall x34 : set -> set -> set, (forall x35, x35 :e int -> (forall x36, x36 :e int -> x34 x35 x36 :e int)) -> (forall x35 : set -> set, (forall x36, x36 :e int -> x35 x36 :e int) -> (forall x36 : set -> set, (forall x37, x37 :e int -> x36 x37 :e int) -> (forall x37, x37 :e int -> (forall x38 : set -> set -> set, (forall x39, x39 :e int -> (forall x40, x40 :e int -> x38 x39 x40 :e int)) -> (forall x39 : set -> set -> set, (forall x40, x40 :e int -> (forall x41, x41 :e int -> x39 x40 x41 :e int)) -> (forall x40 : set -> set -> set, (forall x41, x41 :e int -> (forall x42, x42 :e int -> x40 x41 x42 :e int)) -> (forall x41 : set -> set -> set, (forall x42, x42 :e int -> (forall x43, x43 :e int -> x41 x42 x43 :e int)) -> (forall x42 : set -> set, (forall x43, x43 :e int -> x42 x43 :e int) -> (forall x43, x43 :e int -> (forall x44 : set -> set -> set, (forall x45, x45 :e int -> (forall x46, x46 :e int -> x44 x45 x46 :e int)) -> (forall x45 : set -> set, (forall x46, x46 :e int -> x45 x46 :e int) -> (forall x46 : set -> set, (forall x47, x47 :e int -> x46 x47 :e int) -> (forall x47 : set -> set, (forall x48, x48 :e int -> x47 x48 :e int) -> (forall x48, x48 :e int -> (forall x49 : set -> set -> set, (forall x50, x50 :e int -> (forall x51, x51 :e int -> x49 x50 x51 :e int)) -> (forall x50 : set -> set, (forall x51, x51 :e int -> x50 x51 :e int) -> (forall x51 : set -> set, (forall x52, x52 :e int -> x51 x52 :e int) -> (forall x52, x52 :e int -> (forall x53 : set -> set -> set, (forall x54, x54 :e int -> (forall x55, x55 :e int -> x53 x54 x55 :e int)) -> (forall x54 : set -> set -> set, (forall x55, x55 :e int -> (forall x56, x56 :e int -> x54 x55 x56 :e int)) -> (forall x55 : set -> set -> set, (forall x56, x56 :e int -> (forall x57, x57 :e int -> x55 x56 x57 :e int)) -> (forall x56 : set -> set -> set, (forall x57, x57 :e int -> (forall x58, x58 :e int -> x56 x57 x58 :e int)) -> (forall x57 : set -> set, (forall x58, x58 :e int -> x57 x58 :e int) -> (forall x58, x58 :e int -> (forall x59 : set -> set -> set, (forall x60, x60 :e int -> (forall x61, x61 :e int -> x59 x60 x61 :e int)) -> (forall x60 : set -> set, (forall x61, x61 :e int -> x60 x61 :e int) -> (forall x61 : set -> set, (forall x62, x62 :e int -> x61 x62 :e int) -> (forall x62, x62 :e int -> x0 x62 = mul_SNo 2 (add_SNo (add_SNo x62 x62) x62)) -> (forall x62, x62 :e int -> x1 x62 = x62) -> (forall x62, x62 :e int -> x2 x62 = add_SNo x62 x62) -> (forall x62, x62 :e int -> x3 x62 = x62) -> x4 = 2 -> (forall x62, x62 :e int -> (forall x63, x63 :e int -> x5 x62 x63 = If_i (SNoLe x62 0) x63 (x2 (x5 (add_SNo x62 (minus_SNo 1)) x63)))) -> (forall x62, x62 :e int -> x6 x62 = x5 (x3 x62) x4) -> (forall x62, x62 :e int -> x7 x62 = add_SNo (x6 x62) (minus_SNo 1)) -> (forall x62, x62 :e int -> (forall x63, x63 :e int -> x8 x62 x63 = If_i (SNoLe x62 0) x63 (x0 (x8 (add_SNo x62 (minus_SNo 1)) x63)))) -> (forall x62, x62 :e int -> x9 x62 = x8 (x1 x62) (x7 x62)) -> (forall x62, x62 :e int -> x10 x62 = x9 x62) -> x11 = 1 -> (forall x62, x62 :e int -> (forall x63, x63 :e int -> x12 x62 x63 = x63)) -> (forall x62, x62 :e int -> (forall x63, x63 :e int -> x13 x62 x63 = If_i (SNoLe x62 0) x63 (x10 (x13 (add_SNo x62 (minus_SNo 1)) x63)))) -> (forall x62, x62 :e int -> (forall x63, x63 :e int -> x14 x62 x63 = x13 x11 (x12 x62 x63))) -> (forall x62, x62 :e int -> (forall x63, x63 :e int -> x15 x62 x63 = add_SNo (x14 x62 x63) (mul_SNo 2 (add_SNo x62 x62)))) -> (forall x62, x62 :e int -> (forall x63, x63 :e int -> x16 x62 x63 = x63)) -> x17 = 1 -> (forall x62, x62 :e int -> (forall x63, x63 :e int -> x18 x62 x63 = If_i (SNoLe x62 0) x63 (x15 (x18 (add_SNo x62 (minus_SNo 1)) x63) x62))) -> (forall x62, x62 :e int -> (forall x63, x63 :e int -> x19 x62 x63 = x18 (x16 x62 x63) x17)) -> (forall x62, x62 :e int -> (forall x63, x63 :e int -> x20 x62 x63 = add_SNo (add_SNo (x19 x62 x63) (mul_SNo 2 (add_SNo (mul_SNo 2 (add_SNo x62 x62)) x62))) x62)) -> (forall x62, x62 :e int -> x21 x62 = x62) -> x22 = 1 -> (forall x62, x62 :e int -> (forall x63, x63 :e int -> x23 x62 x63 = If_i (SNoLe x62 0) x63 (x20 (x23 (add_SNo x62 (minus_SNo 1)) x63) x62))) -> (forall x62, x62 :e int -> x24 x62 = x23 (x21 x62) x22) -> (forall x62, x62 :e int -> x25 x62 = x24 x62) -> (forall x62, x62 :e int -> x26 x62 = add_SNo (add_SNo x62 x62) x62) -> (forall x62, x62 :e int -> x27 x62 = x62) -> (forall x62, x62 :e int -> x28 x62 = add_SNo x62 x62) -> (forall x62, x62 :e int -> x29 x62 = x62) -> x30 = 2 -> (forall x62, x62 :e int -> (forall x63, x63 :e int -> x31 x62 x63 = If_i (SNoLe x62 0) x63 (x28 (x31 (add_SNo x62 (minus_SNo 1)) x63)))) -> (forall x62, x62 :e int -> x32 x62 = x31 (x29 x62) x30) -> (forall x62, x62 :e int -> x33 x62 = add_SNo (x32 x62) (minus_SNo 1)) -> (forall x62, x62 :e int -> (forall x63, x63 :e int -> x34 x62 x63 = If_i (SNoLe x62 0) x63 (x26 (x34 (add_SNo x62 (minus_SNo 1)) x63)))) -> (forall x62, x62 :e int -> x35 x62 = x34 (x27 x62) (x33 x62)) -> (forall x62, x62 :e int -> x36 x62 = x35 x62) -> x37 = 1 -> (forall x62, x62 :e int -> (forall x63, x63 :e int -> x38 x62 x63 = x63)) -> (forall x62, x62 :e int -> (forall x63, x63 :e int -> x39 x62 x63 = If_i (SNoLe x62 0) x63 (x36 (x39 (add_SNo x62 (minus_SNo 1)) x63)))) -> (forall x62, x62 :e int -> (forall x63, x63 :e int -> x40 x62 x63 = x39 x37 (x38 x62 x63))) -> (forall x62, x62 :e int -> (forall x63, x63 :e int -> x41 x62 x63 = add_SNo (add_SNo (x40 x62 x63) x62) x62)) -> (forall x62, x62 :e int -> x42 x62 = x62) -> x43 = 1 -> (forall x62, x62 :e int -> (forall x63, x63 :e int -> x44 x62 x63 = If_i (SNoLe x62 0) x63 (x41 (x44 (add_SNo x62 (minus_SNo 1)) x63) x62))) -> (forall x62, x62 :e int -> x45 x62 = x44 (x42 x62) x43) -> (forall x62, x62 :e int -> x46 x62 = add_SNo x62 x62) -> (forall x62, x62 :e int -> x47 x62 = x62) -> x48 = 1 -> (forall x62, x62 :e int -> (forall x63, x63 :e int -> x49 x62 x63 = If_i (SNoLe x62 0) x63 (x46 (x49 (add_SNo x62 (minus_SNo 1)) x63)))) -> (forall x62, x62 :e int -> x50 x62 = x49 (x47 x62) x48) -> (forall x62, x62 :e int -> x51 x62 = mul_SNo (x45 x62) (x50 x62)) -> x52 = 1 -> (forall x62, x62 :e int -> (forall x63, x63 :e int -> x53 x62 x63 = x63)) -> (forall x62, x62 :e int -> (forall x63, x63 :e int -> x54 x62 x63 = If_i (SNoLe x62 0) x63 (x51 (x54 (add_SNo x62 (minus_SNo 1)) x63)))) -> (forall x62, x62 :e int -> (forall x63, x63 :e int -> x55 x62 x63 = x54 x52 (x53 x62 x63))) -> (forall x62, x62 :e int -> (forall x63, x63 :e int -> x56 x62 x63 = add_SNo (add_SNo (x55 x62 x63) (mul_SNo 2 (add_SNo (mul_SNo 2 (add_SNo x62 x62)) x62))) x62)) -> (forall x62, x62 :e int -> x57 x62 = x62) -> x58 = 1 -> (forall x62, x62 :e int -> (forall x63, x63 :e int -> x59 x62 x63 = If_i (SNoLe x62 0) x63 (x56 (x59 (add_SNo x62 (minus_SNo 1)) x63) x62))) -> (forall x62, x62 :e int -> x60 x62 = x59 (x57 x62) x58) -> (forall x62, x62 :e int -> x61 x62 = x60 x62) -> (forall x62, x62 :e int -> SNoLe 0 x62 -> x25 x62 = x61 x62))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_0c877528159b9899c10bafb766f5255ef51ec2690c2d3af34f8de10483e3aeea : (forall x0 : set -> set -> set, (forall x1, x1 :e int -> (forall x2, x2 :e int -> x0 x1 x2 :e int)) -> (forall x1 : set -> set -> set, (forall x2, x2 :e int -> (forall x3, x3 :e int -> x1 x2 x3 :e int)) -> (forall x2 : set -> set, (forall x3, x3 :e int -> x2 x3 :e int) -> (forall x3, x3 :e int -> (forall x4, x4 :e int -> (forall x5 : set -> set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> (forall x8, x8 :e int -> x5 x6 x7 x8 :e int))) -> (forall x6 : set -> set -> set -> set, (forall x7, x7 :e int -> (forall x8, x8 :e int -> (forall x9, x9 :e int -> x6 x7 x8 x9 :e int))) -> (forall x7 : set -> set, (forall x8, x8 :e int -> x7 x8 :e int) -> (forall x8 : set -> set, (forall x9, x9 :e int -> x8 x9 :e int) -> (forall x9 : set -> set, (forall x10, x10 :e int -> x9 x10 :e int) -> (forall x10, x10 :e int -> (forall x11 : set -> set -> set, (forall x12, x12 :e int -> (forall x13, x13 :e int -> x11 x12 x13 :e int)) -> (forall x12 : set -> set, (forall x13, x13 :e int -> x12 x13 :e int) -> (forall x13 : set -> set, (forall x14, x14 :e int -> x13 x14 :e int) -> (forall x14, x14 :e int -> (forall x15 : set -> set -> set, (forall x16, x16 :e int -> (forall x17, x17 :e int -> x15 x16 x17 :e int)) -> (forall x16 : set -> set -> set, (forall x17, x17 :e int -> (forall x18, x18 :e int -> x16 x17 x18 :e int)) -> (forall x17 : set -> set -> set, (forall x18, x18 :e int -> (forall x19, x19 :e int -> x17 x18 x19 :e int)) -> (forall x18 : set -> set -> set, (forall x19, x19 :e int -> (forall x20, x20 :e int -> x18 x19 x20 :e int)) -> (forall x19 : set -> set, (forall x20, x20 :e int -> x19 x20 :e int) -> (forall x20, x20 :e int -> (forall x21 : set -> set -> set, (forall x22, x22 :e int -> (forall x23, x23 :e int -> x21 x22 x23 :e int)) -> (forall x22 : set -> set, (forall x23, x23 :e int -> x22 x23 :e int) -> (forall x23 : set -> set, (forall x24, x24 :e int -> x23 x24 :e int) -> (forall x24 : set -> set -> set, (forall x25, x25 :e int -> (forall x26, x26 :e int -> x24 x25 x26 :e int)) -> (forall x25 : set -> set -> set, (forall x26, x26 :e int -> (forall x27, x27 :e int -> x25 x26 x27 :e int)) -> (forall x26 : set -> set, (forall x27, x27 :e int -> x26 x27 :e int) -> (forall x27, x27 :e int -> (forall x28, x28 :e int -> (forall x29 : set -> set -> set -> set, (forall x30, x30 :e int -> (forall x31, x31 :e int -> (forall x32, x32 :e int -> x29 x30 x31 x32 :e int))) -> (forall x30 : set -> set -> set -> set, (forall x31, x31 :e int -> (forall x32, x32 :e int -> (forall x33, x33 :e int -> x30 x31 x32 x33 :e int))) -> (forall x31 : set -> set, (forall x32, x32 :e int -> x31 x32 :e int) -> (forall x32 : set -> set -> set, (forall x33, x33 :e int -> (forall x34, x34 :e int -> x32 x33 x34 :e int)) -> (forall x33 : set -> set -> set, (forall x34, x34 :e int -> (forall x35, x35 :e int -> x33 x34 x35 :e int)) -> (forall x34 : set -> set, (forall x35, x35 :e int -> x34 x35 :e int) -> (forall x35, x35 :e int -> (forall x36, x36 :e int -> (forall x37 : set -> set -> set -> set, (forall x38, x38 :e int -> (forall x39, x39 :e int -> (forall x40, x40 :e int -> x37 x38 x39 x40 :e int))) -> (forall x38 : set -> set -> set -> set, (forall x39, x39 :e int -> (forall x40, x40 :e int -> (forall x41, x41 :e int -> x38 x39 x40 x41 :e int))) -> (forall x39 : set -> set, (forall x40, x40 :e int -> x39 x40 :e int) -> (forall x40 : set -> set, (forall x41, x41 :e int -> x40 x41 :e int) -> (forall x41, x41 :e int -> (forall x42 : set -> set -> set, (forall x43, x43 :e int -> (forall x44, x44 :e int -> x42 x43 x44 :e int)) -> (forall x43 : set -> set -> set, (forall x44, x44 :e int -> (forall x45, x45 :e int -> x43 x44 x45 :e int)) -> (forall x44 : set -> set -> set, (forall x45, x45 :e int -> (forall x46, x46 :e int -> x44 x45 x46 :e int)) -> (forall x45 : set -> set -> set, (forall x46, x46 :e int -> (forall x47, x47 :e int -> x45 x46 x47 :e int)) -> (forall x46 : set -> set, (forall x47, x47 :e int -> x46 x47 :e int) -> (forall x47, x47 :e int -> (forall x48 : set -> set -> set, (forall x49, x49 :e int -> (forall x50, x50 :e int -> x48 x49 x50 :e int)) -> (forall x49 : set -> set, (forall x50, x50 :e int -> x49 x50 :e int) -> (forall x50 : set -> set, (forall x51, x51 :e int -> x50 x51 :e int) -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x0 x51 x52 = add_SNo (add_SNo (mul_SNo 2 (add_SNo (mul_SNo x52 x52) x51)) (minus_SNo x52)) x51)) -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x1 x51 x52 = add_SNo x52 x52)) -> (forall x51, x51 :e int -> x2 x51 = x51) -> x3 = 1 -> x4 = 2 -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> (forall x53, x53 :e int -> x5 x51 x52 x53 = If_i (SNoLe x51 0) x52 (x0 (x5 (add_SNo x51 (minus_SNo 1)) x52 x53) (x6 (add_SNo x51 (minus_SNo 1)) x52 x53))))) -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> (forall x53, x53 :e int -> x6 x51 x52 x53 = If_i (SNoLe x51 0) x53 (x1 (x5 (add_SNo x51 (minus_SNo 1)) x52 x53) (x6 (add_SNo x51 (minus_SNo 1)) x52 x53))))) -> (forall x51, x51 :e int -> x7 x51 = x5 (x2 x51) x3 x4) -> (forall x51, x51 :e int -> x8 x51 = add_SNo (add_SNo x51 x51) x51) -> (forall x51, x51 :e int -> x9 x51 = x51) -> x10 = 1 -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x11 x51 x52 = If_i (SNoLe x51 0) x52 (x8 (x11 (add_SNo x51 (minus_SNo 1)) x52)))) -> (forall x51, x51 :e int -> x12 x51 = x11 (x9 x51) x10) -> (forall x51, x51 :e int -> x13 x51 = mul_SNo (x7 x51) (x12 x51)) -> x14 = 1 -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x15 x51 x52 = x52)) -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x16 x51 x52 = If_i (SNoLe x51 0) x52 (x13 (x16 (add_SNo x51 (minus_SNo 1)) x52)))) -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x17 x51 x52 = x16 x14 (x15 x51 x52))) -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x18 x51 x52 = add_SNo (x17 x51 x52) (mul_SNo 2 (add_SNo x51 x51)))) -> (forall x51, x51 :e int -> x19 x51 = x51) -> x20 = 1 -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x21 x51 x52 = If_i (SNoLe x51 0) x52 (x18 (x21 (add_SNo x51 (minus_SNo 1)) x52) x51))) -> (forall x51, x51 :e int -> x22 x51 = x21 (x19 x51) x20) -> (forall x51, x51 :e int -> x23 x51 = x22 x51) -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x24 x51 x52 = add_SNo (add_SNo (mul_SNo 2 (add_SNo (mul_SNo x52 x52) x51)) (minus_SNo x52)) x51)) -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x25 x51 x52 = add_SNo x52 x52)) -> (forall x51, x51 :e int -> x26 x51 = x51) -> x27 = 1 -> x28 = 2 -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> (forall x53, x53 :e int -> x29 x51 x52 x53 = If_i (SNoLe x51 0) x52 (x24 (x29 (add_SNo x51 (minus_SNo 1)) x52 x53) (x30 (add_SNo x51 (minus_SNo 1)) x52 x53))))) -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> (forall x53, x53 :e int -> x30 x51 x52 x53 = If_i (SNoLe x51 0) x53 (x25 (x29 (add_SNo x51 (minus_SNo 1)) x52 x53) (x30 (add_SNo x51 (minus_SNo 1)) x52 x53))))) -> (forall x51, x51 :e int -> x31 x51 = x29 (x26 x51) x27 x28) -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x32 x51 x52 = mul_SNo x51 x52)) -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x33 x51 x52 = x52)) -> (forall x51, x51 :e int -> x34 x51 = x51) -> x35 = 1 -> x36 = add_SNo 1 2 -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> (forall x53, x53 :e int -> x37 x51 x52 x53 = If_i (SNoLe x51 0) x52 (x32 (x37 (add_SNo x51 (minus_SNo 1)) x52 x53) (x38 (add_SNo x51 (minus_SNo 1)) x52 x53))))) -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> (forall x53, x53 :e int -> x38 x51 x52 x53 = If_i (SNoLe x51 0) x53 (x33 (x37 (add_SNo x51 (minus_SNo 1)) x52 x53) (x38 (add_SNo x51 (minus_SNo 1)) x52 x53))))) -> (forall x51, x51 :e int -> x39 x51 = x37 (x34 x51) x35 x36) -> (forall x51, x51 :e int -> x40 x51 = mul_SNo (x31 x51) (x39 x51)) -> x41 = 1 -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x42 x51 x52 = x52)) -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x43 x51 x52 = If_i (SNoLe x51 0) x52 (x40 (x43 (add_SNo x51 (minus_SNo 1)) x52)))) -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x44 x51 x52 = x43 x41 (x42 x51 x52))) -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x45 x51 x52 = add_SNo (x44 x51 x52) (mul_SNo 2 (add_SNo x51 x51)))) -> (forall x51, x51 :e int -> x46 x51 = x51) -> x47 = 1 -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x48 x51 x52 = If_i (SNoLe x51 0) x52 (x45 (x48 (add_SNo x51 (minus_SNo 1)) x52) x51))) -> (forall x51, x51 :e int -> x49 x51 = x48 (x46 x51) x47) -> (forall x51, x51 :e int -> x50 x51 = x49 x51) -> (forall x51, x51 :e int -> SNoLe 0 x51 -> x23 x51 = x50 x51)))))))))))))))))))))))))))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_5931b5bd95dc15e108b04edb7a5fc21e48f31a24260989b6d8f995261896f0f1 : (forall x0 : set -> set, (forall x1, x1 :e int -> x0 x1 :e int) -> (forall x1 : set -> set -> set, (forall x2, x2 :e int -> (forall x3, x3 :e int -> x1 x2 x3 :e int)) -> (forall x2, x2 :e int -> (forall x3 : set -> set -> set, (forall x4, x4 :e int -> (forall x5, x5 :e int -> x3 x4 x5 :e int)) -> (forall x4 : set -> set -> set, (forall x5, x5 :e int -> (forall x6, x6 :e int -> x4 x5 x6 :e int)) -> (forall x5 : set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> x5 x6 x7 :e int)) -> (forall x6 : set -> set -> set, (forall x7, x7 :e int -> (forall x8, x8 :e int -> x6 x7 x8 :e int)) -> (forall x7, x7 :e int -> (forall x8 : set -> set -> set, (forall x9, x9 :e int -> (forall x10, x10 :e int -> x8 x9 x10 :e int)) -> (forall x9 : set -> set -> set, (forall x10, x10 :e int -> (forall x11, x11 :e int -> x9 x10 x11 :e int)) -> (forall x10 : set -> set -> set, (forall x11, x11 :e int -> (forall x12, x12 :e int -> x10 x11 x12 :e int)) -> (forall x11 : set -> set -> set, (forall x12, x12 :e int -> (forall x13, x13 :e int -> x11 x12 x13 :e int)) -> (forall x12, x12 :e int -> (forall x13 : set -> set -> set, (forall x14, x14 :e int -> (forall x15, x15 :e int -> x13 x14 x15 :e int)) -> (forall x14 : set -> set -> set, (forall x15, x15 :e int -> (forall x16, x16 :e int -> x14 x15 x16 :e int)) -> (forall x15 : set -> set -> set, (forall x16, x16 :e int -> (forall x17, x17 :e int -> x15 x16 x17 :e int)) -> (forall x16 : set -> set, (forall x17, x17 :e int -> x16 x17 :e int) -> (forall x17, x17 :e int -> (forall x18 : set -> set -> set, (forall x19, x19 :e int -> (forall x20, x20 :e int -> x18 x19 x20 :e int)) -> (forall x19 : set -> set, (forall x20, x20 :e int -> x19 x20 :e int) -> (forall x20 : set -> set, (forall x21, x21 :e int -> x20 x21 :e int) -> (forall x21 : set -> set -> set, (forall x22, x22 :e int -> (forall x23, x23 :e int -> x21 x22 x23 :e int)) -> (forall x22 : set -> set -> set, (forall x23, x23 :e int -> (forall x24, x24 :e int -> x22 x23 x24 :e int)) -> (forall x23 : set -> set -> set, (forall x24, x24 :e int -> (forall x25, x25 :e int -> x23 x24 x25 :e int)) -> (forall x24, x24 :e int -> (forall x25, x25 :e int -> (forall x26 : set -> set -> set -> set, (forall x27, x27 :e int -> (forall x28, x28 :e int -> (forall x29, x29 :e int -> x26 x27 x28 x29 :e int))) -> (forall x27 : set -> set -> set -> set, (forall x28, x28 :e int -> (forall x29, x29 :e int -> (forall x30, x30 :e int -> x27 x28 x29 x30 :e int))) -> (forall x28 : set -> set -> set, (forall x29, x29 :e int -> (forall x30, x30 :e int -> x28 x29 x30 :e int)) -> (forall x29 : set -> set -> set, (forall x30, x30 :e int -> (forall x31, x31 :e int -> x29 x30 x31 :e int)) -> (forall x30 : set -> set, (forall x31, x31 :e int -> x30 x31 :e int) -> (forall x31, x31 :e int -> (forall x32 : set -> set -> set, (forall x33, x33 :e int -> (forall x34, x34 :e int -> x32 x33 x34 :e int)) -> (forall x33 : set -> set, (forall x34, x34 :e int -> x33 x34 :e int) -> (forall x34 : set -> set, (forall x35, x35 :e int -> x34 x35 :e int) -> (forall x35 : set -> set, (forall x36, x36 :e int -> x35 x36 :e int) -> (forall x36, x36 :e int -> (forall x37 : set -> set -> set, (forall x38, x38 :e int -> (forall x39, x39 :e int -> x37 x38 x39 :e int)) -> (forall x38 : set -> set, (forall x39, x39 :e int -> x38 x39 :e int) -> (forall x39 : set -> set, (forall x40, x40 :e int -> x39 x40 :e int) -> (forall x40, x40 :e int -> (forall x41 : set -> set -> set, (forall x42, x42 :e int -> (forall x43, x43 :e int -> x41 x42 x43 :e int)) -> (forall x42 : set -> set -> set, (forall x43, x43 :e int -> (forall x44, x44 :e int -> x42 x43 x44 :e int)) -> (forall x43 : set -> set -> set, (forall x44, x44 :e int -> (forall x45, x45 :e int -> x43 x44 x45 :e int)) -> (forall x44 : set -> set -> set, (forall x45, x45 :e int -> (forall x46, x46 :e int -> x44 x45 x46 :e int)) -> (forall x45 : set -> set, (forall x46, x46 :e int -> x45 x46 :e int) -> (forall x46, x46 :e int -> (forall x47 : set -> set -> set, (forall x48, x48 :e int -> (forall x49, x49 :e int -> x47 x48 x49 :e int)) -> (forall x48 : set -> set, (forall x49, x49 :e int -> x48 x49 :e int) -> (forall x49 : set -> set, (forall x50, x50 :e int -> x49 x50 :e int) -> (forall x50, x50 :e int -> x0 x50 = add_SNo (add_SNo x50 x50) x50) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x1 x50 x51 = add_SNo x51 x51)) -> x2 = 1 -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x3 x50 x51 = If_i (SNoLe x50 0) x51 (x0 (x3 (add_SNo x50 (minus_SNo 1)) x51)))) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x4 x50 x51 = x3 (x1 x50 x51) x2)) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x5 x50 x51 = add_SNo (x4 x50 x51) (mul_SNo 2 (add_SNo (add_SNo x50 x50) x50)))) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x6 x50 x51 = x51)) -> x7 = 1 -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x8 x50 x51 = If_i (SNoLe x50 0) x51 (x5 (x8 (add_SNo x50 (minus_SNo 1)) x51) x50))) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x9 x50 x51 = x8 (x6 x50 x51) x7)) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x10 x50 x51 = add_SNo (x9 x50 x51) (mul_SNo 2 (add_SNo (mul_SNo 2 (add_SNo x50 x50)) x50)))) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x11 x50 x51 = x51)) -> x12 = 1 -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x13 x50 x51 = If_i (SNoLe x50 0) x51 (x10 (x13 (add_SNo x50 (minus_SNo 1)) x51) x50))) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x14 x50 x51 = x13 (x11 x50 x51) x12)) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x15 x50 x51 = add_SNo (x14 x50 x51) (mul_SNo 2 (add_SNo x50 x50)))) -> (forall x50, x50 :e int -> x16 x50 = x50) -> x17 = 1 -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x18 x50 x51 = If_i (SNoLe x50 0) x51 (x15 (x18 (add_SNo x50 (minus_SNo 1)) x51) x50))) -> (forall x50, x50 :e int -> x19 x50 = x18 (x16 x50) x17) -> (forall x50, x50 :e int -> x20 x50 = x19 x50) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x21 x50 x51 = add_SNo (add_SNo (add_SNo x50 x50) x50) x51)) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x22 x50 x51 = add_SNo x51 x51)) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x23 x50 x51 = x51)) -> x24 = 1 -> x25 = 2 -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x26 x50 x51 x52 = If_i (SNoLe x50 0) x51 (x21 (x26 (add_SNo x50 (minus_SNo 1)) x51 x52) (x27 (add_SNo x50 (minus_SNo 1)) x51 x52))))) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x27 x50 x51 x52 = If_i (SNoLe x50 0) x52 (x22 (x26 (add_SNo x50 (minus_SNo 1)) x51 x52) (x27 (add_SNo x50 (minus_SNo 1)) x51 x52))))) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x28 x50 x51 = x26 (x23 x50 x51) x24 x25)) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x29 x50 x51 = add_SNo (add_SNo (x28 x50 x51) (mul_SNo 2 (add_SNo x50 x50))) x50)) -> (forall x50, x50 :e int -> x30 x50 = x50) -> x31 = 1 -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x32 x50 x51 = If_i (SNoLe x50 0) x51 (x29 (x32 (add_SNo x50 (minus_SNo 1)) x51) x50))) -> (forall x50, x50 :e int -> x33 x50 = x32 (x30 x50) x31) -> (forall x50, x50 :e int -> x34 x50 = add_SNo x50 x50) -> (forall x50, x50 :e int -> x35 x50 = x50) -> x36 = 1 -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x37 x50 x51 = If_i (SNoLe x50 0) x51 (x34 (x37 (add_SNo x50 (minus_SNo 1)) x51)))) -> (forall x50, x50 :e int -> x38 x50 = x37 (x35 x50) x36) -> (forall x50, x50 :e int -> x39 x50 = mul_SNo (x33 x50) (x38 x50)) -> x40 = 1 -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x41 x50 x51 = x51)) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x42 x50 x51 = If_i (SNoLe x50 0) x51 (x39 (x42 (add_SNo x50 (minus_SNo 1)) x51)))) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x43 x50 x51 = x42 x40 (x41 x50 x51))) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x44 x50 x51 = add_SNo (add_SNo (x43 x50 x51) (mul_SNo 2 (mul_SNo 2 (add_SNo x50 x50)))) x50)) -> (forall x50, x50 :e int -> x45 x50 = x50) -> x46 = 1 -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x47 x50 x51 = If_i (SNoLe x50 0) x51 (x44 (x47 (add_SNo x50 (minus_SNo 1)) x51) x50))) -> (forall x50, x50 :e int -> x48 x50 = x47 (x45 x50) x46) -> (forall x50, x50 :e int -> x49 x50 = x48 x50) -> (forall x50, x50 :e int -> SNoLe 0 x50 -> x20 x50 = x49 x50))))))))))))))))))))))))))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_5f835b3854892a9d8e37021875c6157647f511c3212880fcb9b355a2244d00ea : (forall x0 : set -> set -> set, (forall x1, x1 :e int -> (forall x2, x2 :e int -> x0 x1 x2 :e int)) -> (forall x1 : set -> set -> set, (forall x2, x2 :e int -> (forall x3, x3 :e int -> x1 x2 x3 :e int)) -> (forall x2 : set -> set -> set, (forall x3, x3 :e int -> (forall x4, x4 :e int -> x2 x3 x4 :e int)) -> (forall x3, x3 :e int -> (forall x4, x4 :e int -> (forall x5 : set -> set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> (forall x8, x8 :e int -> x5 x6 x7 x8 :e int))) -> (forall x6 : set -> set -> set -> set, (forall x7, x7 :e int -> (forall x8, x8 :e int -> (forall x9, x9 :e int -> x6 x7 x8 x9 :e int))) -> (forall x7 : set -> set -> set, (forall x8, x8 :e int -> (forall x9, x9 :e int -> x7 x8 x9 :e int)) -> (forall x8 : set -> set -> set, (forall x9, x9 :e int -> (forall x10, x10 :e int -> x8 x9 x10 :e int)) -> (forall x9 : set -> set, (forall x10, x10 :e int -> x9 x10 :e int) -> (forall x10, x10 :e int -> (forall x11 : set -> set -> set, (forall x12, x12 :e int -> (forall x13, x13 :e int -> x11 x12 x13 :e int)) -> (forall x12 : set -> set, (forall x13, x13 :e int -> x12 x13 :e int) -> (forall x13 : set -> set, (forall x14, x14 :e int -> x13 x14 :e int) -> (forall x14 : set -> set -> set, (forall x15, x15 :e int -> (forall x16, x16 :e int -> x14 x15 x16 :e int)) -> (forall x15 : set -> set -> set, (forall x16, x16 :e int -> (forall x17, x17 :e int -> x15 x16 x17 :e int)) -> (forall x16 : set -> set, (forall x17, x17 :e int -> x16 x17 :e int) -> (forall x17, x17 :e int -> (forall x18, x18 :e int -> (forall x19 : set -> set -> set -> set, (forall x20, x20 :e int -> (forall x21, x21 :e int -> (forall x22, x22 :e int -> x19 x20 x21 x22 :e int))) -> (forall x20 : set -> set -> set -> set, (forall x21, x21 :e int -> (forall x22, x22 :e int -> (forall x23, x23 :e int -> x20 x21 x22 x23 :e int))) -> (forall x21 : set -> set, (forall x22, x22 :e int -> x21 x22 :e int) -> (forall x22 : set -> set, (forall x23, x23 :e int -> x22 x23 :e int) -> (forall x23 : set -> set, (forall x24, x24 :e int -> x23 x24 :e int) -> (forall x24, x24 :e int -> (forall x25 : set -> set -> set, (forall x26, x26 :e int -> (forall x27, x27 :e int -> x25 x26 x27 :e int)) -> (forall x26 : set -> set, (forall x27, x27 :e int -> x26 x27 :e int) -> (forall x27 : set -> set, (forall x28, x28 :e int -> x27 x28 :e int) -> (forall x28, x28 :e int -> (forall x29 : set -> set -> set, (forall x30, x30 :e int -> (forall x31, x31 :e int -> x29 x30 x31 :e int)) -> (forall x30 : set -> set -> set, (forall x31, x31 :e int -> (forall x32, x32 :e int -> x30 x31 x32 :e int)) -> (forall x31 : set -> set -> set, (forall x32, x32 :e int -> (forall x33, x33 :e int -> x31 x32 x33 :e int)) -> (forall x32 : set -> set -> set, (forall x33, x33 :e int -> (forall x34, x34 :e int -> x32 x33 x34 :e int)) -> (forall x33 : set -> set, (forall x34, x34 :e int -> x33 x34 :e int) -> (forall x34, x34 :e int -> (forall x35 : set -> set -> set, (forall x36, x36 :e int -> (forall x37, x37 :e int -> x35 x36 x37 :e int)) -> (forall x36 : set -> set, (forall x37, x37 :e int -> x36 x37 :e int) -> (forall x37 : set -> set, (forall x38, x38 :e int -> x37 x38 :e int) -> (forall x38, x38 :e int -> (forall x39, x39 :e int -> x0 x38 x39 = add_SNo (add_SNo (mul_SNo (add_SNo (add_SNo x39 (minus_SNo 1)) x39) (mul_SNo x39 x39)) x38) (mul_SNo 2 (add_SNo (add_SNo x38 x38) x38)))) -> (forall x38, x38 :e int -> (forall x39, x39 :e int -> x1 x38 x39 = add_SNo x39 x39)) -> (forall x38, x38 :e int -> (forall x39, x39 :e int -> x2 x38 x39 = x39)) -> x3 = 1 -> x4 = 2 -> (forall x38, x38 :e int -> (forall x39, x39 :e int -> (forall x40, x40 :e int -> x5 x38 x39 x40 = If_i (SNoLe x38 0) x39 (x0 (x5 (add_SNo x38 (minus_SNo 1)) x39 x40) (x6 (add_SNo x38 (minus_SNo 1)) x39 x40))))) -> (forall x38, x38 :e int -> (forall x39, x39 :e int -> (forall x40, x40 :e int -> x6 x38 x39 x40 = If_i (SNoLe x38 0) x40 (x1 (x5 (add_SNo x38 (minus_SNo 1)) x39 x40) (x6 (add_SNo x38 (minus_SNo 1)) x39 x40))))) -> (forall x38, x38 :e int -> (forall x39, x39 :e int -> x7 x38 x39 = x5 (x2 x38 x39) x3 x4)) -> (forall x38, x38 :e int -> (forall x39, x39 :e int -> x8 x38 x39 = add_SNo (x7 x38 x39) (mul_SNo 2 (add_SNo (add_SNo x38 x38) x38)))) -> (forall x38, x38 :e int -> x9 x38 = x38) -> x10 = 1 -> (forall x38, x38 :e int -> (forall x39, x39 :e int -> x11 x38 x39 = If_i (SNoLe x38 0) x39 (x8 (x11 (add_SNo x38 (minus_SNo 1)) x39) x38))) -> (forall x38, x38 :e int -> x12 x38 = x11 (x9 x38) x10) -> (forall x38, x38 :e int -> x13 x38 = x12 x38) -> (forall x38, x38 :e int -> (forall x39, x39 :e int -> x14 x38 x39 = add_SNo (add_SNo (mul_SNo 2 (add_SNo (mul_SNo x39 x39) x38)) (minus_SNo x39)) x38)) -> (forall x38, x38 :e int -> (forall x39, x39 :e int -> x15 x38 x39 = add_SNo x39 x39)) -> (forall x38, x38 :e int -> x16 x38 = x38) -> x17 = 1 -> x18 = 2 -> (forall x38, x38 :e int -> (forall x39, x39 :e int -> (forall x40, x40 :e int -> x19 x38 x39 x40 = If_i (SNoLe x38 0) x39 (x14 (x19 (add_SNo x38 (minus_SNo 1)) x39 x40) (x20 (add_SNo x38 (minus_SNo 1)) x39 x40))))) -> (forall x38, x38 :e int -> (forall x39, x39 :e int -> (forall x40, x40 :e int -> x20 x38 x39 x40 = If_i (SNoLe x38 0) x40 (x15 (x19 (add_SNo x38 (minus_SNo 1)) x39 x40) (x20 (add_SNo x38 (minus_SNo 1)) x39 x40))))) -> (forall x38, x38 :e int -> x21 x38 = x19 (x16 x38) x17 x18) -> (forall x38, x38 :e int -> x22 x38 = add_SNo x38 x38) -> (forall x38, x38 :e int -> x23 x38 = x38) -> x24 = 1 -> (forall x38, x38 :e int -> (forall x39, x39 :e int -> x25 x38 x39 = If_i (SNoLe x38 0) x39 (x22 (x25 (add_SNo x38 (minus_SNo 1)) x39)))) -> (forall x38, x38 :e int -> x26 x38 = x25 (x23 x38) x24) -> (forall x38, x38 :e int -> x27 x38 = mul_SNo (x21 x38) (x26 x38)) -> x28 = 1 -> (forall x38, x38 :e int -> (forall x39, x39 :e int -> x29 x38 x39 = x39)) -> (forall x38, x38 :e int -> (forall x39, x39 :e int -> x30 x38 x39 = If_i (SNoLe x38 0) x39 (x27 (x30 (add_SNo x38 (minus_SNo 1)) x39)))) -> (forall x38, x38 :e int -> (forall x39, x39 :e int -> x31 x38 x39 = x30 x28 (x29 x38 x39))) -> (forall x38, x38 :e int -> (forall x39, x39 :e int -> x32 x38 x39 = add_SNo (add_SNo (x31 x38 x39) (mul_SNo 2 (add_SNo (add_SNo x38 x38) x38))) x38)) -> (forall x38, x38 :e int -> x33 x38 = x38) -> x34 = 1 -> (forall x38, x38 :e int -> (forall x39, x39 :e int -> x35 x38 x39 = If_i (SNoLe x38 0) x39 (x32 (x35 (add_SNo x38 (minus_SNo 1)) x39) x38))) -> (forall x38, x38 :e int -> x36 x38 = x35 (x33 x38) x34) -> (forall x38, x38 :e int -> x37 x38 = x36 x38) -> (forall x38, x38 :e int -> SNoLe 0 x38 -> x13 x38 = x37 x38))))))))))))))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_760621dcf28dc66b655a833a9fc98ecd91b98c5b518a7c837e869fbc98782c89 : (forall x0 : set -> set -> set, (forall x1, x1 :e int -> (forall x2, x2 :e int -> x0 x1 x2 :e int)) -> (forall x1 : set -> set -> set, (forall x2, x2 :e int -> (forall x3, x3 :e int -> x1 x2 x3 :e int)) -> (forall x2 : set -> set -> set, (forall x3, x3 :e int -> (forall x4, x4 :e int -> x2 x3 x4 :e int)) -> (forall x3, x3 :e int -> (forall x4, x4 :e int -> (forall x5 : set -> set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> (forall x8, x8 :e int -> x5 x6 x7 x8 :e int))) -> (forall x6 : set -> set -> set -> set, (forall x7, x7 :e int -> (forall x8, x8 :e int -> (forall x9, x9 :e int -> x6 x7 x8 x9 :e int))) -> (forall x7 : set -> set -> set, (forall x8, x8 :e int -> (forall x9, x9 :e int -> x7 x8 x9 :e int)) -> (forall x8 : set -> set -> set, (forall x9, x9 :e int -> (forall x10, x10 :e int -> x8 x9 x10 :e int)) -> (forall x9, x9 :e int -> (forall x10 : set -> set, (forall x11, x11 :e int -> x10 x11 :e int) -> (forall x11 : set -> set -> set, (forall x12, x12 :e int -> (forall x13, x13 :e int -> x11 x12 x13 :e int)) -> (forall x12 : set -> set, (forall x13, x13 :e int -> x12 x13 :e int) -> (forall x13 : set -> set -> set, (forall x14, x14 :e int -> (forall x15, x15 :e int -> x13 x14 x15 :e int)) -> (forall x14 : set -> set, (forall x15, x15 :e int -> x14 x15 :e int) -> (forall x15, x15 :e int -> (forall x16 : set -> set -> set, (forall x17, x17 :e int -> (forall x18, x18 :e int -> x16 x17 x18 :e int)) -> (forall x17 : set -> set, (forall x18, x18 :e int -> x17 x18 :e int) -> (forall x18 : set -> set, (forall x19, x19 :e int -> x18 x19 :e int) -> (forall x19 : set -> set -> set, (forall x20, x20 :e int -> (forall x21, x21 :e int -> x19 x20 x21 :e int)) -> (forall x20 : set -> set -> set, (forall x21, x21 :e int -> (forall x22, x22 :e int -> x20 x21 x22 :e int)) -> (forall x21 : set -> set -> set, (forall x22, x22 :e int -> (forall x23, x23 :e int -> x21 x22 x23 :e int)) -> (forall x22, x22 :e int -> (forall x23, x23 :e int -> (forall x24 : set -> set -> set -> set, (forall x25, x25 :e int -> (forall x26, x26 :e int -> (forall x27, x27 :e int -> x24 x25 x26 x27 :e int))) -> (forall x25 : set -> set -> set -> set, (forall x26, x26 :e int -> (forall x27, x27 :e int -> (forall x28, x28 :e int -> x25 x26 x27 x28 :e int))) -> (forall x26 : set -> set -> set, (forall x27, x27 :e int -> (forall x28, x28 :e int -> x26 x27 x28 :e int)) -> (forall x27 : set -> set -> set, (forall x28, x28 :e int -> (forall x29, x29 :e int -> x27 x28 x29 :e int)) -> (forall x28 : set -> set, (forall x29, x29 :e int -> x28 x29 :e int) -> (forall x29, x29 :e int -> (forall x30 : set -> set -> set, (forall x31, x31 :e int -> (forall x32, x32 :e int -> x30 x31 x32 :e int)) -> (forall x31 : set -> set, (forall x32, x32 :e int -> x31 x32 :e int) -> (forall x32 : set -> set, (forall x33, x33 :e int -> x32 x33 :e int) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x0 x33 x34 = add_SNo (add_SNo (mul_SNo (add_SNo (add_SNo x34 (minus_SNo 1)) x34) (mul_SNo x34 x34)) x33) (mul_SNo 2 (add_SNo x33 x33)))) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x1 x33 x34 = add_SNo x34 x34)) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x2 x33 x34 = x34)) -> x3 = 1 -> x4 = 2 -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> (forall x35, x35 :e int -> x5 x33 x34 x35 = If_i (SNoLe x33 0) x34 (x0 (x5 (add_SNo x33 (minus_SNo 1)) x34 x35) (x6 (add_SNo x33 (minus_SNo 1)) x34 x35))))) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> (forall x35, x35 :e int -> x6 x33 x34 x35 = If_i (SNoLe x33 0) x35 (x1 (x5 (add_SNo x33 (minus_SNo 1)) x34 x35) (x6 (add_SNo x33 (minus_SNo 1)) x34 x35))))) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x7 x33 x34 = x5 (x2 x33 x34) x3 x4)) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x8 x33 x34 = mul_SNo (add_SNo 2 x34) x33)) -> x9 = 2 -> (forall x33, x33 :e int -> x10 x33 = x33) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x11 x33 x34 = If_i (SNoLe x33 0) x34 (x8 (x11 (add_SNo x33 (minus_SNo 1)) x34) x33))) -> (forall x33, x33 :e int -> x12 x33 = x11 x9 (x10 x33)) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x13 x33 x34 = add_SNo (x7 x33 x34) (add_SNo (x12 x33) (minus_SNo x33)))) -> (forall x33, x33 :e int -> x14 x33 = x33) -> x15 = 1 -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x16 x33 x34 = If_i (SNoLe x33 0) x34 (x13 (x16 (add_SNo x33 (minus_SNo 1)) x34) x33))) -> (forall x33, x33 :e int -> x17 x33 = x16 (x14 x33) x15) -> (forall x33, x33 :e int -> x18 x33 = x17 x33) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x19 x33 x34 = add_SNo (add_SNo (mul_SNo (add_SNo (add_SNo x34 (minus_SNo 1)) x34) (mul_SNo x34 x34)) x33) (mul_SNo 2 (add_SNo x33 x33)))) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x20 x33 x34 = add_SNo x34 x34)) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x21 x33 x34 = x34)) -> x22 = 1 -> x23 = 2 -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> (forall x35, x35 :e int -> x24 x33 x34 x35 = If_i (SNoLe x33 0) x34 (x19 (x24 (add_SNo x33 (minus_SNo 1)) x34 x35) (x25 (add_SNo x33 (minus_SNo 1)) x34 x35))))) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> (forall x35, x35 :e int -> x25 x33 x34 x35 = If_i (SNoLe x33 0) x35 (x20 (x24 (add_SNo x33 (minus_SNo 1)) x34 x35) (x25 (add_SNo x33 (minus_SNo 1)) x34 x35))))) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x26 x33 x34 = x24 (x21 x33 x34) x22 x23)) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x27 x33 x34 = add_SNo (add_SNo (x26 x33 x34) (mul_SNo 2 (add_SNo (mul_SNo 2 (add_SNo x33 x33)) x33))) x33)) -> (forall x33, x33 :e int -> x28 x33 = x33) -> x29 = 1 -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x30 x33 x34 = If_i (SNoLe x33 0) x34 (x27 (x30 (add_SNo x33 (minus_SNo 1)) x34) x33))) -> (forall x33, x33 :e int -> x31 x33 = x30 (x28 x33) x29) -> (forall x33, x33 :e int -> x32 x33 = x31 x33) -> (forall x33, x33 :e int -> SNoLe 0 x33 -> x18 x33 = x32 x33)))))))))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_aa8724dbd97d15a8dad3bc1e1fd97f89ba6205cf8516ee6e5f471e0418f80385 : (forall x0 : set -> set -> set, (forall x1, x1 :e int -> (forall x2, x2 :e int -> x0 x1 x2 :e int)) -> (forall x1 : set -> set -> set, (forall x2, x2 :e int -> (forall x3, x3 :e int -> x1 x2 x3 :e int)) -> (forall x2 : set -> set -> set, (forall x3, x3 :e int -> (forall x4, x4 :e int -> x2 x3 x4 :e int)) -> (forall x3, x3 :e int -> (forall x4, x4 :e int -> (forall x5 : set -> set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> (forall x8, x8 :e int -> x5 x6 x7 x8 :e int))) -> (forall x6 : set -> set -> set -> set, (forall x7, x7 :e int -> (forall x8, x8 :e int -> (forall x9, x9 :e int -> x6 x7 x8 x9 :e int))) -> (forall x7 : set -> set -> set, (forall x8, x8 :e int -> (forall x9, x9 :e int -> x7 x8 x9 :e int)) -> (forall x8 : set -> set, (forall x9, x9 :e int -> x8 x9 :e int) -> (forall x9, x9 :e int -> (forall x10 : set -> set, (forall x11, x11 :e int -> x10 x11 :e int) -> (forall x11 : set -> set -> set, (forall x12, x12 :e int -> (forall x13, x13 :e int -> x11 x12 x13 :e int)) -> (forall x12 : set -> set, (forall x13, x13 :e int -> x12 x13 :e int) -> (forall x13 : set -> set -> set, (forall x14, x14 :e int -> (forall x15, x15 :e int -> x13 x14 x15 :e int)) -> (forall x14 : set -> set, (forall x15, x15 :e int -> x14 x15 :e int) -> (forall x15, x15 :e int -> (forall x16 : set -> set -> set, (forall x17, x17 :e int -> (forall x18, x18 :e int -> x16 x17 x18 :e int)) -> (forall x17 : set -> set, (forall x18, x18 :e int -> x17 x18 :e int) -> (forall x18 : set -> set, (forall x19, x19 :e int -> x18 x19 :e int) -> (forall x19 : set -> set -> set, (forall x20, x20 :e int -> (forall x21, x21 :e int -> x19 x20 x21 :e int)) -> (forall x20 : set -> set -> set, (forall x21, x21 :e int -> (forall x22, x22 :e int -> x20 x21 x22 :e int)) -> (forall x21 : set -> set -> set, (forall x22, x22 :e int -> (forall x23, x23 :e int -> x21 x22 x23 :e int)) -> (forall x22, x22 :e int -> (forall x23, x23 :e int -> (forall x24 : set -> set -> set -> set, (forall x25, x25 :e int -> (forall x26, x26 :e int -> (forall x27, x27 :e int -> x24 x25 x26 x27 :e int))) -> (forall x25 : set -> set -> set -> set, (forall x26, x26 :e int -> (forall x27, x27 :e int -> (forall x28, x28 :e int -> x25 x26 x27 x28 :e int))) -> (forall x26 : set -> set -> set, (forall x27, x27 :e int -> (forall x28, x28 :e int -> x26 x27 x28 :e int)) -> (forall x27 : set -> set -> set, (forall x28, x28 :e int -> (forall x29, x29 :e int -> x27 x28 x29 :e int)) -> (forall x28 : set -> set, (forall x29, x29 :e int -> x28 x29 :e int) -> (forall x29, x29 :e int -> (forall x30 : set -> set -> set, (forall x31, x31 :e int -> (forall x32, x32 :e int -> x30 x31 x32 :e int)) -> (forall x31 : set -> set, (forall x32, x32 :e int -> x31 x32 :e int) -> (forall x32 : set -> set, (forall x33, x33 :e int -> x32 x33 :e int) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x0 x33 x34 = add_SNo (add_SNo (mul_SNo (add_SNo (add_SNo x34 (minus_SNo 1)) x34) (mul_SNo x34 x34)) x33) (mul_SNo 2 (add_SNo x33 x33)))) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x1 x33 x34 = add_SNo x34 x34)) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x2 x33 x34 = x34)) -> x3 = 1 -> x4 = 2 -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> (forall x35, x35 :e int -> x5 x33 x34 x35 = If_i (SNoLe x33 0) x34 (x0 (x5 (add_SNo x33 (minus_SNo 1)) x34 x35) (x6 (add_SNo x33 (minus_SNo 1)) x34 x35))))) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> (forall x35, x35 :e int -> x6 x33 x34 x35 = If_i (SNoLe x33 0) x35 (x1 (x5 (add_SNo x33 (minus_SNo 1)) x34 x35) (x6 (add_SNo x33 (minus_SNo 1)) x34 x35))))) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x7 x33 x34 = x5 (x2 x33 x34) x3 x4)) -> (forall x33, x33 :e int -> x8 x33 = add_SNo (add_SNo x33 x33) x33) -> x9 = 2 -> (forall x33, x33 :e int -> x10 x33 = x33) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x11 x33 x34 = If_i (SNoLe x33 0) x34 (x8 (x11 (add_SNo x33 (minus_SNo 1)) x34)))) -> (forall x33, x33 :e int -> x12 x33 = x11 x9 (x10 x33)) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x13 x33 x34 = add_SNo (x7 x33 x34) (x12 x33))) -> (forall x33, x33 :e int -> x14 x33 = x33) -> x15 = 1 -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x16 x33 x34 = If_i (SNoLe x33 0) x34 (x13 (x16 (add_SNo x33 (minus_SNo 1)) x34) x33))) -> (forall x33, x33 :e int -> x17 x33 = x16 (x14 x33) x15) -> (forall x33, x33 :e int -> x18 x33 = x17 x33) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x19 x33 x34 = add_SNo (add_SNo (mul_SNo (add_SNo (add_SNo x34 (minus_SNo 1)) x34) (mul_SNo x34 x34)) x33) (mul_SNo 2 (add_SNo x33 x33)))) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x20 x33 x34 = add_SNo x34 x34)) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x21 x33 x34 = x34)) -> x22 = 1 -> x23 = 2 -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> (forall x35, x35 :e int -> x24 x33 x34 x35 = If_i (SNoLe x33 0) x34 (x19 (x24 (add_SNo x33 (minus_SNo 1)) x34 x35) (x25 (add_SNo x33 (minus_SNo 1)) x34 x35))))) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> (forall x35, x35 :e int -> x25 x33 x34 x35 = If_i (SNoLe x33 0) x35 (x20 (x24 (add_SNo x33 (minus_SNo 1)) x34 x35) (x25 (add_SNo x33 (minus_SNo 1)) x34 x35))))) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x26 x33 x34 = x24 (x21 x33 x34) x22 x23)) -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x27 x33 x34 = add_SNo (add_SNo (x26 x33 x34) (mul_SNo 2 (mul_SNo 2 (add_SNo x33 x33)))) x33)) -> (forall x33, x33 :e int -> x28 x33 = x33) -> x29 = 1 -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x30 x33 x34 = If_i (SNoLe x33 0) x34 (x27 (x30 (add_SNo x33 (minus_SNo 1)) x34) x33))) -> (forall x33, x33 :e int -> x31 x33 = x30 (x28 x33) x29) -> (forall x33, x33 :e int -> x32 x33 = x31 x33) -> (forall x33, x33 :e int -> SNoLe 0 x33 -> x18 x33 = x32 x33)))))))))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_a6c01544c801ef7d25c274db758c5284f69cf3f97f407a10f71e25989cc812f9 : (forall x0 : set -> set -> set, (forall x1, x1 :e int -> (forall x2, x2 :e int -> x0 x1 x2 :e int)) -> (forall x1, x1 :e int -> (forall x2 : set -> set, (forall x3, x3 :e int -> x2 x3 :e int) -> (forall x3 : set -> set -> set, (forall x4, x4 :e int -> (forall x5, x5 :e int -> x3 x4 x5 :e int)) -> (forall x4 : set -> set, (forall x5, x5 :e int -> x4 x5 :e int) -> (forall x5 : set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> x5 x6 x7 :e int)) -> (forall x6 : set -> set -> set, (forall x7, x7 :e int -> (forall x8, x8 :e int -> x6 x7 x8 :e int)) -> (forall x7 : set -> set -> set, (forall x8, x8 :e int -> (forall x9, x9 :e int -> x7 x8 x9 :e int)) -> (forall x8, x8 :e int -> (forall x9, x9 :e int -> (forall x10 : set -> set -> set -> set, (forall x11, x11 :e int -> (forall x12, x12 :e int -> (forall x13, x13 :e int -> x10 x11 x12 x13 :e int))) -> (forall x11 : set -> set -> set -> set, (forall x12, x12 :e int -> (forall x13, x13 :e int -> (forall x14, x14 :e int -> x11 x12 x13 x14 :e int))) -> (forall x12 : set -> set -> set, (forall x13, x13 :e int -> (forall x14, x14 :e int -> x12 x13 x14 :e int)) -> (forall x13 : set -> set -> set, (forall x14, x14 :e int -> (forall x15, x15 :e int -> x13 x14 x15 :e int)) -> (forall x14 : set -> set -> set, (forall x15, x15 :e int -> (forall x16, x16 :e int -> x14 x15 x16 :e int)) -> (forall x15, x15 :e int -> (forall x16 : set -> set -> set, (forall x17, x17 :e int -> (forall x18, x18 :e int -> x16 x17 x18 :e int)) -> (forall x17 : set -> set -> set, (forall x18, x18 :e int -> (forall x19, x19 :e int -> x17 x18 x19 :e int)) -> (forall x18 : set -> set -> set, (forall x19, x19 :e int -> (forall x20, x20 :e int -> x18 x19 x20 :e int)) -> (forall x19 : set -> set, (forall x20, x20 :e int -> x19 x20 :e int) -> (forall x20, x20 :e int -> (forall x21 : set -> set -> set, (forall x22, x22 :e int -> (forall x23, x23 :e int -> x21 x22 x23 :e int)) -> (forall x22 : set -> set, (forall x23, x23 :e int -> x22 x23 :e int) -> (forall x23 : set -> set, (forall x24, x24 :e int -> x23 x24 :e int) -> (forall x24 : set -> set -> set, (forall x25, x25 :e int -> (forall x26, x26 :e int -> x24 x25 x26 :e int)) -> (forall x25 : set -> set -> set, (forall x26, x26 :e int -> (forall x27, x27 :e int -> x25 x26 x27 :e int)) -> (forall x26 : set -> set -> set, (forall x27, x27 :e int -> (forall x28, x28 :e int -> x26 x27 x28 :e int)) -> (forall x27, x27 :e int -> (forall x28, x28 :e int -> (forall x29 : set -> set -> set -> set, (forall x30, x30 :e int -> (forall x31, x31 :e int -> (forall x32, x32 :e int -> x29 x30 x31 x32 :e int))) -> (forall x30 : set -> set -> set -> set, (forall x31, x31 :e int -> (forall x32, x32 :e int -> (forall x33, x33 :e int -> x30 x31 x32 x33 :e int))) -> (forall x31 : set -> set -> set, (forall x32, x32 :e int -> (forall x33, x33 :e int -> x31 x32 x33 :e int)) -> (forall x32 : set -> set -> set, (forall x33, x33 :e int -> (forall x34, x34 :e int -> x32 x33 x34 :e int)) -> (forall x33 : set -> set -> set, (forall x34, x34 :e int -> (forall x35, x35 :e int -> x33 x34 x35 :e int)) -> (forall x34, x34 :e int -> (forall x35 : set -> set -> set, (forall x36, x36 :e int -> (forall x37, x37 :e int -> x35 x36 x37 :e int)) -> (forall x36 : set -> set -> set, (forall x37, x37 :e int -> (forall x38, x38 :e int -> x36 x37 x38 :e int)) -> (forall x37 : set -> set -> set, (forall x38, x38 :e int -> (forall x39, x39 :e int -> x37 x38 x39 :e int)) -> (forall x38 : set -> set, (forall x39, x39 :e int -> x38 x39 :e int) -> (forall x39, x39 :e int -> (forall x40 : set -> set -> set, (forall x41, x41 :e int -> (forall x42, x42 :e int -> x40 x41 x42 :e int)) -> (forall x41 : set -> set, (forall x42, x42 :e int -> x41 x42 :e int) -> (forall x42 : set -> set, (forall x43, x43 :e int -> x42 x43 :e int) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x0 x43 x44 = mul_SNo (add_SNo 2 x44) x43)) -> x1 = 2 -> (forall x43, x43 :e int -> x2 x43 = x43) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x3 x43 x44 = If_i (SNoLe x43 0) x44 (x0 (x3 (add_SNo x43 (minus_SNo 1)) x44) x43))) -> (forall x43, x43 :e int -> x4 x43 = x3 x1 (x2 x43)) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x5 x43 x44 = add_SNo (add_SNo (x4 x43) (minus_SNo x43)) (mul_SNo x44 x44))) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x6 x43 x44 = add_SNo x44 x44)) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x7 x43 x44 = x44)) -> x8 = 1 -> x9 = 2 -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> (forall x45, x45 :e int -> x10 x43 x44 x45 = If_i (SNoLe x43 0) x44 (x5 (x10 (add_SNo x43 (minus_SNo 1)) x44 x45) (x11 (add_SNo x43 (minus_SNo 1)) x44 x45))))) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> (forall x45, x45 :e int -> x11 x43 x44 x45 = If_i (SNoLe x43 0) x45 (x6 (x10 (add_SNo x43 (minus_SNo 1)) x44 x45) (x11 (add_SNo x43 (minus_SNo 1)) x44 x45))))) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x12 x43 x44 = x10 (x7 x43 x44) x8 x9)) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x13 x43 x44 = add_SNo (add_SNo (x12 x43 x44) (mul_SNo 2 (add_SNo (add_SNo x43 x43) x43))) x43)) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x14 x43 x44 = x44)) -> x15 = 1 -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x16 x43 x44 = If_i (SNoLe x43 0) x44 (x13 (x16 (add_SNo x43 (minus_SNo 1)) x44) x43))) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x17 x43 x44 = x16 (x14 x43 x44) x15)) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x18 x43 x44 = add_SNo (add_SNo (x17 x43 x44) (mul_SNo 2 (add_SNo x43 x43))) x43)) -> (forall x43, x43 :e int -> x19 x43 = x43) -> x20 = 1 -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x21 x43 x44 = If_i (SNoLe x43 0) x44 (x18 (x21 (add_SNo x43 (minus_SNo 1)) x44) x43))) -> (forall x43, x43 :e int -> x22 x43 = x21 (x19 x43) x20) -> (forall x43, x43 :e int -> x23 x43 = x22 x43) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x24 x43 x44 = add_SNo (add_SNo (mul_SNo 2 (add_SNo x43 x43)) (mul_SNo x44 x44)) x43)) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x25 x43 x44 = add_SNo x44 x44)) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x26 x43 x44 = x44)) -> x27 = 1 -> x28 = 2 -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> (forall x45, x45 :e int -> x29 x43 x44 x45 = If_i (SNoLe x43 0) x44 (x24 (x29 (add_SNo x43 (minus_SNo 1)) x44 x45) (x30 (add_SNo x43 (minus_SNo 1)) x44 x45))))) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> (forall x45, x45 :e int -> x30 x43 x44 x45 = If_i (SNoLe x43 0) x45 (x25 (x29 (add_SNo x43 (minus_SNo 1)) x44 x45) (x30 (add_SNo x43 (minus_SNo 1)) x44 x45))))) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x31 x43 x44 = x29 (x26 x43 x44) x27 x28)) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x32 x43 x44 = add_SNo (add_SNo (x31 x43 x44) (mul_SNo 2 (add_SNo (add_SNo x43 x43) x43))) x43)) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x33 x43 x44 = x44)) -> x34 = 1 -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x35 x43 x44 = If_i (SNoLe x43 0) x44 (x32 (x35 (add_SNo x43 (minus_SNo 1)) x44) x43))) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x36 x43 x44 = x35 (x33 x43 x44) x34)) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x37 x43 x44 = add_SNo (add_SNo (x36 x43 x44) (mul_SNo 2 (add_SNo (mul_SNo 2 (add_SNo x43 x43)) x43))) x43)) -> (forall x43, x43 :e int -> x38 x43 = x43) -> x39 = 1 -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x40 x43 x44 = If_i (SNoLe x43 0) x44 (x37 (x40 (add_SNo x43 (minus_SNo 1)) x44) x43))) -> (forall x43, x43 :e int -> x41 x43 = x40 (x38 x43) x39) -> (forall x43, x43 :e int -> x42 x43 = x41 x43) -> (forall x43, x43 :e int -> SNoLe 0 x43 -> x23 x43 = x42 x43)))))))))))))))))))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_2481aefe65b4cf3c113bf04077dd6b325e654f5bd39ef8cc175b944fbd69d50a : (forall x0 : set -> set, (forall x1, x1 :e int -> x0 x1 :e int) -> (forall x1 : set -> set, (forall x2, x2 :e int -> x1 x2 :e int) -> (forall x2 : set -> set, (forall x3, x3 :e int -> x2 x3 :e int) -> (forall x3 : set -> set, (forall x4, x4 :e int -> x3 x4 :e int) -> (forall x4, x4 :e int -> (forall x5 : set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> x5 x6 x7 :e int)) -> (forall x6 : set -> set, (forall x7, x7 :e int -> x6 x7 :e int) -> (forall x7 : set -> set, (forall x8, x8 :e int -> x7 x8 :e int) -> (forall x8 : set -> set -> set, (forall x9, x9 :e int -> (forall x10, x10 :e int -> x8 x9 x10 :e int)) -> (forall x9 : set -> set, (forall x10, x10 :e int -> x9 x10 :e int) -> (forall x10 : set -> set, (forall x11, x11 :e int -> x10 x11 :e int) -> (forall x11, x11 :e int -> (forall x12 : set -> set -> set, (forall x13, x13 :e int -> (forall x14, x14 :e int -> x12 x13 x14 :e int)) -> (forall x13 : set -> set -> set, (forall x14, x14 :e int -> (forall x15, x15 :e int -> x13 x14 x15 :e int)) -> (forall x14 : set -> set -> set, (forall x15, x15 :e int -> (forall x16, x16 :e int -> x14 x15 x16 :e int)) -> (forall x15 : set -> set -> set, (forall x16, x16 :e int -> (forall x17, x17 :e int -> x15 x16 x17 :e int)) -> (forall x16 : set -> set -> set, (forall x17, x17 :e int -> (forall x18, x18 :e int -> x16 x17 x18 :e int)) -> (forall x17, x17 :e int -> (forall x18 : set -> set -> set, (forall x19, x19 :e int -> (forall x20, x20 :e int -> x18 x19 x20 :e int)) -> (forall x19 : set -> set -> set, (forall x20, x20 :e int -> (forall x21, x21 :e int -> x19 x20 x21 :e int)) -> (forall x20 : set -> set -> set, (forall x21, x21 :e int -> (forall x22, x22 :e int -> x20 x21 x22 :e int)) -> (forall x21 : set -> set, (forall x22, x22 :e int -> x21 x22 :e int) -> (forall x22, x22 :e int -> (forall x23 : set -> set -> set, (forall x24, x24 :e int -> (forall x25, x25 :e int -> x23 x24 x25 :e int)) -> (forall x24 : set -> set, (forall x25, x25 :e int -> x24 x25 :e int) -> (forall x25 : set -> set, (forall x26, x26 :e int -> x25 x26 :e int) -> (forall x26 : set -> set, (forall x27, x27 :e int -> x26 x27 :e int) -> (forall x27 : set -> set, (forall x28, x28 :e int -> x27 x28 :e int) -> (forall x28, x28 :e int -> (forall x29 : set -> set -> set, (forall x30, x30 :e int -> (forall x31, x31 :e int -> x29 x30 x31 :e int)) -> (forall x30 : set -> set, (forall x31, x31 :e int -> x30 x31 :e int) -> (forall x31 : set -> set -> set, (forall x32, x32 :e int -> (forall x33, x33 :e int -> x31 x32 x33 :e int)) -> (forall x32 : set -> set -> set, (forall x33, x33 :e int -> (forall x34, x34 :e int -> x32 x33 x34 :e int)) -> (forall x33 : set -> set, (forall x34, x34 :e int -> x33 x34 :e int) -> (forall x34, x34 :e int -> (forall x35, x35 :e int -> (forall x36 : set -> set -> set -> set, (forall x37, x37 :e int -> (forall x38, x38 :e int -> (forall x39, x39 :e int -> x36 x37 x38 x39 :e int))) -> (forall x37 : set -> set -> set -> set, (forall x38, x38 :e int -> (forall x39, x39 :e int -> (forall x40, x40 :e int -> x37 x38 x39 x40 :e int))) -> (forall x38 : set -> set, (forall x39, x39 :e int -> x38 x39 :e int) -> (forall x39 : set -> set, (forall x40, x40 :e int -> x39 x40 :e int) -> (forall x40, x40 :e int -> (forall x41 : set -> set -> set, (forall x42, x42 :e int -> (forall x43, x43 :e int -> x41 x42 x43 :e int)) -> (forall x42 : set -> set -> set, (forall x43, x43 :e int -> (forall x44, x44 :e int -> x42 x43 x44 :e int)) -> (forall x43 : set -> set -> set, (forall x44, x44 :e int -> (forall x45, x45 :e int -> x43 x44 x45 :e int)) -> (forall x44 : set -> set -> set, (forall x45, x45 :e int -> (forall x46, x46 :e int -> x44 x45 x46 :e int)) -> (forall x45 : set -> set, (forall x46, x46 :e int -> x45 x46 :e int) -> (forall x46, x46 :e int -> (forall x47 : set -> set -> set, (forall x48, x48 :e int -> (forall x49, x49 :e int -> x47 x48 x49 :e int)) -> (forall x48 : set -> set, (forall x49, x49 :e int -> x48 x49 :e int) -> (forall x49 : set -> set, (forall x50, x50 :e int -> x49 x50 :e int) -> (forall x50, x50 :e int -> (forall x51 : set -> set -> set, (forall x52, x52 :e int -> (forall x53, x53 :e int -> x51 x52 x53 :e int)) -> (forall x52 : set -> set -> set, (forall x53, x53 :e int -> (forall x54, x54 :e int -> x52 x53 x54 :e int)) -> (forall x53 : set -> set -> set, (forall x54, x54 :e int -> (forall x55, x55 :e int -> x53 x54 x55 :e int)) -> (forall x54 : set -> set -> set, (forall x55, x55 :e int -> (forall x56, x56 :e int -> x54 x55 x56 :e int)) -> (forall x55 : set -> set, (forall x56, x56 :e int -> x55 x56 :e int) -> (forall x56, x56 :e int -> (forall x57 : set -> set -> set, (forall x58, x58 :e int -> (forall x59, x59 :e int -> x57 x58 x59 :e int)) -> (forall x58 : set -> set, (forall x59, x59 :e int -> x58 x59 :e int) -> (forall x59 : set -> set, (forall x60, x60 :e int -> x59 x60 :e int) -> (forall x60, x60 :e int -> x0 x60 = add_SNo (mul_SNo 2 (add_SNo x60 x60)) x60) -> (forall x60, x60 :e int -> x1 x60 = x60) -> (forall x60, x60 :e int -> x2 x60 = add_SNo x60 x60) -> (forall x60, x60 :e int -> x3 x60 = x60) -> x4 = 2 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x5 x60 x61 = If_i (SNoLe x60 0) x61 (x2 (x5 (add_SNo x60 (minus_SNo 1)) x61)))) -> (forall x60, x60 :e int -> x6 x60 = x5 (x3 x60) x4) -> (forall x60, x60 :e int -> x7 x60 = add_SNo (x6 x60) (minus_SNo 1)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x8 x60 x61 = If_i (SNoLe x60 0) x61 (x0 (x8 (add_SNo x60 (minus_SNo 1)) x61)))) -> (forall x60, x60 :e int -> x9 x60 = x8 (x1 x60) (x7 x60)) -> (forall x60, x60 :e int -> x10 x60 = x9 x60) -> x11 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x12 x60 x61 = x61)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x13 x60 x61 = If_i (SNoLe x60 0) x61 (x10 (x13 (add_SNo x60 (minus_SNo 1)) x61)))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x14 x60 x61 = x13 x11 (x12 x60 x61))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x15 x60 x61 = add_SNo (x14 x60 x61) (mul_SNo 2 (add_SNo x60 x60)))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x16 x60 x61 = x61)) -> x17 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x18 x60 x61 = If_i (SNoLe x60 0) x61 (x15 (x18 (add_SNo x60 (minus_SNo 1)) x61) x60))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x19 x60 x61 = x18 (x16 x60 x61) x17)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x20 x60 x61 = add_SNo (add_SNo (x19 x60 x61) (mul_SNo 2 (add_SNo (add_SNo x60 x60) x60))) x60)) -> (forall x60, x60 :e int -> x21 x60 = x60) -> x22 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x23 x60 x61 = If_i (SNoLe x60 0) x61 (x20 (x23 (add_SNo x60 (minus_SNo 1)) x61) x60))) -> (forall x60, x60 :e int -> x24 x60 = x23 (x21 x60) x22) -> (forall x60, x60 :e int -> x25 x60 = x24 x60) -> (forall x60, x60 :e int -> x26 x60 = add_SNo x60 x60) -> (forall x60, x60 :e int -> x27 x60 = x60) -> x28 = 2 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x29 x60 x61 = If_i (SNoLe x60 0) x61 (x26 (x29 (add_SNo x60 (minus_SNo 1)) x61)))) -> (forall x60, x60 :e int -> x30 x60 = x29 (x27 x60) x28) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x31 x60 x61 = mul_SNo x60 x61)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x32 x60 x61 = x61)) -> (forall x60, x60 :e int -> x33 x60 = x60) -> x34 = 1 -> x35 = add_SNo 1 (add_SNo 2 2) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> (forall x62, x62 :e int -> x36 x60 x61 x62 = If_i (SNoLe x60 0) x61 (x31 (x36 (add_SNo x60 (minus_SNo 1)) x61 x62) (x37 (add_SNo x60 (minus_SNo 1)) x61 x62))))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> (forall x62, x62 :e int -> x37 x60 x61 x62 = If_i (SNoLe x60 0) x62 (x32 (x36 (add_SNo x60 (minus_SNo 1)) x61 x62) (x37 (add_SNo x60 (minus_SNo 1)) x61 x62))))) -> (forall x60, x60 :e int -> x38 x60 = x36 (x33 x60) x34 x35) -> (forall x60, x60 :e int -> x39 x60 = mul_SNo (add_SNo (x30 x60) (minus_SNo 1)) (x38 x60)) -> x40 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x41 x60 x61 = x61)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x42 x60 x61 = If_i (SNoLe x60 0) x61 (x39 (x42 (add_SNo x60 (minus_SNo 1)) x61)))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x43 x60 x61 = x42 x40 (x41 x60 x61))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x44 x60 x61 = add_SNo (x43 x60 x61) (mul_SNo 2 (add_SNo x60 x60)))) -> (forall x60, x60 :e int -> x45 x60 = x60) -> x46 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x47 x60 x61 = If_i (SNoLe x60 0) x61 (x44 (x47 (add_SNo x60 (minus_SNo 1)) x61) x60))) -> (forall x60, x60 :e int -> x48 x60 = x47 (x45 x60) x46) -> (forall x60, x60 :e int -> x49 x60 = x48 x60) -> x50 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x51 x60 x61 = x61)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x52 x60 x61 = If_i (SNoLe x60 0) x61 (x49 (x52 (add_SNo x60 (minus_SNo 1)) x61)))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x53 x60 x61 = x52 x50 (x51 x60 x61))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x54 x60 x61 = add_SNo (add_SNo (x53 x60 x61) (mul_SNo 2 (add_SNo (add_SNo x60 x60) x60))) x60)) -> (forall x60, x60 :e int -> x55 x60 = x60) -> x56 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x57 x60 x61 = If_i (SNoLe x60 0) x61 (x54 (x57 (add_SNo x60 (minus_SNo 1)) x61) x60))) -> (forall x60, x60 :e int -> x58 x60 = x57 (x55 x60) x56) -> (forall x60, x60 :e int -> x59 x60 = x58 x60) -> (forall x60, x60 :e int -> SNoLe 0 x60 -> x25 x60 = x59 x60))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_2f697027bb2a8e099597109a72c37029abd6c1fef9799b42b873a1f786c95a0e : (forall x0 : set -> set -> set, (forall x1, x1 :e int -> (forall x2, x2 :e int -> x0 x1 x2 :e int)) -> (forall x1 : set -> set -> set, (forall x2, x2 :e int -> (forall x3, x3 :e int -> x1 x2 x3 :e int)) -> (forall x2 : set -> set -> set, (forall x3, x3 :e int -> (forall x4, x4 :e int -> x2 x3 x4 :e int)) -> (forall x3, x3 :e int -> (forall x4, x4 :e int -> (forall x5 : set -> set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> (forall x8, x8 :e int -> x5 x6 x7 x8 :e int))) -> (forall x6 : set -> set -> set -> set, (forall x7, x7 :e int -> (forall x8, x8 :e int -> (forall x9, x9 :e int -> x6 x7 x8 x9 :e int))) -> (forall x7 : set -> set -> set, (forall x8, x8 :e int -> (forall x9, x9 :e int -> x7 x8 x9 :e int)) -> (forall x8 : set -> set -> set, (forall x9, x9 :e int -> (forall x10, x10 :e int -> x8 x9 x10 :e int)) -> (forall x9 : set -> set, (forall x10, x10 :e int -> x9 x10 :e int) -> (forall x10, x10 :e int -> (forall x11 : set -> set -> set, (forall x12, x12 :e int -> (forall x13, x13 :e int -> x11 x12 x13 :e int)) -> (forall x12 : set -> set, (forall x13, x13 :e int -> x12 x13 :e int) -> (forall x13 : set -> set, (forall x14, x14 :e int -> x13 x14 :e int) -> (forall x14 : set -> set -> set, (forall x15, x15 :e int -> (forall x16, x16 :e int -> x14 x15 x16 :e int)) -> (forall x15 : set -> set -> set, (forall x16, x16 :e int -> (forall x17, x17 :e int -> x15 x16 x17 :e int)) -> (forall x16 : set -> set -> set, (forall x17, x17 :e int -> (forall x18, x18 :e int -> x16 x17 x18 :e int)) -> (forall x17, x17 :e int -> (forall x18, x18 :e int -> (forall x19 : set -> set -> set -> set, (forall x20, x20 :e int -> (forall x21, x21 :e int -> (forall x22, x22 :e int -> x19 x20 x21 x22 :e int))) -> (forall x20 : set -> set -> set -> set, (forall x21, x21 :e int -> (forall x22, x22 :e int -> (forall x23, x23 :e int -> x20 x21 x22 x23 :e int))) -> (forall x21 : set -> set -> set, (forall x22, x22 :e int -> (forall x23, x23 :e int -> x21 x22 x23 :e int)) -> (forall x22 : set -> set -> set, (forall x23, x23 :e int -> (forall x24, x24 :e int -> x22 x23 x24 :e int)) -> (forall x23 : set -> set, (forall x24, x24 :e int -> x23 x24 :e int) -> (forall x24, x24 :e int -> (forall x25 : set -> set -> set, (forall x26, x26 :e int -> (forall x27, x27 :e int -> x25 x26 x27 :e int)) -> (forall x26 : set -> set, (forall x27, x27 :e int -> x26 x27 :e int) -> (forall x27 : set -> set, (forall x28, x28 :e int -> x27 x28 :e int) -> (forall x28, x28 :e int -> (forall x29, x29 :e int -> x0 x28 x29 = add_SNo (add_SNo (mul_SNo (add_SNo (add_SNo x29 (minus_SNo 1)) x29) (mul_SNo x29 x29)) x28) (mul_SNo 2 (add_SNo (add_SNo x28 x28) x28)))) -> (forall x28, x28 :e int -> (forall x29, x29 :e int -> x1 x28 x29 = add_SNo x29 x29)) -> (forall x28, x28 :e int -> (forall x29, x29 :e int -> x2 x28 x29 = x29)) -> x3 = 1 -> x4 = 2 -> (forall x28, x28 :e int -> (forall x29, x29 :e int -> (forall x30, x30 :e int -> x5 x28 x29 x30 = If_i (SNoLe x28 0) x29 (x0 (x5 (add_SNo x28 (minus_SNo 1)) x29 x30) (x6 (add_SNo x28 (minus_SNo 1)) x29 x30))))) -> (forall x28, x28 :e int -> (forall x29, x29 :e int -> (forall x30, x30 :e int -> x6 x28 x29 x30 = If_i (SNoLe x28 0) x30 (x1 (x5 (add_SNo x28 (minus_SNo 1)) x29 x30) (x6 (add_SNo x28 (minus_SNo 1)) x29 x30))))) -> (forall x28, x28 :e int -> (forall x29, x29 :e int -> x7 x28 x29 = x5 (x2 x28 x29) x3 x4)) -> (forall x28, x28 :e int -> (forall x29, x29 :e int -> x8 x28 x29 = add_SNo (add_SNo (x7 x28 x29) (mul_SNo 2 (add_SNo x28 x28))) x28)) -> (forall x28, x28 :e int -> x9 x28 = x28) -> x10 = 1 -> (forall x28, x28 :e int -> (forall x29, x29 :e int -> x11 x28 x29 = If_i (SNoLe x28 0) x29 (x8 (x11 (add_SNo x28 (minus_SNo 1)) x29) x28))) -> (forall x28, x28 :e int -> x12 x28 = x11 (x9 x28) x10) -> (forall x28, x28 :e int -> x13 x28 = x12 x28) -> (forall x28, x28 :e int -> (forall x29, x29 :e int -> x14 x28 x29 = add_SNo (add_SNo (mul_SNo (add_SNo (add_SNo x29 (minus_SNo 1)) x29) (mul_SNo x29 x29)) x28) (mul_SNo 2 (add_SNo x28 x28)))) -> (forall x28, x28 :e int -> (forall x29, x29 :e int -> x15 x28 x29 = add_SNo x29 x29)) -> (forall x28, x28 :e int -> (forall x29, x29 :e int -> x16 x28 x29 = x29)) -> x17 = 1 -> x18 = 2 -> (forall x28, x28 :e int -> (forall x29, x29 :e int -> (forall x30, x30 :e int -> x19 x28 x29 x30 = If_i (SNoLe x28 0) x29 (x14 (x19 (add_SNo x28 (minus_SNo 1)) x29 x30) (x20 (add_SNo x28 (minus_SNo 1)) x29 x30))))) -> (forall x28, x28 :e int -> (forall x29, x29 :e int -> (forall x30, x30 :e int -> x20 x28 x29 x30 = If_i (SNoLe x28 0) x30 (x15 (x19 (add_SNo x28 (minus_SNo 1)) x29 x30) (x20 (add_SNo x28 (minus_SNo 1)) x29 x30))))) -> (forall x28, x28 :e int -> (forall x29, x29 :e int -> x21 x28 x29 = x19 (x16 x28 x29) x17 x18)) -> (forall x28, x28 :e int -> (forall x29, x29 :e int -> x22 x28 x29 = add_SNo (add_SNo (x21 x28 x29) (mul_SNo 2 (add_SNo (add_SNo x28 x28) x28))) x28)) -> (forall x28, x28 :e int -> x23 x28 = x28) -> x24 = 1 -> (forall x28, x28 :e int -> (forall x29, x29 :e int -> x25 x28 x29 = If_i (SNoLe x28 0) x29 (x22 (x25 (add_SNo x28 (minus_SNo 1)) x29) x28))) -> (forall x28, x28 :e int -> x26 x28 = x25 (x23 x28) x24) -> (forall x28, x28 :e int -> x27 x28 = x26 x28) -> (forall x28, x28 :e int -> SNoLe 0 x28 -> x13 x28 = x27 x28))))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_24b72021e28203f1ff762fe51f4da67e288301152dc7ee3a06678be46d22980e : (forall x0 : set -> set, (forall x1, x1 :e int -> x0 x1 :e int) -> (forall x1 : set -> set, (forall x2, x2 :e int -> x1 x2 :e int) -> (forall x2 : set -> set, (forall x3, x3 :e int -> x2 x3 :e int) -> (forall x3 : set -> set, (forall x4, x4 :e int -> x3 x4 :e int) -> (forall x4, x4 :e int -> (forall x5 : set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> x5 x6 x7 :e int)) -> (forall x6 : set -> set, (forall x7, x7 :e int -> x6 x7 :e int) -> (forall x7 : set -> set, (forall x8, x8 :e int -> x7 x8 :e int) -> (forall x8 : set -> set -> set, (forall x9, x9 :e int -> (forall x10, x10 :e int -> x8 x9 x10 :e int)) -> (forall x9 : set -> set, (forall x10, x10 :e int -> x9 x10 :e int) -> (forall x10 : set -> set, (forall x11, x11 :e int -> x10 x11 :e int) -> (forall x11, x11 :e int -> (forall x12 : set -> set -> set, (forall x13, x13 :e int -> (forall x14, x14 :e int -> x12 x13 x14 :e int)) -> (forall x13 : set -> set -> set, (forall x14, x14 :e int -> (forall x15, x15 :e int -> x13 x14 x15 :e int)) -> (forall x14 : set -> set -> set, (forall x15, x15 :e int -> (forall x16, x16 :e int -> x14 x15 x16 :e int)) -> (forall x15 : set -> set -> set, (forall x16, x16 :e int -> (forall x17, x17 :e int -> x15 x16 x17 :e int)) -> (forall x16 : set -> set -> set, (forall x17, x17 :e int -> (forall x18, x18 :e int -> x16 x17 x18 :e int)) -> (forall x17, x17 :e int -> (forall x18 : set -> set -> set, (forall x19, x19 :e int -> (forall x20, x20 :e int -> x18 x19 x20 :e int)) -> (forall x19 : set -> set -> set, (forall x20, x20 :e int -> (forall x21, x21 :e int -> x19 x20 x21 :e int)) -> (forall x20 : set -> set -> set, (forall x21, x21 :e int -> (forall x22, x22 :e int -> x20 x21 x22 :e int)) -> (forall x21 : set -> set, (forall x22, x22 :e int -> x21 x22 :e int) -> (forall x22, x22 :e int -> (forall x23 : set -> set -> set, (forall x24, x24 :e int -> (forall x25, x25 :e int -> x23 x24 x25 :e int)) -> (forall x24 : set -> set, (forall x25, x25 :e int -> x24 x25 :e int) -> (forall x25 : set -> set, (forall x26, x26 :e int -> x25 x26 :e int) -> (forall x26 : set -> set, (forall x27, x27 :e int -> x26 x27 :e int) -> (forall x27 : set -> set, (forall x28, x28 :e int -> x27 x28 :e int) -> (forall x28, x28 :e int -> (forall x29 : set -> set -> set, (forall x30, x30 :e int -> (forall x31, x31 :e int -> x29 x30 x31 :e int)) -> (forall x30 : set -> set, (forall x31, x31 :e int -> x30 x31 :e int) -> (forall x31 : set -> set -> set, (forall x32, x32 :e int -> (forall x33, x33 :e int -> x31 x32 x33 :e int)) -> (forall x32 : set -> set -> set, (forall x33, x33 :e int -> (forall x34, x34 :e int -> x32 x33 x34 :e int)) -> (forall x33 : set -> set, (forall x34, x34 :e int -> x33 x34 :e int) -> (forall x34, x34 :e int -> (forall x35, x35 :e int -> (forall x36 : set -> set -> set -> set, (forall x37, x37 :e int -> (forall x38, x38 :e int -> (forall x39, x39 :e int -> x36 x37 x38 x39 :e int))) -> (forall x37 : set -> set -> set -> set, (forall x38, x38 :e int -> (forall x39, x39 :e int -> (forall x40, x40 :e int -> x37 x38 x39 x40 :e int))) -> (forall x38 : set -> set, (forall x39, x39 :e int -> x38 x39 :e int) -> (forall x39 : set -> set, (forall x40, x40 :e int -> x39 x40 :e int) -> (forall x40, x40 :e int -> (forall x41 : set -> set -> set, (forall x42, x42 :e int -> (forall x43, x43 :e int -> x41 x42 x43 :e int)) -> (forall x42 : set -> set -> set, (forall x43, x43 :e int -> (forall x44, x44 :e int -> x42 x43 x44 :e int)) -> (forall x43 : set -> set -> set, (forall x44, x44 :e int -> (forall x45, x45 :e int -> x43 x44 x45 :e int)) -> (forall x44 : set -> set -> set, (forall x45, x45 :e int -> (forall x46, x46 :e int -> x44 x45 x46 :e int)) -> (forall x45 : set -> set, (forall x46, x46 :e int -> x45 x46 :e int) -> (forall x46, x46 :e int -> (forall x47 : set -> set -> set, (forall x48, x48 :e int -> (forall x49, x49 :e int -> x47 x48 x49 :e int)) -> (forall x48 : set -> set, (forall x49, x49 :e int -> x48 x49 :e int) -> (forall x49 : set -> set, (forall x50, x50 :e int -> x49 x50 :e int) -> (forall x50, x50 :e int -> (forall x51 : set -> set -> set, (forall x52, x52 :e int -> (forall x53, x53 :e int -> x51 x52 x53 :e int)) -> (forall x52 : set -> set -> set, (forall x53, x53 :e int -> (forall x54, x54 :e int -> x52 x53 x54 :e int)) -> (forall x53 : set -> set -> set, (forall x54, x54 :e int -> (forall x55, x55 :e int -> x53 x54 x55 :e int)) -> (forall x54 : set -> set -> set, (forall x55, x55 :e int -> (forall x56, x56 :e int -> x54 x55 x56 :e int)) -> (forall x55 : set -> set, (forall x56, x56 :e int -> x55 x56 :e int) -> (forall x56, x56 :e int -> (forall x57 : set -> set -> set, (forall x58, x58 :e int -> (forall x59, x59 :e int -> x57 x58 x59 :e int)) -> (forall x58 : set -> set, (forall x59, x59 :e int -> x58 x59 :e int) -> (forall x59 : set -> set, (forall x60, x60 :e int -> x59 x60 :e int) -> (forall x60, x60 :e int -> x0 x60 = add_SNo (mul_SNo 2 (add_SNo x60 x60)) x60) -> (forall x60, x60 :e int -> x1 x60 = x60) -> (forall x60, x60 :e int -> x2 x60 = add_SNo x60 x60) -> (forall x60, x60 :e int -> x3 x60 = x60) -> x4 = 2 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x5 x60 x61 = If_i (SNoLe x60 0) x61 (x2 (x5 (add_SNo x60 (minus_SNo 1)) x61)))) -> (forall x60, x60 :e int -> x6 x60 = x5 (x3 x60) x4) -> (forall x60, x60 :e int -> x7 x60 = add_SNo (x6 x60) (minus_SNo 1)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x8 x60 x61 = If_i (SNoLe x60 0) x61 (x0 (x8 (add_SNo x60 (minus_SNo 1)) x61)))) -> (forall x60, x60 :e int -> x9 x60 = x8 (x1 x60) (x7 x60)) -> (forall x60, x60 :e int -> x10 x60 = x9 x60) -> x11 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x12 x60 x61 = x61)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x13 x60 x61 = If_i (SNoLe x60 0) x61 (x10 (x13 (add_SNo x60 (minus_SNo 1)) x61)))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x14 x60 x61 = x13 x11 (x12 x60 x61))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x15 x60 x61 = add_SNo (x14 x60 x61) (mul_SNo 2 (add_SNo x60 x60)))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x16 x60 x61 = x61)) -> x17 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x18 x60 x61 = If_i (SNoLe x60 0) x61 (x15 (x18 (add_SNo x60 (minus_SNo 1)) x61) x60))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x19 x60 x61 = x18 (x16 x60 x61) x17)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x20 x60 x61 = add_SNo (x19 x60 x61) (mul_SNo 2 (add_SNo (add_SNo x60 x60) x60)))) -> (forall x60, x60 :e int -> x21 x60 = x60) -> x22 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x23 x60 x61 = If_i (SNoLe x60 0) x61 (x20 (x23 (add_SNo x60 (minus_SNo 1)) x61) x60))) -> (forall x60, x60 :e int -> x24 x60 = x23 (x21 x60) x22) -> (forall x60, x60 :e int -> x25 x60 = x24 x60) -> (forall x60, x60 :e int -> x26 x60 = add_SNo x60 x60) -> (forall x60, x60 :e int -> x27 x60 = x60) -> x28 = 2 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x29 x60 x61 = If_i (SNoLe x60 0) x61 (x26 (x29 (add_SNo x60 (minus_SNo 1)) x61)))) -> (forall x60, x60 :e int -> x30 x60 = x29 (x27 x60) x28) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x31 x60 x61 = mul_SNo x60 x61)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x32 x60 x61 = x61)) -> (forall x60, x60 :e int -> x33 x60 = x60) -> x34 = 1 -> x35 = add_SNo 1 (add_SNo 2 2) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> (forall x62, x62 :e int -> x36 x60 x61 x62 = If_i (SNoLe x60 0) x61 (x31 (x36 (add_SNo x60 (minus_SNo 1)) x61 x62) (x37 (add_SNo x60 (minus_SNo 1)) x61 x62))))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> (forall x62, x62 :e int -> x37 x60 x61 x62 = If_i (SNoLe x60 0) x62 (x32 (x36 (add_SNo x60 (minus_SNo 1)) x61 x62) (x37 (add_SNo x60 (minus_SNo 1)) x61 x62))))) -> (forall x60, x60 :e int -> x38 x60 = x36 (x33 x60) x34 x35) -> (forall x60, x60 :e int -> x39 x60 = mul_SNo (add_SNo (x30 x60) (minus_SNo 1)) (x38 x60)) -> x40 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x41 x60 x61 = x61)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x42 x60 x61 = If_i (SNoLe x60 0) x61 (x39 (x42 (add_SNo x60 (minus_SNo 1)) x61)))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x43 x60 x61 = x42 x40 (x41 x60 x61))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x44 x60 x61 = add_SNo (x43 x60 x61) (mul_SNo 2 (add_SNo x60 x60)))) -> (forall x60, x60 :e int -> x45 x60 = x60) -> x46 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x47 x60 x61 = If_i (SNoLe x60 0) x61 (x44 (x47 (add_SNo x60 (minus_SNo 1)) x61) x60))) -> (forall x60, x60 :e int -> x48 x60 = x47 (x45 x60) x46) -> (forall x60, x60 :e int -> x49 x60 = x48 x60) -> x50 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x51 x60 x61 = x61)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x52 x60 x61 = If_i (SNoLe x60 0) x61 (x49 (x52 (add_SNo x60 (minus_SNo 1)) x61)))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x53 x60 x61 = x52 x50 (x51 x60 x61))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x54 x60 x61 = add_SNo (x53 x60 x61) (mul_SNo 2 (add_SNo (add_SNo x60 x60) x60)))) -> (forall x60, x60 :e int -> x55 x60 = x60) -> x56 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x57 x60 x61 = If_i (SNoLe x60 0) x61 (x54 (x57 (add_SNo x60 (minus_SNo 1)) x61) x60))) -> (forall x60, x60 :e int -> x58 x60 = x57 (x55 x60) x56) -> (forall x60, x60 :e int -> x59 x60 = x58 x60) -> (forall x60, x60 :e int -> SNoLe 0 x60 -> x25 x60 = x59 x60))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_12097948e4fbe7ef9e778719b86de484da64689671cb27fd783e0e08b182b4ca : (forall x0 : set -> set, (forall x1, x1 :e int -> x0 x1 :e int) -> (forall x1 : set -> set -> set, (forall x2, x2 :e int -> (forall x3, x3 :e int -> x1 x2 x3 :e int)) -> (forall x2, x2 :e int -> (forall x3 : set -> set -> set, (forall x4, x4 :e int -> (forall x5, x5 :e int -> x3 x4 x5 :e int)) -> (forall x4 : set -> set -> set, (forall x5, x5 :e int -> (forall x6, x6 :e int -> x4 x5 x6 :e int)) -> (forall x5 : set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> x5 x6 x7 :e int)) -> (forall x6 : set -> set -> set, (forall x7, x7 :e int -> (forall x8, x8 :e int -> x6 x7 x8 :e int)) -> (forall x7, x7 :e int -> (forall x8 : set -> set -> set, (forall x9, x9 :e int -> (forall x10, x10 :e int -> x8 x9 x10 :e int)) -> (forall x9 : set -> set -> set, (forall x10, x10 :e int -> (forall x11, x11 :e int -> x9 x10 x11 :e int)) -> (forall x10 : set -> set -> set, (forall x11, x11 :e int -> (forall x12, x12 :e int -> x10 x11 x12 :e int)) -> (forall x11, x11 :e int -> (forall x12 : set -> set, (forall x13, x13 :e int -> x12 x13 :e int) -> (forall x13 : set -> set -> set, (forall x14, x14 :e int -> (forall x15, x15 :e int -> x13 x14 x15 :e int)) -> (forall x14 : set -> set, (forall x15, x15 :e int -> x14 x15 :e int) -> (forall x15 : set -> set -> set, (forall x16, x16 :e int -> (forall x17, x17 :e int -> x15 x16 x17 :e int)) -> (forall x16 : set -> set -> set, (forall x17, x17 :e int -> (forall x18, x18 :e int -> x16 x17 x18 :e int)) -> (forall x17, x17 :e int -> (forall x18 : set -> set -> set, (forall x19, x19 :e int -> (forall x20, x20 :e int -> x18 x19 x20 :e int)) -> (forall x19 : set -> set -> set, (forall x20, x20 :e int -> (forall x21, x21 :e int -> x19 x20 x21 :e int)) -> (forall x20 : set -> set -> set, (forall x21, x21 :e int -> (forall x22, x22 :e int -> x20 x21 x22 :e int)) -> (forall x21 : set -> set, (forall x22, x22 :e int -> x21 x22 :e int) -> (forall x22, x22 :e int -> (forall x23 : set -> set -> set, (forall x24, x24 :e int -> (forall x25, x25 :e int -> x23 x24 x25 :e int)) -> (forall x24 : set -> set, (forall x25, x25 :e int -> x24 x25 :e int) -> (forall x25 : set -> set, (forall x26, x26 :e int -> x25 x26 :e int) -> (forall x26 : set -> set -> set, (forall x27, x27 :e int -> (forall x28, x28 :e int -> x26 x27 x28 :e int)) -> (forall x27 : set -> set -> set, (forall x28, x28 :e int -> (forall x29, x29 :e int -> x27 x28 x29 :e int)) -> (forall x28 : set -> set, (forall x29, x29 :e int -> x28 x29 :e int) -> (forall x29, x29 :e int -> (forall x30, x30 :e int -> (forall x31 : set -> set -> set -> set, (forall x32, x32 :e int -> (forall x33, x33 :e int -> (forall x34, x34 :e int -> x31 x32 x33 x34 :e int))) -> (forall x32 : set -> set -> set -> set, (forall x33, x33 :e int -> (forall x34, x34 :e int -> (forall x35, x35 :e int -> x32 x33 x34 x35 :e int))) -> (forall x33 : set -> set, (forall x34, x34 :e int -> x33 x34 :e int) -> (forall x34 : set -> set -> set, (forall x35, x35 :e int -> (forall x36, x36 :e int -> x34 x35 x36 :e int)) -> (forall x35 : set -> set -> set, (forall x36, x36 :e int -> (forall x37, x37 :e int -> x35 x36 x37 :e int)) -> (forall x36 : set -> set, (forall x37, x37 :e int -> x36 x37 :e int) -> (forall x37, x37 :e int -> (forall x38, x38 :e int -> (forall x39 : set -> set -> set -> set, (forall x40, x40 :e int -> (forall x41, x41 :e int -> (forall x42, x42 :e int -> x39 x40 x41 x42 :e int))) -> (forall x40 : set -> set -> set -> set, (forall x41, x41 :e int -> (forall x42, x42 :e int -> (forall x43, x43 :e int -> x40 x41 x42 x43 :e int))) -> (forall x41 : set -> set, (forall x42, x42 :e int -> x41 x42 :e int) -> (forall x42 : set -> set, (forall x43, x43 :e int -> x42 x43 :e int) -> (forall x43, x43 :e int -> (forall x44 : set -> set -> set, (forall x45, x45 :e int -> (forall x46, x46 :e int -> x44 x45 x46 :e int)) -> (forall x45 : set -> set -> set, (forall x46, x46 :e int -> (forall x47, x47 :e int -> x45 x46 x47 :e int)) -> (forall x46 : set -> set -> set, (forall x47, x47 :e int -> (forall x48, x48 :e int -> x46 x47 x48 :e int)) -> (forall x47 : set -> set -> set, (forall x48, x48 :e int -> (forall x49, x49 :e int -> x47 x48 x49 :e int)) -> (forall x48 : set -> set, (forall x49, x49 :e int -> x48 x49 :e int) -> (forall x49, x49 :e int -> (forall x50 : set -> set -> set, (forall x51, x51 :e int -> (forall x52, x52 :e int -> x50 x51 x52 :e int)) -> (forall x51 : set -> set, (forall x52, x52 :e int -> x51 x52 :e int) -> (forall x52 : set -> set, (forall x53, x53 :e int -> x52 x53 :e int) -> (forall x53, x53 :e int -> x0 x53 = add_SNo (add_SNo x53 x53) x53) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x1 x53 x54 = add_SNo x54 x54)) -> x2 = 1 -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x3 x53 x54 = If_i (SNoLe x53 0) x54 (x0 (x3 (add_SNo x53 (minus_SNo 1)) x54)))) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x4 x53 x54 = x3 (x1 x53 x54) x2)) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x5 x53 x54 = add_SNo (x4 x53 x54) (mul_SNo 2 (add_SNo (mul_SNo 2 (add_SNo x53 x53)) x53)))) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x6 x53 x54 = x54)) -> x7 = 1 -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x8 x53 x54 = If_i (SNoLe x53 0) x54 (x5 (x8 (add_SNo x53 (minus_SNo 1)) x54) x53))) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x9 x53 x54 = x8 (x6 x53 x54) x7)) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x10 x53 x54 = mul_SNo (add_SNo 2 x54) x53)) -> x11 = 2 -> (forall x53, x53 :e int -> x12 x53 = x53) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x13 x53 x54 = If_i (SNoLe x53 0) x54 (x10 (x13 (add_SNo x53 (minus_SNo 1)) x54) x53))) -> (forall x53, x53 :e int -> x14 x53 = x13 x11 (x12 x53)) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x15 x53 x54 = add_SNo (x9 x53 x54) (x14 x53))) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x16 x53 x54 = x54)) -> x17 = 1 -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x18 x53 x54 = If_i (SNoLe x53 0) x54 (x15 (x18 (add_SNo x53 (minus_SNo 1)) x54) x53))) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x19 x53 x54 = x18 (x16 x53 x54) x17)) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x20 x53 x54 = add_SNo (add_SNo (add_SNo (x19 x53 x54) x53) x53) x53)) -> (forall x53, x53 :e int -> x21 x53 = x53) -> x22 = 1 -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x23 x53 x54 = If_i (SNoLe x53 0) x54 (x20 (x23 (add_SNo x53 (minus_SNo 1)) x54) x53))) -> (forall x53, x53 :e int -> x24 x53 = x23 (x21 x53) x22) -> (forall x53, x53 :e int -> x25 x53 = x24 x53) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x26 x53 x54 = add_SNo (mul_SNo 2 (add_SNo x53 x53)) x54)) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x27 x53 x54 = add_SNo 1 (add_SNo (add_SNo x54 x54) x54))) -> (forall x53, x53 :e int -> x28 x53 = x53) -> x29 = 1 -> x30 = add_SNo 2 2 -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> (forall x55, x55 :e int -> x31 x53 x54 x55 = If_i (SNoLe x53 0) x54 (x26 (x31 (add_SNo x53 (minus_SNo 1)) x54 x55) (x32 (add_SNo x53 (minus_SNo 1)) x54 x55))))) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> (forall x55, x55 :e int -> x32 x53 x54 x55 = If_i (SNoLe x53 0) x55 (x27 (x31 (add_SNo x53 (minus_SNo 1)) x54 x55) (x32 (add_SNo x53 (minus_SNo 1)) x54 x55))))) -> (forall x53, x53 :e int -> x33 x53 = x31 (x28 x53) x29 x30) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x34 x53 x54 = mul_SNo x53 x54)) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x35 x53 x54 = x54)) -> (forall x53, x53 :e int -> x36 x53 = x53) -> x37 = 1 -> x38 = add_SNo 1 2 -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> (forall x55, x55 :e int -> x39 x53 x54 x55 = If_i (SNoLe x53 0) x54 (x34 (x39 (add_SNo x53 (minus_SNo 1)) x54 x55) (x40 (add_SNo x53 (minus_SNo 1)) x54 x55))))) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> (forall x55, x55 :e int -> x40 x53 x54 x55 = If_i (SNoLe x53 0) x55 (x35 (x39 (add_SNo x53 (minus_SNo 1)) x54 x55) (x40 (add_SNo x53 (minus_SNo 1)) x54 x55))))) -> (forall x53, x53 :e int -> x41 x53 = x39 (x36 x53) x37 x38) -> (forall x53, x53 :e int -> x42 x53 = mul_SNo (x33 x53) (x41 x53)) -> x43 = 1 -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x44 x53 x54 = x54)) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x45 x53 x54 = If_i (SNoLe x53 0) x54 (x42 (x45 (add_SNo x53 (minus_SNo 1)) x54)))) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x46 x53 x54 = x45 x43 (x44 x53 x54))) -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x47 x53 x54 = add_SNo (x46 x53 x54) (mul_SNo 2 (add_SNo (mul_SNo 2 (add_SNo x53 x53)) x53)))) -> (forall x53, x53 :e int -> x48 x53 = x53) -> x49 = 1 -> (forall x53, x53 :e int -> (forall x54, x54 :e int -> x50 x53 x54 = If_i (SNoLe x53 0) x54 (x47 (x50 (add_SNo x53 (minus_SNo 1)) x54) x53))) -> (forall x53, x53 :e int -> x51 x53 = x50 (x48 x53) x49) -> (forall x53, x53 :e int -> x52 x53 = x51 x53) -> (forall x53, x53 :e int -> SNoLe 0 x53 -> x25 x53 = x52 x53)))))))))))))))))))))))))))))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_6ee798b2292164af69269f883c06d66b21c80287fdafd77ed4d9efce8901cfc5 : (forall x0 : set -> set -> set, (forall x1, x1 :e int -> (forall x2, x2 :e int -> x0 x1 x2 :e int)) -> (forall x1 : set -> set -> set, (forall x2, x2 :e int -> (forall x3, x3 :e int -> x1 x2 x3 :e int)) -> (forall x2 : set -> set -> set, (forall x3, x3 :e int -> (forall x4, x4 :e int -> x2 x3 x4 :e int)) -> (forall x3, x3 :e int -> (forall x4, x4 :e int -> (forall x5 : set -> set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> (forall x8, x8 :e int -> x5 x6 x7 x8 :e int))) -> (forall x6 : set -> set -> set -> set, (forall x7, x7 :e int -> (forall x8, x8 :e int -> (forall x9, x9 :e int -> x6 x7 x8 x9 :e int))) -> (forall x7 : set -> set -> set, (forall x8, x8 :e int -> (forall x9, x9 :e int -> x7 x8 x9 :e int)) -> (forall x8 : set -> set -> set, (forall x9, x9 :e int -> (forall x10, x10 :e int -> x8 x9 x10 :e int)) -> (forall x9, x9 :e int -> (forall x10 : set -> set, (forall x11, x11 :e int -> x10 x11 :e int) -> (forall x11 : set -> set -> set, (forall x12, x12 :e int -> (forall x13, x13 :e int -> x11 x12 x13 :e int)) -> (forall x12 : set -> set, (forall x13, x13 :e int -> x12 x13 :e int) -> (forall x13 : set -> set -> set, (forall x14, x14 :e int -> (forall x15, x15 :e int -> x13 x14 x15 :e int)) -> (forall x14 : set -> set -> set, (forall x15, x15 :e int -> (forall x16, x16 :e int -> x14 x15 x16 :e int)) -> (forall x15, x15 :e int -> (forall x16 : set -> set -> set, (forall x17, x17 :e int -> (forall x18, x18 :e int -> x16 x17 x18 :e int)) -> (forall x17 : set -> set -> set, (forall x18, x18 :e int -> (forall x19, x19 :e int -> x17 x18 x19 :e int)) -> (forall x18 : set -> set -> set, (forall x19, x19 :e int -> (forall x20, x20 :e int -> x18 x19 x20 :e int)) -> (forall x19 : set -> set, (forall x20, x20 :e int -> x19 x20 :e int) -> (forall x20, x20 :e int -> (forall x21 : set -> set -> set, (forall x22, x22 :e int -> (forall x23, x23 :e int -> x21 x22 x23 :e int)) -> (forall x22 : set -> set, (forall x23, x23 :e int -> x22 x23 :e int) -> (forall x23 : set -> set, (forall x24, x24 :e int -> x23 x24 :e int) -> (forall x24 : set -> set, (forall x25, x25 :e int -> x24 x25 :e int) -> (forall x25 : set -> set, (forall x26, x26 :e int -> x25 x26 :e int) -> (forall x26 : set -> set, (forall x27, x27 :e int -> x26 x27 :e int) -> (forall x27 : set -> set, (forall x28, x28 :e int -> x27 x28 :e int) -> (forall x28, x28 :e int -> (forall x29 : set -> set -> set, (forall x30, x30 :e int -> (forall x31, x31 :e int -> x29 x30 x31 :e int)) -> (forall x30 : set -> set, (forall x31, x31 :e int -> x30 x31 :e int) -> (forall x31 : set -> set, (forall x32, x32 :e int -> x31 x32 :e int) -> (forall x32 : set -> set -> set, (forall x33, x33 :e int -> (forall x34, x34 :e int -> x32 x33 x34 :e int)) -> (forall x33 : set -> set, (forall x34, x34 :e int -> x33 x34 :e int) -> (forall x34 : set -> set, (forall x35, x35 :e int -> x34 x35 :e int) -> (forall x35, x35 :e int -> (forall x36 : set -> set -> set, (forall x37, x37 :e int -> (forall x38, x38 :e int -> x36 x37 x38 :e int)) -> (forall x37 : set -> set -> set, (forall x38, x38 :e int -> (forall x39, x39 :e int -> x37 x38 x39 :e int)) -> (forall x38 : set -> set -> set, (forall x39, x39 :e int -> (forall x40, x40 :e int -> x38 x39 x40 :e int)) -> (forall x39 : set -> set -> set, (forall x40, x40 :e int -> (forall x41, x41 :e int -> x39 x40 x41 :e int)) -> (forall x40 : set -> set -> set, (forall x41, x41 :e int -> (forall x42, x42 :e int -> x40 x41 x42 :e int)) -> (forall x41, x41 :e int -> (forall x42 : set -> set -> set, (forall x43, x43 :e int -> (forall x44, x44 :e int -> x42 x43 x44 :e int)) -> (forall x43 : set -> set -> set, (forall x44, x44 :e int -> (forall x45, x45 :e int -> x43 x44 x45 :e int)) -> (forall x44 : set -> set -> set, (forall x45, x45 :e int -> (forall x46, x46 :e int -> x44 x45 x46 :e int)) -> (forall x45 : set -> set, (forall x46, x46 :e int -> x45 x46 :e int) -> (forall x46, x46 :e int -> (forall x47 : set -> set -> set, (forall x48, x48 :e int -> (forall x49, x49 :e int -> x47 x48 x49 :e int)) -> (forall x48 : set -> set, (forall x49, x49 :e int -> x48 x49 :e int) -> (forall x49 : set -> set, (forall x50, x50 :e int -> x49 x50 :e int) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x0 x50 x51 = add_SNo (mul_SNo 2 (add_SNo (add_SNo x50 x50) x50)) (mul_SNo (mul_SNo x51 x51) x51))) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x1 x50 x51 = add_SNo x51 x51)) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x2 x50 x51 = x51)) -> x3 = 1 -> x4 = 2 -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x5 x50 x51 x52 = If_i (SNoLe x50 0) x51 (x0 (x5 (add_SNo x50 (minus_SNo 1)) x51 x52) (x6 (add_SNo x50 (minus_SNo 1)) x51 x52))))) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x6 x50 x51 x52 = If_i (SNoLe x50 0) x52 (x1 (x5 (add_SNo x50 (minus_SNo 1)) x51 x52) (x6 (add_SNo x50 (minus_SNo 1)) x51 x52))))) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x7 x50 x51 = x5 (x2 x50 x51) x3 x4)) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x8 x50 x51 = mul_SNo (add_SNo 2 x51) x50)) -> x9 = 2 -> (forall x50, x50 :e int -> x10 x50 = x50) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x11 x50 x51 = If_i (SNoLe x50 0) x51 (x8 (x11 (add_SNo x50 (minus_SNo 1)) x51) x50))) -> (forall x50, x50 :e int -> x12 x50 = x11 x9 (x10 x50)) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x13 x50 x51 = add_SNo (add_SNo (x7 x50 x51) (minus_SNo x50)) (x12 x50))) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x14 x50 x51 = x51)) -> x15 = 1 -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x16 x50 x51 = If_i (SNoLe x50 0) x51 (x13 (x16 (add_SNo x50 (minus_SNo 1)) x51) x50))) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x17 x50 x51 = x16 (x14 x50 x51) x15)) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x18 x50 x51 = add_SNo (add_SNo (add_SNo (x17 x50 x51) x50) x50) x50)) -> (forall x50, x50 :e int -> x19 x50 = x50) -> x20 = 1 -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x21 x50 x51 = If_i (SNoLe x50 0) x51 (x18 (x21 (add_SNo x50 (minus_SNo 1)) x51) x50))) -> (forall x50, x50 :e int -> x22 x50 = x21 (x19 x50) x20) -> (forall x50, x50 :e int -> x23 x50 = x22 x50) -> (forall x50, x50 :e int -> x24 x50 = add_SNo (add_SNo x50 x50) x50) -> (forall x50, x50 :e int -> x25 x50 = x50) -> (forall x50, x50 :e int -> x26 x50 = add_SNo x50 x50) -> (forall x50, x50 :e int -> x27 x50 = x50) -> x28 = 2 -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x29 x50 x51 = If_i (SNoLe x50 0) x51 (x26 (x29 (add_SNo x50 (minus_SNo 1)) x51)))) -> (forall x50, x50 :e int -> x30 x50 = x29 (x27 x50) x28) -> (forall x50, x50 :e int -> x31 x50 = add_SNo (x30 x50) (minus_SNo 1)) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x32 x50 x51 = If_i (SNoLe x50 0) x51 (x24 (x32 (add_SNo x50 (minus_SNo 1)) x51)))) -> (forall x50, x50 :e int -> x33 x50 = x32 (x25 x50) (x31 x50)) -> (forall x50, x50 :e int -> x34 x50 = x33 x50) -> x35 = 1 -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x36 x50 x51 = x51)) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x37 x50 x51 = If_i (SNoLe x50 0) x51 (x34 (x37 (add_SNo x50 (minus_SNo 1)) x51)))) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x38 x50 x51 = x37 x35 (x36 x50 x51))) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x39 x50 x51 = add_SNo (x38 x50 x51) (mul_SNo 2 (mul_SNo 2 (add_SNo x50 x50))))) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x40 x50 x51 = x51)) -> x41 = 1 -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x42 x50 x51 = If_i (SNoLe x50 0) x51 (x39 (x42 (add_SNo x50 (minus_SNo 1)) x51) x50))) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x43 x50 x51 = x42 (x40 x50 x51) x41)) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x44 x50 x51 = add_SNo (add_SNo (x43 x50 x51) (mul_SNo 2 (add_SNo (mul_SNo 2 (add_SNo x50 x50)) x50))) x50)) -> (forall x50, x50 :e int -> x45 x50 = x50) -> x46 = 1 -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x47 x50 x51 = If_i (SNoLe x50 0) x51 (x44 (x47 (add_SNo x50 (minus_SNo 1)) x51) x50))) -> (forall x50, x50 :e int -> x48 x50 = x47 (x45 x50) x46) -> (forall x50, x50 :e int -> x49 x50 = x48 x50) -> (forall x50, x50 :e int -> SNoLe 0 x50 -> x23 x50 = x49 x50))))))))))))))))))))))))))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_309bc419ed0c8b525e919bc4e660a62bd7d0a5855dc373f609734601344e5b30 : (forall x0 : set -> set -> set, (forall x1, x1 :e int -> (forall x2, x2 :e int -> x0 x1 x2 :e int)) -> (forall x1 : set -> set -> set, (forall x2, x2 :e int -> (forall x3, x3 :e int -> x1 x2 x3 :e int)) -> (forall x2 : set -> set -> set, (forall x3, x3 :e int -> (forall x4, x4 :e int -> x2 x3 x4 :e int)) -> (forall x3, x3 :e int -> (forall x4, x4 :e int -> (forall x5 : set -> set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> (forall x8, x8 :e int -> x5 x6 x7 x8 :e int))) -> (forall x6 : set -> set -> set -> set, (forall x7, x7 :e int -> (forall x8, x8 :e int -> (forall x9, x9 :e int -> x6 x7 x8 x9 :e int))) -> (forall x7 : set -> set -> set, (forall x8, x8 :e int -> (forall x9, x9 :e int -> x7 x8 x9 :e int)) -> (forall x8 : set -> set -> set, (forall x9, x9 :e int -> (forall x10, x10 :e int -> x8 x9 x10 :e int)) -> (forall x9 : set -> set -> set, (forall x10, x10 :e int -> (forall x11, x11 :e int -> x9 x10 x11 :e int)) -> (forall x10, x10 :e int -> (forall x11 : set -> set -> set, (forall x12, x12 :e int -> (forall x13, x13 :e int -> x11 x12 x13 :e int)) -> (forall x12 : set -> set -> set, (forall x13, x13 :e int -> (forall x14, x14 :e int -> x12 x13 x14 :e int)) -> (forall x13 : set -> set -> set, (forall x14, x14 :e int -> (forall x15, x15 :e int -> x13 x14 x15 :e int)) -> (forall x14 : set -> set, (forall x15, x15 :e int -> x14 x15 :e int) -> (forall x15, x15 :e int -> (forall x16 : set -> set -> set, (forall x17, x17 :e int -> (forall x18, x18 :e int -> x16 x17 x18 :e int)) -> (forall x17 : set -> set, (forall x18, x18 :e int -> x17 x18 :e int) -> (forall x18 : set -> set, (forall x19, x19 :e int -> x18 x19 :e int) -> (forall x19 : set -> set, (forall x20, x20 :e int -> x19 x20 :e int) -> (forall x20 : set -> set, (forall x21, x21 :e int -> x20 x21 :e int) -> (forall x21 : set -> set, (forall x22, x22 :e int -> x21 x22 :e int) -> (forall x22 : set -> set, (forall x23, x23 :e int -> x22 x23 :e int) -> (forall x23, x23 :e int -> (forall x24 : set -> set -> set, (forall x25, x25 :e int -> (forall x26, x26 :e int -> x24 x25 x26 :e int)) -> (forall x25 : set -> set, (forall x26, x26 :e int -> x25 x26 :e int) -> (forall x26 : set -> set, (forall x27, x27 :e int -> x26 x27 :e int) -> (forall x27 : set -> set -> set, (forall x28, x28 :e int -> (forall x29, x29 :e int -> x27 x28 x29 :e int)) -> (forall x28 : set -> set, (forall x29, x29 :e int -> x28 x29 :e int) -> (forall x29 : set -> set, (forall x30, x30 :e int -> x29 x30 :e int) -> (forall x30, x30 :e int -> (forall x31 : set -> set -> set, (forall x32, x32 :e int -> (forall x33, x33 :e int -> x31 x32 x33 :e int)) -> (forall x32 : set -> set -> set, (forall x33, x33 :e int -> (forall x34, x34 :e int -> x32 x33 x34 :e int)) -> (forall x33 : set -> set -> set, (forall x34, x34 :e int -> (forall x35, x35 :e int -> x33 x34 x35 :e int)) -> (forall x34 : set -> set -> set, (forall x35, x35 :e int -> (forall x36, x36 :e int -> x34 x35 x36 :e int)) -> (forall x35 : set -> set -> set, (forall x36, x36 :e int -> (forall x37, x37 :e int -> x35 x36 x37 :e int)) -> (forall x36, x36 :e int -> (forall x37 : set -> set -> set, (forall x38, x38 :e int -> (forall x39, x39 :e int -> x37 x38 x39 :e int)) -> (forall x38 : set -> set -> set, (forall x39, x39 :e int -> (forall x40, x40 :e int -> x38 x39 x40 :e int)) -> (forall x39 : set -> set -> set, (forall x40, x40 :e int -> (forall x41, x41 :e int -> x39 x40 x41 :e int)) -> (forall x40 : set -> set, (forall x41, x41 :e int -> x40 x41 :e int) -> (forall x41, x41 :e int -> (forall x42 : set -> set -> set, (forall x43, x43 :e int -> (forall x44, x44 :e int -> x42 x43 x44 :e int)) -> (forall x43 : set -> set, (forall x44, x44 :e int -> x43 x44 :e int) -> (forall x44 : set -> set, (forall x45, x45 :e int -> x44 x45 :e int) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x0 x45 x46 = add_SNo (mul_SNo 2 (add_SNo (add_SNo x45 x45) x45)) (mul_SNo (mul_SNo x46 x46) x46))) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x1 x45 x46 = add_SNo x46 x46)) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x2 x45 x46 = x46)) -> x3 = 1 -> x4 = 2 -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> (forall x47, x47 :e int -> x5 x45 x46 x47 = If_i (SNoLe x45 0) x46 (x0 (x5 (add_SNo x45 (minus_SNo 1)) x46 x47) (x6 (add_SNo x45 (minus_SNo 1)) x46 x47))))) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> (forall x47, x47 :e int -> x6 x45 x46 x47 = If_i (SNoLe x45 0) x47 (x1 (x5 (add_SNo x45 (minus_SNo 1)) x46 x47) (x6 (add_SNo x45 (minus_SNo 1)) x46 x47))))) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x7 x45 x46 = x5 (x2 x45 x46) x3 x4)) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x8 x45 x46 = add_SNo (x7 x45 x46) (mul_SNo 2 (add_SNo (mul_SNo 2 (add_SNo x45 x45)) x45)))) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x9 x45 x46 = x46)) -> x10 = 1 -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x11 x45 x46 = If_i (SNoLe x45 0) x46 (x8 (x11 (add_SNo x45 (minus_SNo 1)) x46) x45))) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x12 x45 x46 = x11 (x9 x45 x46) x10)) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x13 x45 x46 = add_SNo (add_SNo (add_SNo (x12 x45 x46) x45) x45) x45)) -> (forall x45, x45 :e int -> x14 x45 = x45) -> x15 = 1 -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x16 x45 x46 = If_i (SNoLe x45 0) x46 (x13 (x16 (add_SNo x45 (minus_SNo 1)) x46) x45))) -> (forall x45, x45 :e int -> x17 x45 = x16 (x14 x45) x15) -> (forall x45, x45 :e int -> x18 x45 = x17 x45) -> (forall x45, x45 :e int -> x19 x45 = add_SNo (add_SNo x45 x45) x45) -> (forall x45, x45 :e int -> x20 x45 = x45) -> (forall x45, x45 :e int -> x21 x45 = add_SNo x45 x45) -> (forall x45, x45 :e int -> x22 x45 = x45) -> x23 = 2 -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x24 x45 x46 = If_i (SNoLe x45 0) x46 (x21 (x24 (add_SNo x45 (minus_SNo 1)) x46)))) -> (forall x45, x45 :e int -> x25 x45 = x24 (x22 x45) x23) -> (forall x45, x45 :e int -> x26 x45 = add_SNo (x25 x45) (minus_SNo 1)) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x27 x45 x46 = If_i (SNoLe x45 0) x46 (x19 (x27 (add_SNo x45 (minus_SNo 1)) x46)))) -> (forall x45, x45 :e int -> x28 x45 = x27 (x20 x45) (x26 x45)) -> (forall x45, x45 :e int -> x29 x45 = x28 x45) -> x30 = 1 -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x31 x45 x46 = x46)) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x32 x45 x46 = If_i (SNoLe x45 0) x46 (x29 (x32 (add_SNo x45 (minus_SNo 1)) x46)))) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x33 x45 x46 = x32 x30 (x31 x45 x46))) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x34 x45 x46 = add_SNo (x33 x45 x46) (mul_SNo 2 (mul_SNo 2 (add_SNo x45 x45))))) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x35 x45 x46 = x46)) -> x36 = 1 -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x37 x45 x46 = If_i (SNoLe x45 0) x46 (x34 (x37 (add_SNo x45 (minus_SNo 1)) x46) x45))) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x38 x45 x46 = x37 (x35 x45 x46) x36)) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x39 x45 x46 = add_SNo (x38 x45 x46) (mul_SNo 2 (add_SNo (mul_SNo 2 (add_SNo x45 x45)) x45)))) -> (forall x45, x45 :e int -> x40 x45 = x45) -> x41 = 1 -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x42 x45 x46 = If_i (SNoLe x45 0) x46 (x39 (x42 (add_SNo x45 (minus_SNo 1)) x46) x45))) -> (forall x45, x45 :e int -> x43 x45 = x42 (x40 x45) x41) -> (forall x45, x45 :e int -> x44 x45 = x43 x45) -> (forall x45, x45 :e int -> SNoLe 0 x45 -> x18 x45 = x44 x45)))))))))))))))))))))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_c788fce7ac8c8b84064236ae3f136d150b875241f4b89bf654a6c1d1a445a7e2 : (forall x0 : set -> set, (forall x1, x1 :e int -> x0 x1 :e int) -> (forall x1 : set -> set, (forall x2, x2 :e int -> x1 x2 :e int) -> (forall x2 : set -> set, (forall x3, x3 :e int -> x2 x3 :e int) -> (forall x3 : set -> set, (forall x4, x4 :e int -> x3 x4 :e int) -> (forall x4, x4 :e int -> (forall x5 : set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> x5 x6 x7 :e int)) -> (forall x6 : set -> set, (forall x7, x7 :e int -> x6 x7 :e int) -> (forall x7 : set -> set, (forall x8, x8 :e int -> x7 x8 :e int) -> (forall x8 : set -> set -> set, (forall x9, x9 :e int -> (forall x10, x10 :e int -> x8 x9 x10 :e int)) -> (forall x9 : set -> set, (forall x10, x10 :e int -> x9 x10 :e int) -> (forall x10 : set -> set, (forall x11, x11 :e int -> x10 x11 :e int) -> (forall x11, x11 :e int -> (forall x12 : set -> set -> set, (forall x13, x13 :e int -> (forall x14, x14 :e int -> x12 x13 x14 :e int)) -> (forall x13 : set -> set -> set, (forall x14, x14 :e int -> (forall x15, x15 :e int -> x13 x14 x15 :e int)) -> (forall x14 : set -> set -> set, (forall x15, x15 :e int -> (forall x16, x16 :e int -> x14 x15 x16 :e int)) -> (forall x15 : set -> set -> set, (forall x16, x16 :e int -> (forall x17, x17 :e int -> x15 x16 x17 :e int)) -> (forall x16, x16 :e int -> (forall x17 : set -> set, (forall x18, x18 :e int -> x17 x18 :e int) -> (forall x18 : set -> set -> set, (forall x19, x19 :e int -> (forall x20, x20 :e int -> x18 x19 x20 :e int)) -> (forall x19 : set -> set, (forall x20, x20 :e int -> x19 x20 :e int) -> (forall x20 : set -> set -> set, (forall x21, x21 :e int -> (forall x22, x22 :e int -> x20 x21 x22 :e int)) -> (forall x21 : set -> set -> set, (forall x22, x22 :e int -> (forall x23, x23 :e int -> x21 x22 x23 :e int)) -> (forall x22, x22 :e int -> (forall x23 : set -> set -> set, (forall x24, x24 :e int -> (forall x25, x25 :e int -> x23 x24 x25 :e int)) -> (forall x24 : set -> set -> set, (forall x25, x25 :e int -> (forall x26, x26 :e int -> x24 x25 x26 :e int)) -> (forall x25 : set -> set -> set, (forall x26, x26 :e int -> (forall x27, x27 :e int -> x25 x26 x27 :e int)) -> (forall x26 : set -> set, (forall x27, x27 :e int -> x26 x27 :e int) -> (forall x27, x27 :e int -> (forall x28 : set -> set -> set, (forall x29, x29 :e int -> (forall x30, x30 :e int -> x28 x29 x30 :e int)) -> (forall x29 : set -> set, (forall x30, x30 :e int -> x29 x30 :e int) -> (forall x30 : set -> set, (forall x31, x31 :e int -> x30 x31 :e int) -> (forall x31 : set -> set, (forall x32, x32 :e int -> x31 x32 :e int) -> (forall x32 : set -> set, (forall x33, x33 :e int -> x32 x33 :e int) -> (forall x33, x33 :e int -> (forall x34 : set -> set -> set, (forall x35, x35 :e int -> (forall x36, x36 :e int -> x34 x35 x36 :e int)) -> (forall x35 : set -> set, (forall x36, x36 :e int -> x35 x36 :e int) -> (forall x36 : set -> set -> set, (forall x37, x37 :e int -> (forall x38, x38 :e int -> x36 x37 x38 :e int)) -> (forall x37 : set -> set -> set, (forall x38, x38 :e int -> (forall x39, x39 :e int -> x37 x38 x39 :e int)) -> (forall x38 : set -> set, (forall x39, x39 :e int -> x38 x39 :e int) -> (forall x39, x39 :e int -> (forall x40, x40 :e int -> (forall x41 : set -> set -> set -> set, (forall x42, x42 :e int -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x41 x42 x43 x44 :e int))) -> (forall x42 : set -> set -> set -> set, (forall x43, x43 :e int -> (forall x44, x44 :e int -> (forall x45, x45 :e int -> x42 x43 x44 x45 :e int))) -> (forall x43 : set -> set, (forall x44, x44 :e int -> x43 x44 :e int) -> (forall x44 : set -> set, (forall x45, x45 :e int -> x44 x45 :e int) -> (forall x45, x45 :e int -> (forall x46 : set -> set -> set, (forall x47, x47 :e int -> (forall x48, x48 :e int -> x46 x47 x48 :e int)) -> (forall x47 : set -> set -> set, (forall x48, x48 :e int -> (forall x49, x49 :e int -> x47 x48 x49 :e int)) -> (forall x48 : set -> set -> set, (forall x49, x49 :e int -> (forall x50, x50 :e int -> x48 x49 x50 :e int)) -> (forall x49 : set -> set -> set, (forall x50, x50 :e int -> (forall x51, x51 :e int -> x49 x50 x51 :e int)) -> (forall x50 : set -> set, (forall x51, x51 :e int -> x50 x51 :e int) -> (forall x51, x51 :e int -> (forall x52 : set -> set -> set, (forall x53, x53 :e int -> (forall x54, x54 :e int -> x52 x53 x54 :e int)) -> (forall x53 : set -> set, (forall x54, x54 :e int -> x53 x54 :e int) -> (forall x54 : set -> set, (forall x55, x55 :e int -> x54 x55 :e int) -> (forall x55, x55 :e int -> (forall x56 : set -> set -> set, (forall x57, x57 :e int -> (forall x58, x58 :e int -> x56 x57 x58 :e int)) -> (forall x57 : set -> set -> set, (forall x58, x58 :e int -> (forall x59, x59 :e int -> x57 x58 x59 :e int)) -> (forall x58 : set -> set -> set, (forall x59, x59 :e int -> (forall x60, x60 :e int -> x58 x59 x60 :e int)) -> (forall x59 : set -> set -> set, (forall x60, x60 :e int -> (forall x61, x61 :e int -> x59 x60 x61 :e int)) -> (forall x60 : set -> set, (forall x61, x61 :e int -> x60 x61 :e int) -> (forall x61, x61 :e int -> (forall x62 : set -> set -> set, (forall x63, x63 :e int -> (forall x64, x64 :e int -> x62 x63 x64 :e int)) -> (forall x63 : set -> set, (forall x64, x64 :e int -> x63 x64 :e int) -> (forall x64 : set -> set, (forall x65, x65 :e int -> x64 x65 :e int) -> (forall x65, x65 :e int -> x0 x65 = add_SNo (mul_SNo 2 (add_SNo x65 x65)) x65) -> (forall x65, x65 :e int -> x1 x65 = x65) -> (forall x65, x65 :e int -> x2 x65 = add_SNo x65 x65) -> (forall x65, x65 :e int -> x3 x65 = x65) -> x4 = 2 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x5 x65 x66 = If_i (SNoLe x65 0) x66 (x2 (x5 (add_SNo x65 (minus_SNo 1)) x66)))) -> (forall x65, x65 :e int -> x6 x65 = x5 (x3 x65) x4) -> (forall x65, x65 :e int -> x7 x65 = add_SNo (x6 x65) (minus_SNo 1)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x8 x65 x66 = If_i (SNoLe x65 0) x66 (x0 (x8 (add_SNo x65 (minus_SNo 1)) x66)))) -> (forall x65, x65 :e int -> x9 x65 = x8 (x1 x65) (x7 x65)) -> (forall x65, x65 :e int -> x10 x65 = x9 x65) -> x11 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x12 x65 x66 = x66)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x13 x65 x66 = If_i (SNoLe x65 0) x66 (x10 (x13 (add_SNo x65 (minus_SNo 1)) x66)))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x14 x65 x66 = x13 x11 (x12 x65 x66))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x15 x65 x66 = mul_SNo (add_SNo 2 x66) x65)) -> x16 = 2 -> (forall x65, x65 :e int -> x17 x65 = x65) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x18 x65 x66 = If_i (SNoLe x65 0) x66 (x15 (x18 (add_SNo x65 (minus_SNo 1)) x66) x65))) -> (forall x65, x65 :e int -> x19 x65 = x18 x16 (x17 x65)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x20 x65 x66 = add_SNo (x14 x65 x66) (add_SNo (x19 x65) (minus_SNo x65)))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x21 x65 x66 = x66)) -> x22 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x23 x65 x66 = If_i (SNoLe x65 0) x66 (x20 (x23 (add_SNo x65 (minus_SNo 1)) x66) x65))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x24 x65 x66 = x23 (x21 x65 x66) x22)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x25 x65 x66 = add_SNo (add_SNo (add_SNo (x24 x65 x66) x65) x65) x65)) -> (forall x65, x65 :e int -> x26 x65 = x65) -> x27 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x28 x65 x66 = If_i (SNoLe x65 0) x66 (x25 (x28 (add_SNo x65 (minus_SNo 1)) x66) x65))) -> (forall x65, x65 :e int -> x29 x65 = x28 (x26 x65) x27) -> (forall x65, x65 :e int -> x30 x65 = x29 x65) -> (forall x65, x65 :e int -> x31 x65 = add_SNo x65 x65) -> (forall x65, x65 :e int -> x32 x65 = x65) -> x33 = 2 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x34 x65 x66 = If_i (SNoLe x65 0) x66 (x31 (x34 (add_SNo x65 (minus_SNo 1)) x66)))) -> (forall x65, x65 :e int -> x35 x65 = x34 (x32 x65) x33) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x36 x65 x66 = mul_SNo x65 x66)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x37 x65 x66 = x66)) -> (forall x65, x65 :e int -> x38 x65 = x65) -> x39 = 1 -> x40 = add_SNo 1 (add_SNo 2 2) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> (forall x67, x67 :e int -> x41 x65 x66 x67 = If_i (SNoLe x65 0) x66 (x36 (x41 (add_SNo x65 (minus_SNo 1)) x66 x67) (x42 (add_SNo x65 (minus_SNo 1)) x66 x67))))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> (forall x67, x67 :e int -> x42 x65 x66 x67 = If_i (SNoLe x65 0) x67 (x37 (x41 (add_SNo x65 (minus_SNo 1)) x66 x67) (x42 (add_SNo x65 (minus_SNo 1)) x66 x67))))) -> (forall x65, x65 :e int -> x43 x65 = x41 (x38 x65) x39 x40) -> (forall x65, x65 :e int -> x44 x65 = mul_SNo (add_SNo (x35 x65) (minus_SNo 1)) (x43 x65)) -> x45 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x46 x65 x66 = x66)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x47 x65 x66 = If_i (SNoLe x65 0) x66 (x44 (x47 (add_SNo x65 (minus_SNo 1)) x66)))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x48 x65 x66 = x47 x45 (x46 x65 x66))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x49 x65 x66 = add_SNo (add_SNo (add_SNo (x48 x65 x66) x65) x65) x65)) -> (forall x65, x65 :e int -> x50 x65 = x65) -> x51 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x52 x65 x66 = If_i (SNoLe x65 0) x66 (x49 (x52 (add_SNo x65 (minus_SNo 1)) x66) x65))) -> (forall x65, x65 :e int -> x53 x65 = x52 (x50 x65) x51) -> (forall x65, x65 :e int -> x54 x65 = x53 x65) -> x55 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x56 x65 x66 = x66)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x57 x65 x66 = If_i (SNoLe x65 0) x66 (x54 (x57 (add_SNo x65 (minus_SNo 1)) x66)))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x58 x65 x66 = x57 x55 (x56 x65 x66))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x59 x65 x66 = add_SNo (add_SNo (x58 x65 x66) (mul_SNo (add_SNo (mul_SNo (add_SNo x65 x65) 2) x65) 2)) x65)) -> (forall x65, x65 :e int -> x60 x65 = x65) -> x61 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x62 x65 x66 = If_i (SNoLe x65 0) x66 (x59 (x62 (add_SNo x65 (minus_SNo 1)) x66) x65))) -> (forall x65, x65 :e int -> x63 x65 = x62 (x60 x65) x61) -> (forall x65, x65 :e int -> x64 x65 = x63 x65) -> (forall x65, x65 :e int -> SNoLe 0 x65 -> x30 x65 = x64 x65)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_f53befc047ee28d5578db11bb36c5fdec39ff40374d4ae30deaec312628e8980 : (forall x0 : set -> set, (forall x1, x1 :e int -> x0 x1 :e int) -> (forall x1 : set -> set, (forall x2, x2 :e int -> x1 x2 :e int) -> (forall x2 : set -> set, (forall x3, x3 :e int -> x2 x3 :e int) -> (forall x3 : set -> set, (forall x4, x4 :e int -> x3 x4 :e int) -> (forall x4, x4 :e int -> (forall x5 : set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> x5 x6 x7 :e int)) -> (forall x6 : set -> set, (forall x7, x7 :e int -> x6 x7 :e int) -> (forall x7 : set -> set, (forall x8, x8 :e int -> x7 x8 :e int) -> (forall x8 : set -> set -> set, (forall x9, x9 :e int -> (forall x10, x10 :e int -> x8 x9 x10 :e int)) -> (forall x9 : set -> set, (forall x10, x10 :e int -> x9 x10 :e int) -> (forall x10 : set -> set, (forall x11, x11 :e int -> x10 x11 :e int) -> (forall x11, x11 :e int -> (forall x12 : set -> set -> set, (forall x13, x13 :e int -> (forall x14, x14 :e int -> x12 x13 x14 :e int)) -> (forall x13 : set -> set -> set, (forall x14, x14 :e int -> (forall x15, x15 :e int -> x13 x14 x15 :e int)) -> (forall x14 : set -> set -> set, (forall x15, x15 :e int -> (forall x16, x16 :e int -> x14 x15 x16 :e int)) -> (forall x15 : set -> set -> set, (forall x16, x16 :e int -> (forall x17, x17 :e int -> x15 x16 x17 :e int)) -> (forall x16 : set -> set -> set, (forall x17, x17 :e int -> (forall x18, x18 :e int -> x16 x17 x18 :e int)) -> (forall x17, x17 :e int -> (forall x18 : set -> set -> set, (forall x19, x19 :e int -> (forall x20, x20 :e int -> x18 x19 x20 :e int)) -> (forall x19 : set -> set -> set, (forall x20, x20 :e int -> (forall x21, x21 :e int -> x19 x20 x21 :e int)) -> (forall x20 : set -> set -> set, (forall x21, x21 :e int -> (forall x22, x22 :e int -> x20 x21 x22 :e int)) -> (forall x21 : set -> set, (forall x22, x22 :e int -> x21 x22 :e int) -> (forall x22, x22 :e int -> (forall x23 : set -> set -> set, (forall x24, x24 :e int -> (forall x25, x25 :e int -> x23 x24 x25 :e int)) -> (forall x24 : set -> set, (forall x25, x25 :e int -> x24 x25 :e int) -> (forall x25 : set -> set, (forall x26, x26 :e int -> x25 x26 :e int) -> (forall x26 : set -> set, (forall x27, x27 :e int -> x26 x27 :e int) -> (forall x27 : set -> set, (forall x28, x28 :e int -> x27 x28 :e int) -> (forall x28, x28 :e int -> (forall x29 : set -> set -> set, (forall x30, x30 :e int -> (forall x31, x31 :e int -> x29 x30 x31 :e int)) -> (forall x30 : set -> set, (forall x31, x31 :e int -> x30 x31 :e int) -> (forall x31 : set -> set -> set, (forall x32, x32 :e int -> (forall x33, x33 :e int -> x31 x32 x33 :e int)) -> (forall x32 : set -> set -> set, (forall x33, x33 :e int -> (forall x34, x34 :e int -> x32 x33 x34 :e int)) -> (forall x33 : set -> set, (forall x34, x34 :e int -> x33 x34 :e int) -> (forall x34, x34 :e int -> (forall x35, x35 :e int -> (forall x36 : set -> set -> set -> set, (forall x37, x37 :e int -> (forall x38, x38 :e int -> (forall x39, x39 :e int -> x36 x37 x38 x39 :e int))) -> (forall x37 : set -> set -> set -> set, (forall x38, x38 :e int -> (forall x39, x39 :e int -> (forall x40, x40 :e int -> x37 x38 x39 x40 :e int))) -> (forall x38 : set -> set, (forall x39, x39 :e int -> x38 x39 :e int) -> (forall x39 : set -> set, (forall x40, x40 :e int -> x39 x40 :e int) -> (forall x40, x40 :e int -> (forall x41 : set -> set -> set, (forall x42, x42 :e int -> (forall x43, x43 :e int -> x41 x42 x43 :e int)) -> (forall x42 : set -> set -> set, (forall x43, x43 :e int -> (forall x44, x44 :e int -> x42 x43 x44 :e int)) -> (forall x43 : set -> set -> set, (forall x44, x44 :e int -> (forall x45, x45 :e int -> x43 x44 x45 :e int)) -> (forall x44 : set -> set -> set, (forall x45, x45 :e int -> (forall x46, x46 :e int -> x44 x45 x46 :e int)) -> (forall x45 : set -> set, (forall x46, x46 :e int -> x45 x46 :e int) -> (forall x46, x46 :e int -> (forall x47 : set -> set -> set, (forall x48, x48 :e int -> (forall x49, x49 :e int -> x47 x48 x49 :e int)) -> (forall x48 : set -> set, (forall x49, x49 :e int -> x48 x49 :e int) -> (forall x49 : set -> set, (forall x50, x50 :e int -> x49 x50 :e int) -> (forall x50, x50 :e int -> (forall x51 : set -> set -> set, (forall x52, x52 :e int -> (forall x53, x53 :e int -> x51 x52 x53 :e int)) -> (forall x52 : set -> set -> set, (forall x53, x53 :e int -> (forall x54, x54 :e int -> x52 x53 x54 :e int)) -> (forall x53 : set -> set -> set, (forall x54, x54 :e int -> (forall x55, x55 :e int -> x53 x54 x55 :e int)) -> (forall x54 : set -> set -> set, (forall x55, x55 :e int -> (forall x56, x56 :e int -> x54 x55 x56 :e int)) -> (forall x55 : set -> set, (forall x56, x56 :e int -> x55 x56 :e int) -> (forall x56, x56 :e int -> (forall x57 : set -> set -> set, (forall x58, x58 :e int -> (forall x59, x59 :e int -> x57 x58 x59 :e int)) -> (forall x58 : set -> set, (forall x59, x59 :e int -> x58 x59 :e int) -> (forall x59 : set -> set, (forall x60, x60 :e int -> x59 x60 :e int) -> (forall x60, x60 :e int -> x0 x60 = add_SNo (mul_SNo 2 (add_SNo x60 x60)) x60) -> (forall x60, x60 :e int -> x1 x60 = x60) -> (forall x60, x60 :e int -> x2 x60 = add_SNo x60 x60) -> (forall x60, x60 :e int -> x3 x60 = x60) -> x4 = 2 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x5 x60 x61 = If_i (SNoLe x60 0) x61 (x2 (x5 (add_SNo x60 (minus_SNo 1)) x61)))) -> (forall x60, x60 :e int -> x6 x60 = x5 (x3 x60) x4) -> (forall x60, x60 :e int -> x7 x60 = add_SNo (x6 x60) (minus_SNo 1)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x8 x60 x61 = If_i (SNoLe x60 0) x61 (x0 (x8 (add_SNo x60 (minus_SNo 1)) x61)))) -> (forall x60, x60 :e int -> x9 x60 = x8 (x1 x60) (x7 x60)) -> (forall x60, x60 :e int -> x10 x60 = x9 x60) -> x11 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x12 x60 x61 = x61)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x13 x60 x61 = If_i (SNoLe x60 0) x61 (x10 (x13 (add_SNo x60 (minus_SNo 1)) x61)))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x14 x60 x61 = x13 x11 (x12 x60 x61))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x15 x60 x61 = add_SNo (x14 x60 x61) (mul_SNo 2 (mul_SNo 2 (add_SNo x60 x60))))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x16 x60 x61 = x61)) -> x17 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x18 x60 x61 = If_i (SNoLe x60 0) x61 (x15 (x18 (add_SNo x60 (minus_SNo 1)) x61) x60))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x19 x60 x61 = x18 (x16 x60 x61) x17)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x20 x60 x61 = add_SNo (add_SNo (add_SNo (x19 x60 x61) x60) x60) x60)) -> (forall x60, x60 :e int -> x21 x60 = x60) -> x22 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x23 x60 x61 = If_i (SNoLe x60 0) x61 (x20 (x23 (add_SNo x60 (minus_SNo 1)) x61) x60))) -> (forall x60, x60 :e int -> x24 x60 = x23 (x21 x60) x22) -> (forall x60, x60 :e int -> x25 x60 = x24 x60) -> (forall x60, x60 :e int -> x26 x60 = add_SNo x60 x60) -> (forall x60, x60 :e int -> x27 x60 = x60) -> x28 = 2 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x29 x60 x61 = If_i (SNoLe x60 0) x61 (x26 (x29 (add_SNo x60 (minus_SNo 1)) x61)))) -> (forall x60, x60 :e int -> x30 x60 = x29 (x27 x60) x28) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x31 x60 x61 = mul_SNo x60 x61)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x32 x60 x61 = x61)) -> (forall x60, x60 :e int -> x33 x60 = x60) -> x34 = 1 -> x35 = add_SNo 1 (add_SNo 2 2) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> (forall x62, x62 :e int -> x36 x60 x61 x62 = If_i (SNoLe x60 0) x61 (x31 (x36 (add_SNo x60 (minus_SNo 1)) x61 x62) (x37 (add_SNo x60 (minus_SNo 1)) x61 x62))))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> (forall x62, x62 :e int -> x37 x60 x61 x62 = If_i (SNoLe x60 0) x62 (x32 (x36 (add_SNo x60 (minus_SNo 1)) x61 x62) (x37 (add_SNo x60 (minus_SNo 1)) x61 x62))))) -> (forall x60, x60 :e int -> x38 x60 = x36 (x33 x60) x34 x35) -> (forall x60, x60 :e int -> x39 x60 = mul_SNo (add_SNo (x30 x60) (minus_SNo 1)) (x38 x60)) -> x40 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x41 x60 x61 = x61)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x42 x60 x61 = If_i (SNoLe x60 0) x61 (x39 (x42 (add_SNo x60 (minus_SNo 1)) x61)))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x43 x60 x61 = x42 x40 (x41 x60 x61))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x44 x60 x61 = add_SNo (add_SNo (add_SNo (x43 x60 x61) x60) x60) x60)) -> (forall x60, x60 :e int -> x45 x60 = x60) -> x46 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x47 x60 x61 = If_i (SNoLe x60 0) x61 (x44 (x47 (add_SNo x60 (minus_SNo 1)) x61) x60))) -> (forall x60, x60 :e int -> x48 x60 = x47 (x45 x60) x46) -> (forall x60, x60 :e int -> x49 x60 = x48 x60) -> x50 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x51 x60 x61 = x61)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x52 x60 x61 = If_i (SNoLe x60 0) x61 (x49 (x52 (add_SNo x60 (minus_SNo 1)) x61)))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x53 x60 x61 = x52 x50 (x51 x60 x61))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x54 x60 x61 = add_SNo (x53 x60 x61) (mul_SNo (mul_SNo (add_SNo x60 x60) 2) 2))) -> (forall x60, x60 :e int -> x55 x60 = x60) -> x56 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x57 x60 x61 = If_i (SNoLe x60 0) x61 (x54 (x57 (add_SNo x60 (minus_SNo 1)) x61) x60))) -> (forall x60, x60 :e int -> x58 x60 = x57 (x55 x60) x56) -> (forall x60, x60 :e int -> x59 x60 = x58 x60) -> (forall x60, x60 :e int -> SNoLe 0 x60 -> x25 x60 = x59 x60))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_6d7ab080ae7c0f7fa8df295d0503455445d1c3d91ae18930f3473c8c6370dfb0 : (forall x0 : set -> set, (forall x1, x1 :e int -> x0 x1 :e int) -> (forall x1 : set -> set, (forall x2, x2 :e int -> x1 x2 :e int) -> (forall x2 : set -> set, (forall x3, x3 :e int -> x2 x3 :e int) -> (forall x3 : set -> set, (forall x4, x4 :e int -> x3 x4 :e int) -> (forall x4, x4 :e int -> (forall x5 : set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> x5 x6 x7 :e int)) -> (forall x6 : set -> set, (forall x7, x7 :e int -> x6 x7 :e int) -> (forall x7 : set -> set, (forall x8, x8 :e int -> x7 x8 :e int) -> (forall x8 : set -> set -> set, (forall x9, x9 :e int -> (forall x10, x10 :e int -> x8 x9 x10 :e int)) -> (forall x9 : set -> set, (forall x10, x10 :e int -> x9 x10 :e int) -> (forall x10 : set -> set, (forall x11, x11 :e int -> x10 x11 :e int) -> (forall x11, x11 :e int -> (forall x12 : set -> set -> set, (forall x13, x13 :e int -> (forall x14, x14 :e int -> x12 x13 x14 :e int)) -> (forall x13 : set -> set -> set, (forall x14, x14 :e int -> (forall x15, x15 :e int -> x13 x14 x15 :e int)) -> (forall x14 : set -> set -> set, (forall x15, x15 :e int -> (forall x16, x16 :e int -> x14 x15 x16 :e int)) -> (forall x15 : set -> set -> set, (forall x16, x16 :e int -> (forall x17, x17 :e int -> x15 x16 x17 :e int)) -> (forall x16 : set -> set -> set, (forall x17, x17 :e int -> (forall x18, x18 :e int -> x16 x17 x18 :e int)) -> (forall x17, x17 :e int -> (forall x18 : set -> set -> set, (forall x19, x19 :e int -> (forall x20, x20 :e int -> x18 x19 x20 :e int)) -> (forall x19 : set -> set -> set, (forall x20, x20 :e int -> (forall x21, x21 :e int -> x19 x20 x21 :e int)) -> (forall x20 : set -> set -> set, (forall x21, x21 :e int -> (forall x22, x22 :e int -> x20 x21 x22 :e int)) -> (forall x21 : set -> set, (forall x22, x22 :e int -> x21 x22 :e int) -> (forall x22, x22 :e int -> (forall x23 : set -> set -> set, (forall x24, x24 :e int -> (forall x25, x25 :e int -> x23 x24 x25 :e int)) -> (forall x24 : set -> set, (forall x25, x25 :e int -> x24 x25 :e int) -> (forall x25 : set -> set, (forall x26, x26 :e int -> x25 x26 :e int) -> (forall x26 : set -> set, (forall x27, x27 :e int -> x26 x27 :e int) -> (forall x27 : set -> set, (forall x28, x28 :e int -> x27 x28 :e int) -> (forall x28, x28 :e int -> (forall x29 : set -> set -> set, (forall x30, x30 :e int -> (forall x31, x31 :e int -> x29 x30 x31 :e int)) -> (forall x30 : set -> set, (forall x31, x31 :e int -> x30 x31 :e int) -> (forall x31 : set -> set -> set, (forall x32, x32 :e int -> (forall x33, x33 :e int -> x31 x32 x33 :e int)) -> (forall x32 : set -> set -> set, (forall x33, x33 :e int -> (forall x34, x34 :e int -> x32 x33 x34 :e int)) -> (forall x33 : set -> set, (forall x34, x34 :e int -> x33 x34 :e int) -> (forall x34, x34 :e int -> (forall x35, x35 :e int -> (forall x36 : set -> set -> set -> set, (forall x37, x37 :e int -> (forall x38, x38 :e int -> (forall x39, x39 :e int -> x36 x37 x38 x39 :e int))) -> (forall x37 : set -> set -> set -> set, (forall x38, x38 :e int -> (forall x39, x39 :e int -> (forall x40, x40 :e int -> x37 x38 x39 x40 :e int))) -> (forall x38 : set -> set, (forall x39, x39 :e int -> x38 x39 :e int) -> (forall x39 : set -> set, (forall x40, x40 :e int -> x39 x40 :e int) -> (forall x40, x40 :e int -> (forall x41 : set -> set -> set, (forall x42, x42 :e int -> (forall x43, x43 :e int -> x41 x42 x43 :e int)) -> (forall x42 : set -> set -> set, (forall x43, x43 :e int -> (forall x44, x44 :e int -> x42 x43 x44 :e int)) -> (forall x43 : set -> set -> set, (forall x44, x44 :e int -> (forall x45, x45 :e int -> x43 x44 x45 :e int)) -> (forall x44 : set -> set -> set, (forall x45, x45 :e int -> (forall x46, x46 :e int -> x44 x45 x46 :e int)) -> (forall x45 : set -> set, (forall x46, x46 :e int -> x45 x46 :e int) -> (forall x46, x46 :e int -> (forall x47 : set -> set -> set, (forall x48, x48 :e int -> (forall x49, x49 :e int -> x47 x48 x49 :e int)) -> (forall x48 : set -> set, (forall x49, x49 :e int -> x48 x49 :e int) -> (forall x49 : set -> set, (forall x50, x50 :e int -> x49 x50 :e int) -> (forall x50, x50 :e int -> (forall x51 : set -> set -> set, (forall x52, x52 :e int -> (forall x53, x53 :e int -> x51 x52 x53 :e int)) -> (forall x52 : set -> set -> set, (forall x53, x53 :e int -> (forall x54, x54 :e int -> x52 x53 x54 :e int)) -> (forall x53 : set -> set -> set, (forall x54, x54 :e int -> (forall x55, x55 :e int -> x53 x54 x55 :e int)) -> (forall x54 : set -> set -> set, (forall x55, x55 :e int -> (forall x56, x56 :e int -> x54 x55 x56 :e int)) -> (forall x55 : set -> set, (forall x56, x56 :e int -> x55 x56 :e int) -> (forall x56, x56 :e int -> (forall x57 : set -> set -> set, (forall x58, x58 :e int -> (forall x59, x59 :e int -> x57 x58 x59 :e int)) -> (forall x58 : set -> set, (forall x59, x59 :e int -> x58 x59 :e int) -> (forall x59 : set -> set, (forall x60, x60 :e int -> x59 x60 :e int) -> (forall x60, x60 :e int -> x0 x60 = add_SNo (mul_SNo 2 (add_SNo x60 x60)) x60) -> (forall x60, x60 :e int -> x1 x60 = x60) -> (forall x60, x60 :e int -> x2 x60 = add_SNo x60 x60) -> (forall x60, x60 :e int -> x3 x60 = x60) -> x4 = 2 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x5 x60 x61 = If_i (SNoLe x60 0) x61 (x2 (x5 (add_SNo x60 (minus_SNo 1)) x61)))) -> (forall x60, x60 :e int -> x6 x60 = x5 (x3 x60) x4) -> (forall x60, x60 :e int -> x7 x60 = add_SNo (x6 x60) (minus_SNo 1)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x8 x60 x61 = If_i (SNoLe x60 0) x61 (x0 (x8 (add_SNo x60 (minus_SNo 1)) x61)))) -> (forall x60, x60 :e int -> x9 x60 = x8 (x1 x60) (x7 x60)) -> (forall x60, x60 :e int -> x10 x60 = x9 x60) -> x11 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x12 x60 x61 = x61)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x13 x60 x61 = If_i (SNoLe x60 0) x61 (x10 (x13 (add_SNo x60 (minus_SNo 1)) x61)))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x14 x60 x61 = x13 x11 (x12 x60 x61))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x15 x60 x61 = add_SNo (add_SNo (x14 x60 x61) (mul_SNo 2 (add_SNo (add_SNo x60 x60) x60))) x60)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x16 x60 x61 = x61)) -> x17 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x18 x60 x61 = If_i (SNoLe x60 0) x61 (x15 (x18 (add_SNo x60 (minus_SNo 1)) x61) x60))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x19 x60 x61 = x18 (x16 x60 x61) x17)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x20 x60 x61 = add_SNo (add_SNo (add_SNo (x19 x60 x61) x60) x60) x60)) -> (forall x60, x60 :e int -> x21 x60 = x60) -> x22 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x23 x60 x61 = If_i (SNoLe x60 0) x61 (x20 (x23 (add_SNo x60 (minus_SNo 1)) x61) x60))) -> (forall x60, x60 :e int -> x24 x60 = x23 (x21 x60) x22) -> (forall x60, x60 :e int -> x25 x60 = x24 x60) -> (forall x60, x60 :e int -> x26 x60 = add_SNo x60 x60) -> (forall x60, x60 :e int -> x27 x60 = x60) -> x28 = 2 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x29 x60 x61 = If_i (SNoLe x60 0) x61 (x26 (x29 (add_SNo x60 (minus_SNo 1)) x61)))) -> (forall x60, x60 :e int -> x30 x60 = x29 (x27 x60) x28) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x31 x60 x61 = mul_SNo x60 x61)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x32 x60 x61 = x61)) -> (forall x60, x60 :e int -> x33 x60 = x60) -> x34 = 1 -> x35 = add_SNo 1 (add_SNo 2 2) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> (forall x62, x62 :e int -> x36 x60 x61 x62 = If_i (SNoLe x60 0) x61 (x31 (x36 (add_SNo x60 (minus_SNo 1)) x61 x62) (x37 (add_SNo x60 (minus_SNo 1)) x61 x62))))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> (forall x62, x62 :e int -> x37 x60 x61 x62 = If_i (SNoLe x60 0) x62 (x32 (x36 (add_SNo x60 (minus_SNo 1)) x61 x62) (x37 (add_SNo x60 (minus_SNo 1)) x61 x62))))) -> (forall x60, x60 :e int -> x38 x60 = x36 (x33 x60) x34 x35) -> (forall x60, x60 :e int -> x39 x60 = mul_SNo (add_SNo (x30 x60) (minus_SNo 1)) (x38 x60)) -> x40 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x41 x60 x61 = x61)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x42 x60 x61 = If_i (SNoLe x60 0) x61 (x39 (x42 (add_SNo x60 (minus_SNo 1)) x61)))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x43 x60 x61 = x42 x40 (x41 x60 x61))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x44 x60 x61 = add_SNo (add_SNo (add_SNo (x43 x60 x61) x60) x60) x60)) -> (forall x60, x60 :e int -> x45 x60 = x60) -> x46 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x47 x60 x61 = If_i (SNoLe x60 0) x61 (x44 (x47 (add_SNo x60 (minus_SNo 1)) x61) x60))) -> (forall x60, x60 :e int -> x48 x60 = x47 (x45 x60) x46) -> (forall x60, x60 :e int -> x49 x60 = x48 x60) -> x50 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x51 x60 x61 = x61)) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x52 x60 x61 = If_i (SNoLe x60 0) x61 (x49 (x52 (add_SNo x60 (minus_SNo 1)) x61)))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x53 x60 x61 = x52 x50 (x51 x60 x61))) -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x54 x60 x61 = add_SNo (add_SNo (x53 x60 x61) x60) (mul_SNo (add_SNo (add_SNo x60 x60) x60) 2))) -> (forall x60, x60 :e int -> x55 x60 = x60) -> x56 = 1 -> (forall x60, x60 :e int -> (forall x61, x61 :e int -> x57 x60 x61 = If_i (SNoLe x60 0) x61 (x54 (x57 (add_SNo x60 (minus_SNo 1)) x61) x60))) -> (forall x60, x60 :e int -> x58 x60 = x57 (x55 x60) x56) -> (forall x60, x60 :e int -> x59 x60 = x58 x60) -> (forall x60, x60 :e int -> SNoLe 0 x60 -> x25 x60 = x59 x60))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_eb9221ff59ae8d2c13f9a46d2b5b3984e58fe046c247c03256ea33e16ced846a : (forall x0 : set -> set, (forall x1, x1 :e int -> x0 x1 :e int) -> (forall x1 : set -> set, (forall x2, x2 :e int -> x1 x2 :e int) -> (forall x2 : set -> set, (forall x3, x3 :e int -> x2 x3 :e int) -> (forall x3 : set -> set, (forall x4, x4 :e int -> x3 x4 :e int) -> (forall x4, x4 :e int -> (forall x5 : set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> x5 x6 x7 :e int)) -> (forall x6 : set -> set, (forall x7, x7 :e int -> x6 x7 :e int) -> (forall x7 : set -> set, (forall x8, x8 :e int -> x7 x8 :e int) -> (forall x8 : set -> set -> set, (forall x9, x9 :e int -> (forall x10, x10 :e int -> x8 x9 x10 :e int)) -> (forall x9 : set -> set, (forall x10, x10 :e int -> x9 x10 :e int) -> (forall x10 : set -> set, (forall x11, x11 :e int -> x10 x11 :e int) -> (forall x11, x11 :e int -> (forall x12 : set -> set -> set, (forall x13, x13 :e int -> (forall x14, x14 :e int -> x12 x13 x14 :e int)) -> (forall x13 : set -> set -> set, (forall x14, x14 :e int -> (forall x15, x15 :e int -> x13 x14 x15 :e int)) -> (forall x14 : set -> set -> set, (forall x15, x15 :e int -> (forall x16, x16 :e int -> x14 x15 x16 :e int)) -> (forall x15 : set -> set -> set, (forall x16, x16 :e int -> (forall x17, x17 :e int -> x15 x16 x17 :e int)) -> (forall x16, x16 :e int -> (forall x17 : set -> set, (forall x18, x18 :e int -> x17 x18 :e int) -> (forall x18 : set -> set -> set, (forall x19, x19 :e int -> (forall x20, x20 :e int -> x18 x19 x20 :e int)) -> (forall x19 : set -> set, (forall x20, x20 :e int -> x19 x20 :e int) -> (forall x20 : set -> set -> set, (forall x21, x21 :e int -> (forall x22, x22 :e int -> x20 x21 x22 :e int)) -> (forall x21 : set -> set -> set, (forall x22, x22 :e int -> (forall x23, x23 :e int -> x21 x22 x23 :e int)) -> (forall x22, x22 :e int -> (forall x23 : set -> set -> set, (forall x24, x24 :e int -> (forall x25, x25 :e int -> x23 x24 x25 :e int)) -> (forall x24 : set -> set -> set, (forall x25, x25 :e int -> (forall x26, x26 :e int -> x24 x25 x26 :e int)) -> (forall x25 : set -> set -> set, (forall x26, x26 :e int -> (forall x27, x27 :e int -> x25 x26 x27 :e int)) -> (forall x26 : set -> set, (forall x27, x27 :e int -> x26 x27 :e int) -> (forall x27, x27 :e int -> (forall x28 : set -> set -> set, (forall x29, x29 :e int -> (forall x30, x30 :e int -> x28 x29 x30 :e int)) -> (forall x29 : set -> set, (forall x30, x30 :e int -> x29 x30 :e int) -> (forall x30 : set -> set, (forall x31, x31 :e int -> x30 x31 :e int) -> (forall x31 : set -> set, (forall x32, x32 :e int -> x31 x32 :e int) -> (forall x32 : set -> set, (forall x33, x33 :e int -> x32 x33 :e int) -> (forall x33, x33 :e int -> (forall x34 : set -> set -> set, (forall x35, x35 :e int -> (forall x36, x36 :e int -> x34 x35 x36 :e int)) -> (forall x35 : set -> set, (forall x36, x36 :e int -> x35 x36 :e int) -> (forall x36 : set -> set -> set, (forall x37, x37 :e int -> (forall x38, x38 :e int -> x36 x37 x38 :e int)) -> (forall x37 : set -> set -> set, (forall x38, x38 :e int -> (forall x39, x39 :e int -> x37 x38 x39 :e int)) -> (forall x38 : set -> set, (forall x39, x39 :e int -> x38 x39 :e int) -> (forall x39, x39 :e int -> (forall x40, x40 :e int -> (forall x41 : set -> set -> set -> set, (forall x42, x42 :e int -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x41 x42 x43 x44 :e int))) -> (forall x42 : set -> set -> set -> set, (forall x43, x43 :e int -> (forall x44, x44 :e int -> (forall x45, x45 :e int -> x42 x43 x44 x45 :e int))) -> (forall x43 : set -> set, (forall x44, x44 :e int -> x43 x44 :e int) -> (forall x44 : set -> set, (forall x45, x45 :e int -> x44 x45 :e int) -> (forall x45, x45 :e int -> (forall x46 : set -> set -> set, (forall x47, x47 :e int -> (forall x48, x48 :e int -> x46 x47 x48 :e int)) -> (forall x47 : set -> set -> set, (forall x48, x48 :e int -> (forall x49, x49 :e int -> x47 x48 x49 :e int)) -> (forall x48 : set -> set -> set, (forall x49, x49 :e int -> (forall x50, x50 :e int -> x48 x49 x50 :e int)) -> (forall x49 : set -> set -> set, (forall x50, x50 :e int -> (forall x51, x51 :e int -> x49 x50 x51 :e int)) -> (forall x50 : set -> set, (forall x51, x51 :e int -> x50 x51 :e int) -> (forall x51, x51 :e int -> (forall x52 : set -> set -> set, (forall x53, x53 :e int -> (forall x54, x54 :e int -> x52 x53 x54 :e int)) -> (forall x53 : set -> set, (forall x54, x54 :e int -> x53 x54 :e int) -> (forall x54 : set -> set, (forall x55, x55 :e int -> x54 x55 :e int) -> (forall x55, x55 :e int -> (forall x56 : set -> set -> set, (forall x57, x57 :e int -> (forall x58, x58 :e int -> x56 x57 x58 :e int)) -> (forall x57 : set -> set -> set, (forall x58, x58 :e int -> (forall x59, x59 :e int -> x57 x58 x59 :e int)) -> (forall x58 : set -> set -> set, (forall x59, x59 :e int -> (forall x60, x60 :e int -> x58 x59 x60 :e int)) -> (forall x59 : set -> set -> set, (forall x60, x60 :e int -> (forall x61, x61 :e int -> x59 x60 x61 :e int)) -> (forall x60 : set -> set, (forall x61, x61 :e int -> x60 x61 :e int) -> (forall x61, x61 :e int -> (forall x62 : set -> set -> set, (forall x63, x63 :e int -> (forall x64, x64 :e int -> x62 x63 x64 :e int)) -> (forall x63 : set -> set, (forall x64, x64 :e int -> x63 x64 :e int) -> (forall x64 : set -> set, (forall x65, x65 :e int -> x64 x65 :e int) -> (forall x65, x65 :e int -> x0 x65 = add_SNo (add_SNo x65 x65) x65) -> (forall x65, x65 :e int -> x1 x65 = x65) -> (forall x65, x65 :e int -> x2 x65 = add_SNo x65 x65) -> (forall x65, x65 :e int -> x3 x65 = x65) -> x4 = 2 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x5 x65 x66 = If_i (SNoLe x65 0) x66 (x2 (x5 (add_SNo x65 (minus_SNo 1)) x66)))) -> (forall x65, x65 :e int -> x6 x65 = x5 (x3 x65) x4) -> (forall x65, x65 :e int -> x7 x65 = add_SNo (x6 x65) (minus_SNo 1)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x8 x65 x66 = If_i (SNoLe x65 0) x66 (x0 (x8 (add_SNo x65 (minus_SNo 1)) x66)))) -> (forall x65, x65 :e int -> x9 x65 = x8 (x1 x65) (x7 x65)) -> (forall x65, x65 :e int -> x10 x65 = x9 x65) -> x11 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x12 x65 x66 = x66)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x13 x65 x66 = If_i (SNoLe x65 0) x66 (x10 (x13 (add_SNo x65 (minus_SNo 1)) x66)))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x14 x65 x66 = x13 x11 (x12 x65 x66))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x15 x65 x66 = mul_SNo (add_SNo 2 x66) x65)) -> x16 = 2 -> (forall x65, x65 :e int -> x17 x65 = x65) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x18 x65 x66 = If_i (SNoLe x65 0) x66 (x15 (x18 (add_SNo x65 (minus_SNo 1)) x66) x65))) -> (forall x65, x65 :e int -> x19 x65 = x18 x16 (x17 x65)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x20 x65 x66 = add_SNo (x14 x65 x66) (add_SNo (x19 x65) (minus_SNo x65)))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x21 x65 x66 = x66)) -> x22 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x23 x65 x66 = If_i (SNoLe x65 0) x66 (x20 (x23 (add_SNo x65 (minus_SNo 1)) x66) x65))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x24 x65 x66 = x23 (x21 x65 x66) x22)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x25 x65 x66 = add_SNo (add_SNo (x24 x65 x66) (mul_SNo 2 (add_SNo x65 x65))) x65)) -> (forall x65, x65 :e int -> x26 x65 = x65) -> x27 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x28 x65 x66 = If_i (SNoLe x65 0) x66 (x25 (x28 (add_SNo x65 (minus_SNo 1)) x66) x65))) -> (forall x65, x65 :e int -> x29 x65 = x28 (x26 x65) x27) -> (forall x65, x65 :e int -> x30 x65 = x29 x65) -> (forall x65, x65 :e int -> x31 x65 = add_SNo x65 x65) -> (forall x65, x65 :e int -> x32 x65 = x65) -> x33 = 2 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x34 x65 x66 = If_i (SNoLe x65 0) x66 (x31 (x34 (add_SNo x65 (minus_SNo 1)) x66)))) -> (forall x65, x65 :e int -> x35 x65 = x34 (x32 x65) x33) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x36 x65 x66 = mul_SNo x65 x66)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x37 x65 x66 = x66)) -> (forall x65, x65 :e int -> x38 x65 = x65) -> x39 = 1 -> x40 = add_SNo 1 2 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> (forall x67, x67 :e int -> x41 x65 x66 x67 = If_i (SNoLe x65 0) x66 (x36 (x41 (add_SNo x65 (minus_SNo 1)) x66 x67) (x42 (add_SNo x65 (minus_SNo 1)) x66 x67))))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> (forall x67, x67 :e int -> x42 x65 x66 x67 = If_i (SNoLe x65 0) x67 (x37 (x41 (add_SNo x65 (minus_SNo 1)) x66 x67) (x42 (add_SNo x65 (minus_SNo 1)) x66 x67))))) -> (forall x65, x65 :e int -> x43 x65 = x41 (x38 x65) x39 x40) -> (forall x65, x65 :e int -> x44 x65 = mul_SNo (add_SNo (x35 x65) (minus_SNo 1)) (x43 x65)) -> x45 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x46 x65 x66 = x66)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x47 x65 x66 = If_i (SNoLe x65 0) x66 (x44 (x47 (add_SNo x65 (minus_SNo 1)) x66)))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x48 x65 x66 = x47 x45 (x46 x65 x66))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x49 x65 x66 = add_SNo (add_SNo (x48 x65 x66) (mul_SNo 2 (add_SNo x65 x65))) x65)) -> (forall x65, x65 :e int -> x50 x65 = x65) -> x51 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x52 x65 x66 = If_i (SNoLe x65 0) x66 (x49 (x52 (add_SNo x65 (minus_SNo 1)) x66) x65))) -> (forall x65, x65 :e int -> x53 x65 = x52 (x50 x65) x51) -> (forall x65, x65 :e int -> x54 x65 = x53 x65) -> x55 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x56 x65 x66 = x66)) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x57 x65 x66 = If_i (SNoLe x65 0) x66 (x54 (x57 (add_SNo x65 (minus_SNo 1)) x66)))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x58 x65 x66 = x57 x55 (x56 x65 x66))) -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x59 x65 x66 = add_SNo (add_SNo (x58 x65 x66) x65) (mul_SNo (add_SNo (mul_SNo (mul_SNo x65 2) 2) x65) 2))) -> (forall x65, x65 :e int -> x60 x65 = x65) -> x61 = 1 -> (forall x65, x65 :e int -> (forall x66, x66 :e int -> x62 x65 x66 = If_i (SNoLe x65 0) x66 (x59 (x62 (add_SNo x65 (minus_SNo 1)) x66) x65))) -> (forall x65, x65 :e int -> x63 x65 = x62 (x60 x65) x61) -> (forall x65, x65 :e int -> x64 x65 = x63 x65) -> (forall x65, x65 :e int -> SNoLe 0 x65 -> x30 x65 = x64 x65)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_b66b91e25157d40ccdb374c85673db27061580005f7aec0fb50e1f448e9f7855 : (forall x0 : set -> set -> set, (forall x1, x1 :e int -> (forall x2, x2 :e int -> x0 x1 x2 :e int)) -> (forall x1 : set -> set -> set, (forall x2, x2 :e int -> (forall x3, x3 :e int -> x1 x2 x3 :e int)) -> (forall x2 : set -> set -> set, (forall x3, x3 :e int -> (forall x4, x4 :e int -> x2 x3 x4 :e int)) -> (forall x3, x3 :e int -> (forall x4, x4 :e int -> (forall x5 : set -> set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> (forall x8, x8 :e int -> x5 x6 x7 x8 :e int))) -> (forall x6 : set -> set -> set -> set, (forall x7, x7 :e int -> (forall x8, x8 :e int -> (forall x9, x9 :e int -> x6 x7 x8 x9 :e int))) -> (forall x7 : set -> set -> set, (forall x8, x8 :e int -> (forall x9, x9 :e int -> x7 x8 x9 :e int)) -> (forall x8 : set -> set -> set, (forall x9, x9 :e int -> (forall x10, x10 :e int -> x8 x9 x10 :e int)) -> (forall x9, x9 :e int -> (forall x10 : set -> set, (forall x11, x11 :e int -> x10 x11 :e int) -> (forall x11 : set -> set -> set, (forall x12, x12 :e int -> (forall x13, x13 :e int -> x11 x12 x13 :e int)) -> (forall x12 : set -> set, (forall x13, x13 :e int -> x12 x13 :e int) -> (forall x13 : set -> set -> set, (forall x14, x14 :e int -> (forall x15, x15 :e int -> x13 x14 x15 :e int)) -> (forall x14 : set -> set -> set, (forall x15, x15 :e int -> (forall x16, x16 :e int -> x14 x15 x16 :e int)) -> (forall x15, x15 :e int -> (forall x16 : set -> set -> set, (forall x17, x17 :e int -> (forall x18, x18 :e int -> x16 x17 x18 :e int)) -> (forall x17 : set -> set -> set, (forall x18, x18 :e int -> (forall x19, x19 :e int -> x17 x18 x19 :e int)) -> (forall x18 : set -> set -> set, (forall x19, x19 :e int -> (forall x20, x20 :e int -> x18 x19 x20 :e int)) -> (forall x19 : set -> set, (forall x20, x20 :e int -> x19 x20 :e int) -> (forall x20, x20 :e int -> (forall x21 : set -> set -> set, (forall x22, x22 :e int -> (forall x23, x23 :e int -> x21 x22 x23 :e int)) -> (forall x22 : set -> set, (forall x23, x23 :e int -> x22 x23 :e int) -> (forall x23 : set -> set, (forall x24, x24 :e int -> x23 x24 :e int) -> (forall x24 : set -> set, (forall x25, x25 :e int -> x24 x25 :e int) -> (forall x25 : set -> set, (forall x26, x26 :e int -> x25 x26 :e int) -> (forall x26 : set -> set, (forall x27, x27 :e int -> x26 x27 :e int) -> (forall x27 : set -> set, (forall x28, x28 :e int -> x27 x28 :e int) -> (forall x28, x28 :e int -> (forall x29 : set -> set -> set, (forall x30, x30 :e int -> (forall x31, x31 :e int -> x29 x30 x31 :e int)) -> (forall x30 : set -> set, (forall x31, x31 :e int -> x30 x31 :e int) -> (forall x31 : set -> set, (forall x32, x32 :e int -> x31 x32 :e int) -> (forall x32 : set -> set -> set, (forall x33, x33 :e int -> (forall x34, x34 :e int -> x32 x33 x34 :e int)) -> (forall x33 : set -> set, (forall x34, x34 :e int -> x33 x34 :e int) -> (forall x34 : set -> set, (forall x35, x35 :e int -> x34 x35 :e int) -> (forall x35, x35 :e int -> (forall x36 : set -> set -> set, (forall x37, x37 :e int -> (forall x38, x38 :e int -> x36 x37 x38 :e int)) -> (forall x37 : set -> set -> set, (forall x38, x38 :e int -> (forall x39, x39 :e int -> x37 x38 x39 :e int)) -> (forall x38 : set -> set -> set, (forall x39, x39 :e int -> (forall x40, x40 :e int -> x38 x39 x40 :e int)) -> (forall x39 : set -> set -> set, (forall x40, x40 :e int -> (forall x41, x41 :e int -> x39 x40 x41 :e int)) -> (forall x40 : set -> set -> set, (forall x41, x41 :e int -> (forall x42, x42 :e int -> x40 x41 x42 :e int)) -> (forall x41, x41 :e int -> (forall x42 : set -> set -> set, (forall x43, x43 :e int -> (forall x44, x44 :e int -> x42 x43 x44 :e int)) -> (forall x43 : set -> set -> set, (forall x44, x44 :e int -> (forall x45, x45 :e int -> x43 x44 x45 :e int)) -> (forall x44 : set -> set -> set, (forall x45, x45 :e int -> (forall x46, x46 :e int -> x44 x45 x46 :e int)) -> (forall x45 : set -> set, (forall x46, x46 :e int -> x45 x46 :e int) -> (forall x46, x46 :e int -> (forall x47 : set -> set -> set, (forall x48, x48 :e int -> (forall x49, x49 :e int -> x47 x48 x49 :e int)) -> (forall x48 : set -> set, (forall x49, x49 :e int -> x48 x49 :e int) -> (forall x49 : set -> set, (forall x50, x50 :e int -> x49 x50 :e int) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x0 x50 x51 = add_SNo (mul_SNo 2 (add_SNo (add_SNo x50 x50) x50)) (mul_SNo x51 x51))) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x1 x50 x51 = add_SNo x51 x51)) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x2 x50 x51 = x51)) -> x3 = 1 -> x4 = 2 -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x5 x50 x51 x52 = If_i (SNoLe x50 0) x51 (x0 (x5 (add_SNo x50 (minus_SNo 1)) x51 x52) (x6 (add_SNo x50 (minus_SNo 1)) x51 x52))))) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> (forall x52, x52 :e int -> x6 x50 x51 x52 = If_i (SNoLe x50 0) x52 (x1 (x5 (add_SNo x50 (minus_SNo 1)) x51 x52) (x6 (add_SNo x50 (minus_SNo 1)) x51 x52))))) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x7 x50 x51 = x5 (x2 x50 x51) x3 x4)) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x8 x50 x51 = mul_SNo (add_SNo 2 x51) x50)) -> x9 = 2 -> (forall x50, x50 :e int -> x10 x50 = x50) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x11 x50 x51 = If_i (SNoLe x50 0) x51 (x8 (x11 (add_SNo x50 (minus_SNo 1)) x51) x50))) -> (forall x50, x50 :e int -> x12 x50 = x11 x9 (x10 x50)) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x13 x50 x51 = add_SNo (add_SNo (x7 x50 x51) (minus_SNo x50)) (x12 x50))) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x14 x50 x51 = x51)) -> x15 = 1 -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x16 x50 x51 = If_i (SNoLe x50 0) x51 (x13 (x16 (add_SNo x50 (minus_SNo 1)) x51) x50))) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x17 x50 x51 = x16 (x14 x50 x51) x15)) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x18 x50 x51 = add_SNo (add_SNo (add_SNo (x17 x50 x51) x50) x50) x50)) -> (forall x50, x50 :e int -> x19 x50 = x50) -> x20 = 1 -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x21 x50 x51 = If_i (SNoLe x50 0) x51 (x18 (x21 (add_SNo x50 (minus_SNo 1)) x51) x50))) -> (forall x50, x50 :e int -> x22 x50 = x21 (x19 x50) x20) -> (forall x50, x50 :e int -> x23 x50 = x22 x50) -> (forall x50, x50 :e int -> x24 x50 = add_SNo (add_SNo x50 x50) x50) -> (forall x50, x50 :e int -> x25 x50 = x50) -> (forall x50, x50 :e int -> x26 x50 = add_SNo x50 x50) -> (forall x50, x50 :e int -> x27 x50 = x50) -> x28 = 2 -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x29 x50 x51 = If_i (SNoLe x50 0) x51 (x26 (x29 (add_SNo x50 (minus_SNo 1)) x51)))) -> (forall x50, x50 :e int -> x30 x50 = x29 (x27 x50) x28) -> (forall x50, x50 :e int -> x31 x50 = add_SNo (x30 x50) (minus_SNo 1)) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x32 x50 x51 = If_i (SNoLe x50 0) x51 (x24 (x32 (add_SNo x50 (minus_SNo 1)) x51)))) -> (forall x50, x50 :e int -> x33 x50 = x32 (x25 x50) (x31 x50)) -> (forall x50, x50 :e int -> x34 x50 = x33 x50) -> x35 = 1 -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x36 x50 x51 = x51)) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x37 x50 x51 = If_i (SNoLe x50 0) x51 (x34 (x37 (add_SNo x50 (minus_SNo 1)) x51)))) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x38 x50 x51 = x37 x35 (x36 x50 x51))) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x39 x50 x51 = add_SNo (x38 x50 x51) (mul_SNo 2 (add_SNo x50 x50)))) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x40 x50 x51 = x51)) -> x41 = 1 -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x42 x50 x51 = If_i (SNoLe x50 0) x51 (x39 (x42 (add_SNo x50 (minus_SNo 1)) x51) x50))) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x43 x50 x51 = x42 (x40 x50 x51) x41)) -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x44 x50 x51 = add_SNo (add_SNo (x43 x50 x51) (mul_SNo 2 (add_SNo (mul_SNo 2 (add_SNo x50 x50)) x50))) x50)) -> (forall x50, x50 :e int -> x45 x50 = x50) -> x46 = 1 -> (forall x50, x50 :e int -> (forall x51, x51 :e int -> x47 x50 x51 = If_i (SNoLe x50 0) x51 (x44 (x47 (add_SNo x50 (minus_SNo 1)) x51) x50))) -> (forall x50, x50 :e int -> x48 x50 = x47 (x45 x50) x46) -> (forall x50, x50 :e int -> x49 x50 = x48 x50) -> (forall x50, x50 :e int -> SNoLe 0 x50 -> x23 x50 = x49 x50))))))))))))))))))))))))))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_8df14d979e6a417e27655611947479c53ac5395a4af5b771368f3c48ba8d4298 : (forall x0 : set -> set -> set, (forall x1, x1 :e int -> (forall x2, x2 :e int -> x0 x1 x2 :e int)) -> (forall x1 : set -> set -> set, (forall x2, x2 :e int -> (forall x3, x3 :e int -> x1 x2 x3 :e int)) -> (forall x2 : set -> set -> set, (forall x3, x3 :e int -> (forall x4, x4 :e int -> x2 x3 x4 :e int)) -> (forall x3, x3 :e int -> (forall x4, x4 :e int -> (forall x5 : set -> set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> (forall x8, x8 :e int -> x5 x6 x7 x8 :e int))) -> (forall x6 : set -> set -> set -> set, (forall x7, x7 :e int -> (forall x8, x8 :e int -> (forall x9, x9 :e int -> x6 x7 x8 x9 :e int))) -> (forall x7 : set -> set -> set, (forall x8, x8 :e int -> (forall x9, x9 :e int -> x7 x8 x9 :e int)) -> (forall x8 : set -> set -> set, (forall x9, x9 :e int -> (forall x10, x10 :e int -> x8 x9 x10 :e int)) -> (forall x9 : set -> set -> set, (forall x10, x10 :e int -> (forall x11, x11 :e int -> x9 x10 x11 :e int)) -> (forall x10, x10 :e int -> (forall x11 : set -> set -> set, (forall x12, x12 :e int -> (forall x13, x13 :e int -> x11 x12 x13 :e int)) -> (forall x12 : set -> set -> set, (forall x13, x13 :e int -> (forall x14, x14 :e int -> x12 x13 x14 :e int)) -> (forall x13 : set -> set -> set, (forall x14, x14 :e int -> (forall x15, x15 :e int -> x13 x14 x15 :e int)) -> (forall x14 : set -> set, (forall x15, x15 :e int -> x14 x15 :e int) -> (forall x15, x15 :e int -> (forall x16 : set -> set -> set, (forall x17, x17 :e int -> (forall x18, x18 :e int -> x16 x17 x18 :e int)) -> (forall x17 : set -> set, (forall x18, x18 :e int -> x17 x18 :e int) -> (forall x18 : set -> set, (forall x19, x19 :e int -> x18 x19 :e int) -> (forall x19 : set -> set, (forall x20, x20 :e int -> x19 x20 :e int) -> (forall x20 : set -> set, (forall x21, x21 :e int -> x20 x21 :e int) -> (forall x21 : set -> set, (forall x22, x22 :e int -> x21 x22 :e int) -> (forall x22 : set -> set, (forall x23, x23 :e int -> x22 x23 :e int) -> (forall x23, x23 :e int -> (forall x24 : set -> set -> set, (forall x25, x25 :e int -> (forall x26, x26 :e int -> x24 x25 x26 :e int)) -> (forall x25 : set -> set, (forall x26, x26 :e int -> x25 x26 :e int) -> (forall x26 : set -> set, (forall x27, x27 :e int -> x26 x27 :e int) -> (forall x27 : set -> set -> set, (forall x28, x28 :e int -> (forall x29, x29 :e int -> x27 x28 x29 :e int)) -> (forall x28 : set -> set, (forall x29, x29 :e int -> x28 x29 :e int) -> (forall x29 : set -> set, (forall x30, x30 :e int -> x29 x30 :e int) -> (forall x30, x30 :e int -> (forall x31 : set -> set -> set, (forall x32, x32 :e int -> (forall x33, x33 :e int -> x31 x32 x33 :e int)) -> (forall x32 : set -> set -> set, (forall x33, x33 :e int -> (forall x34, x34 :e int -> x32 x33 x34 :e int)) -> (forall x33 : set -> set -> set, (forall x34, x34 :e int -> (forall x35, x35 :e int -> x33 x34 x35 :e int)) -> (forall x34 : set -> set -> set, (forall x35, x35 :e int -> (forall x36, x36 :e int -> x34 x35 x36 :e int)) -> (forall x35 : set -> set -> set, (forall x36, x36 :e int -> (forall x37, x37 :e int -> x35 x36 x37 :e int)) -> (forall x36, x36 :e int -> (forall x37 : set -> set -> set, (forall x38, x38 :e int -> (forall x39, x39 :e int -> x37 x38 x39 :e int)) -> (forall x38 : set -> set -> set, (forall x39, x39 :e int -> (forall x40, x40 :e int -> x38 x39 x40 :e int)) -> (forall x39 : set -> set -> set, (forall x40, x40 :e int -> (forall x41, x41 :e int -> x39 x40 x41 :e int)) -> (forall x40 : set -> set, (forall x41, x41 :e int -> x40 x41 :e int) -> (forall x41, x41 :e int -> (forall x42 : set -> set -> set, (forall x43, x43 :e int -> (forall x44, x44 :e int -> x42 x43 x44 :e int)) -> (forall x43 : set -> set, (forall x44, x44 :e int -> x43 x44 :e int) -> (forall x44 : set -> set, (forall x45, x45 :e int -> x44 x45 :e int) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x0 x45 x46 = add_SNo (mul_SNo 2 (add_SNo (add_SNo x45 x45) x45)) (mul_SNo x46 x46))) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x1 x45 x46 = add_SNo x46 x46)) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x2 x45 x46 = x46)) -> x3 = 1 -> x4 = 2 -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> (forall x47, x47 :e int -> x5 x45 x46 x47 = If_i (SNoLe x45 0) x46 (x0 (x5 (add_SNo x45 (minus_SNo 1)) x46 x47) (x6 (add_SNo x45 (minus_SNo 1)) x46 x47))))) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> (forall x47, x47 :e int -> x6 x45 x46 x47 = If_i (SNoLe x45 0) x47 (x1 (x5 (add_SNo x45 (minus_SNo 1)) x46 x47) (x6 (add_SNo x45 (minus_SNo 1)) x46 x47))))) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x7 x45 x46 = x5 (x2 x45 x46) x3 x4)) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x8 x45 x46 = add_SNo (x7 x45 x46) (mul_SNo 2 (add_SNo (mul_SNo 2 (add_SNo x45 x45)) x45)))) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x9 x45 x46 = x46)) -> x10 = 1 -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x11 x45 x46 = If_i (SNoLe x45 0) x46 (x8 (x11 (add_SNo x45 (minus_SNo 1)) x46) x45))) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x12 x45 x46 = x11 (x9 x45 x46) x10)) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x13 x45 x46 = add_SNo (add_SNo (add_SNo (x12 x45 x46) x45) x45) x45)) -> (forall x45, x45 :e int -> x14 x45 = x45) -> x15 = 1 -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x16 x45 x46 = If_i (SNoLe x45 0) x46 (x13 (x16 (add_SNo x45 (minus_SNo 1)) x46) x45))) -> (forall x45, x45 :e int -> x17 x45 = x16 (x14 x45) x15) -> (forall x45, x45 :e int -> x18 x45 = x17 x45) -> (forall x45, x45 :e int -> x19 x45 = add_SNo (add_SNo x45 x45) x45) -> (forall x45, x45 :e int -> x20 x45 = x45) -> (forall x45, x45 :e int -> x21 x45 = add_SNo x45 x45) -> (forall x45, x45 :e int -> x22 x45 = x45) -> x23 = 2 -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x24 x45 x46 = If_i (SNoLe x45 0) x46 (x21 (x24 (add_SNo x45 (minus_SNo 1)) x46)))) -> (forall x45, x45 :e int -> x25 x45 = x24 (x22 x45) x23) -> (forall x45, x45 :e int -> x26 x45 = add_SNo (x25 x45) (minus_SNo 1)) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x27 x45 x46 = If_i (SNoLe x45 0) x46 (x19 (x27 (add_SNo x45 (minus_SNo 1)) x46)))) -> (forall x45, x45 :e int -> x28 x45 = x27 (x20 x45) (x26 x45)) -> (forall x45, x45 :e int -> x29 x45 = x28 x45) -> x30 = 1 -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x31 x45 x46 = x46)) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x32 x45 x46 = If_i (SNoLe x45 0) x46 (x29 (x32 (add_SNo x45 (minus_SNo 1)) x46)))) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x33 x45 x46 = x32 x30 (x31 x45 x46))) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x34 x45 x46 = add_SNo (x33 x45 x46) (mul_SNo 2 (add_SNo x45 x45)))) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x35 x45 x46 = x46)) -> x36 = 1 -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x37 x45 x46 = If_i (SNoLe x45 0) x46 (x34 (x37 (add_SNo x45 (minus_SNo 1)) x46) x45))) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x38 x45 x46 = x37 (x35 x45 x46) x36)) -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x39 x45 x46 = add_SNo (x38 x45 x46) (mul_SNo 2 (add_SNo (mul_SNo 2 (add_SNo x45 x45)) x45)))) -> (forall x45, x45 :e int -> x40 x45 = x45) -> x41 = 1 -> (forall x45, x45 :e int -> (forall x46, x46 :e int -> x42 x45 x46 = If_i (SNoLe x45 0) x46 (x39 (x42 (add_SNo x45 (minus_SNo 1)) x46) x45))) -> (forall x45, x45 :e int -> x43 x45 = x42 (x40 x45) x41) -> (forall x45, x45 :e int -> x44 x45 = x43 x45) -> (forall x45, x45 :e int -> SNoLe 0 x45 -> x18 x45 = x44 x45)))))))))))))))))))))))))))))))))))))))))))))).
Admitted.
Theorem missingprop_5fad7b116a1cda56bb54f45e400f6bfd4dea5233e8a77b38cd1ef5ab525c90b9 : (forall x0 : set -> set -> set, (forall x1, x1 :e int -> (forall x2, x2 :e int -> x0 x1 x2 :e int)) -> (forall x1, x1 :e int -> (forall x2 : set -> set, (forall x3, x3 :e int -> x2 x3 :e int) -> (forall x3 : set -> set -> set, (forall x4, x4 :e int -> (forall x5, x5 :e int -> x3 x4 x5 :e int)) -> (forall x4 : set -> set, (forall x5, x5 :e int -> x4 x5 :e int) -> (forall x5 : set -> set -> set, (forall x6, x6 :e int -> (forall x7, x7 :e int -> x5 x6 x7 :e int)) -> (forall x6 : set -> set -> set, (forall x7, x7 :e int -> (forall x8, x8 :e int -> x6 x7 x8 :e int)) -> (forall x7 : set -> set -> set, (forall x8, x8 :e int -> (forall x9, x9 :e int -> x7 x8 x9 :e int)) -> (forall x8, x8 :e int -> (forall x9, x9 :e int -> (forall x10 : set -> set -> set -> set, (forall x11, x11 :e int -> (forall x12, x12 :e int -> (forall x13, x13 :e int -> x10 x11 x12 x13 :e int))) -> (forall x11 : set -> set -> set -> set, (forall x12, x12 :e int -> (forall x13, x13 :e int -> (forall x14, x14 :e int -> x11 x12 x13 x14 :e int))) -> (forall x12 : set -> set -> set, (forall x13, x13 :e int -> (forall x14, x14 :e int -> x12 x13 x14 :e int)) -> (forall x13 : set -> set -> set, (forall x14, x14 :e int -> (forall x15, x15 :e int -> x13 x14 x15 :e int)) -> (forall x14 : set -> set -> set, (forall x15, x15 :e int -> (forall x16, x16 :e int -> x14 x15 x16 :e int)) -> (forall x15, x15 :e int -> (forall x16 : set -> set -> set, (forall x17, x17 :e int -> (forall x18, x18 :e int -> x16 x17 x18 :e int)) -> (forall x17 : set -> set -> set, (forall x18, x18 :e int -> (forall x19, x19 :e int -> x17 x18 x19 :e int)) -> (forall x18 : set -> set -> set, (forall x19, x19 :e int -> (forall x20, x20 :e int -> x18 x19 x20 :e int)) -> (forall x19 : set -> set, (forall x20, x20 :e int -> x19 x20 :e int) -> (forall x20, x20 :e int -> (forall x21 : set -> set -> set, (forall x22, x22 :e int -> (forall x23, x23 :e int -> x21 x22 x23 :e int)) -> (forall x22 : set -> set, (forall x23, x23 :e int -> x22 x23 :e int) -> (forall x23 : set -> set, (forall x24, x24 :e int -> x23 x24 :e int) -> (forall x24 : set -> set -> set, (forall x25, x25 :e int -> (forall x26, x26 :e int -> x24 x25 x26 :e int)) -> (forall x25 : set -> set -> set, (forall x26, x26 :e int -> (forall x27, x27 :e int -> x25 x26 x27 :e int)) -> (forall x26 : set -> set -> set, (forall x27, x27 :e int -> (forall x28, x28 :e int -> x26 x27 x28 :e int)) -> (forall x27, x27 :e int -> (forall x28, x28 :e int -> (forall x29 : set -> set -> set -> set, (forall x30, x30 :e int -> (forall x31, x31 :e int -> (forall x32, x32 :e int -> x29 x30 x31 x32 :e int))) -> (forall x30 : set -> set -> set -> set, (forall x31, x31 :e int -> (forall x32, x32 :e int -> (forall x33, x33 :e int -> x30 x31 x32 x33 :e int))) -> (forall x31 : set -> set -> set, (forall x32, x32 :e int -> (forall x33, x33 :e int -> x31 x32 x33 :e int)) -> (forall x32 : set -> set -> set, (forall x33, x33 :e int -> (forall x34, x34 :e int -> x32 x33 x34 :e int)) -> (forall x33 : set -> set -> set, (forall x34, x34 :e int -> (forall x35, x35 :e int -> x33 x34 x35 :e int)) -> (forall x34, x34 :e int -> (forall x35 : set -> set -> set, (forall x36, x36 :e int -> (forall x37, x37 :e int -> x35 x36 x37 :e int)) -> (forall x36 : set -> set -> set, (forall x37, x37 :e int -> (forall x38, x38 :e int -> x36 x37 x38 :e int)) -> (forall x37 : set -> set -> set, (forall x38, x38 :e int -> (forall x39, x39 :e int -> x37 x38 x39 :e int)) -> (forall x38 : set -> set, (forall x39, x39 :e int -> x38 x39 :e int) -> (forall x39, x39 :e int -> (forall x40 : set -> set -> set, (forall x41, x41 :e int -> (forall x42, x42 :e int -> x40 x41 x42 :e int)) -> (forall x41 : set -> set, (forall x42, x42 :e int -> x41 x42 :e int) -> (forall x42 : set -> set, (forall x43, x43 :e int -> x42 x43 :e int) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x0 x43 x44 = mul_SNo (add_SNo 2 x44) x43)) -> x1 = 2 -> (forall x43, x43 :e int -> x2 x43 = x43) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x3 x43 x44 = If_i (SNoLe x43 0) x44 (x0 (x3 (add_SNo x43 (minus_SNo 1)) x44) x43))) -> (forall x43, x43 :e int -> x4 x43 = x3 x1 (x2 x43)) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x5 x43 x44 = add_SNo (add_SNo (x4 x43) (minus_SNo x43)) (mul_SNo x44 x44))) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x6 x43 x44 = add_SNo x44 x44)) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x7 x43 x44 = x44)) -> x8 = 1 -> x9 = 2 -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> (forall x45, x45 :e int -> x10 x43 x44 x45 = If_i (SNoLe x43 0) x44 (x5 (x10 (add_SNo x43 (minus_SNo 1)) x44 x45) (x11 (add_SNo x43 (minus_SNo 1)) x44 x45))))) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> (forall x45, x45 :e int -> x11 x43 x44 x45 = If_i (SNoLe x43 0) x45 (x6 (x10 (add_SNo x43 (minus_SNo 1)) x44 x45) (x11 (add_SNo x43 (minus_SNo 1)) x44 x45))))) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x12 x43 x44 = x10 (x7 x43 x44) x8 x9)) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x13 x43 x44 = add_SNo (add_SNo (x12 x43 x44) (mul_SNo 2 (add_SNo x43 x43))) x43)) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x14 x43 x44 = x44)) -> x15 = 1 -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x16 x43 x44 = If_i (SNoLe x43 0) x44 (x13 (x16 (add_SNo x43 (minus_SNo 1)) x44) x43))) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x17 x43 x44 = x16 (x14 x43 x44) x15)) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x18 x43 x44 = add_SNo (add_SNo (add_SNo (x17 x43 x44) x43) x43) x43)) -> (forall x43, x43 :e int -> x19 x43 = x43) -> x20 = 1 -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x21 x43 x44 = If_i (SNoLe x43 0) x44 (x18 (x21 (add_SNo x43 (minus_SNo 1)) x44) x43))) -> (forall x43, x43 :e int -> x22 x43 = x21 (x19 x43) x20) -> (forall x43, x43 :e int -> x23 x43 = x22 x43) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x24 x43 x44 = add_SNo (add_SNo (add_SNo (mul_SNo x44 x44) x43) x43) x43)) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x25 x43 x44 = add_SNo x44 x44)) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x26 x43 x44 = x44)) -> x27 = 1 -> x28 = 2 -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> (forall x45, x45 :e int -> x29 x43 x44 x45 = If_i (SNoLe x43 0) x44 (x24 (x29 (add_SNo x43 (minus_SNo 1)) x44 x45) (x30 (add_SNo x43 (minus_SNo 1)) x44 x45))))) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> (forall x45, x45 :e int -> x30 x43 x44 x45 = If_i (SNoLe x43 0) x45 (x25 (x29 (add_SNo x43 (minus_SNo 1)) x44 x45) (x30 (add_SNo x43 (minus_SNo 1)) x44 x45))))) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x31 x43 x44 = x29 (x26 x43 x44) x27 x28)) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x32 x43 x44 = add_SNo (add_SNo (x31 x43 x44) (mul_SNo 2 (add_SNo x43 x43))) x43)) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x33 x43 x44 = x44)) -> x34 = 1 -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x35 x43 x44 = If_i (SNoLe x43 0) x44 (x32 (x35 (add_SNo x43 (minus_SNo 1)) x44) x43))) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x36 x43 x44 = x35 (x33 x43 x44) x34)) -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x37 x43 x44 = add_SNo (add_SNo (x36 x43 x44) (mul_SNo 2 (add_SNo (mul_SNo 2 (add_SNo x43 x43)) x43))) x43)) -> (forall x43, x43 :e int -> x38 x43 = x43) -> x39 = 1 -> (forall x43, x43 :e int -> (forall x44, x44 :e int -> x40 x43 x44 = If_i (SNoLe x43 0) x44 (x37 (x40 (add_SNo x43 (minus_SNo 1)) x44) x43))) -> (forall x43, x43 :e int -> x41 x43 = x40 (x38 x43) x39) -> (forall x43, x43 :e int -> x42 x43 = x41 x43) -> (forall x43, x43 :e int -> SNoLe 0 x43 -> x23 x43 = x42 x43)))))))))))))))))))))))))))))))))))))))))))).
Admitted.
