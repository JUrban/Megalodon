(* Parameter Eps_i "174b78e53fc239e8c2aab4ab5a996a27e3e5741e88070dad186e05fb13f275e5" *)
Parameter Eps_i : (set->prop)->set.

Axiom Eps_i_ax : forall P:set->prop, forall x:set, P x -> P (Eps_i P).

Definition True : prop := forall p:prop, p -> p.
Definition False : prop := forall p:prop, p.

Definition not : prop -> prop := fun A:prop => A -> False.

(* Unicode ~ "00ac" *)
Prefix ~ 700 := not.

Definition and : prop -> prop -> prop := fun A B:prop => forall p:prop, (A -> B -> p) -> p.

(* Unicode /\ "2227" *)
Infix /\ 780 left := and.

Definition or : prop -> prop -> prop := fun A B:prop => forall p:prop, (A -> p) -> (B -> p) -> p.

(* Unicode \/ "2228" *)
Infix \/ 785 left := or.

Definition iff : prop -> prop -> prop := fun A B:prop => and (A -> B) (B -> A).

(* Unicode <-> "2194" *)
Infix <-> 805 := iff.

Section Eq.
Variable A:SType.
Definition eq : A->A->prop := fun x y:A => forall Q:A->A->prop, Q x y -> Q y x.
Definition neq : A->A->prop := fun x y:A => ~ eq x y.
End Eq.

Infix = 502 := eq.
(* Unicode <> "2260" *)
Infix <> 502 := neq.

Section FE.
Variable A B : SType.
Axiom func_ext : forall f g : A -> B , (forall x : A , f x = g x) -> f = g.
End FE.

Section Ex.
Variable A:SType.
Definition ex : (A->prop)->prop := fun Q:A->prop => forall P:prop, (forall x:A, Q x -> P) -> P.
End Ex.

(* Unicode exists "2203" *)
Binder+ exists , := ex.

Axiom prop_ext : forall p q:prop, iff p q -> p = q.

Parameter In:set->set->prop.

Definition Subq : set -> set -> prop := fun A B => forall x :e A, x :e B.

Axiom set_ext : forall X Y:set, X c= Y -> Y c= X -> X = Y.

Axiom In_ind : forall P:set->prop, (forall X:set, (forall x :e X, P x) -> P X) -> forall X:set, P X.

Binder+ exists , := ex; and.

Parameter Empty : set.
Axiom EmptyAx : ~exists x:set, x :e Empty.

(* Unicode Union "22C3" *)
Parameter Union : set->set.

Axiom UnionEq : forall X x, x :e Union X <-> exists Y, x :e Y /\ Y :e X.

(* Unicode Power "1D4AB" *)
Parameter Power : set->set.

Axiom PowerEq : forall X Y:set, Y :e Power X <-> Y c= X.

Parameter Repl : set -> (set -> set) -> set.
Notation Repl Repl.

Axiom ReplEq : forall A:set, forall F:set->set, forall y:set, y :e {F x|x :e A} <-> exists x :e A, y = F x.

Definition TransSet : set->prop := fun U:set => forall x :e U, x c= U.

Definition Union_closed : set->prop := fun U:set => forall X:set, X :e U -> Union X :e U.
Definition Power_closed : set->prop := fun U:set => forall X:set, X :e U -> Power X :e U.
Definition Repl_closed : set->prop := fun U:set => forall X:set, X :e U -> forall F:set->set,
   (forall x:set, x :e X -> F x :e U) -> {F x|x :e X} :e U.
Definition ZF_closed : set->prop := fun U:set =>
   Union_closed U
/\ Power_closed U
/\ Repl_closed U.

Parameter UnivOf : set->set.

Axiom UnivOf_In : forall N:set, N :e UnivOf N.

Axiom UnivOf_TransSet : forall N:set, TransSet (UnivOf N).

Axiom UnivOf_ZF_closed : forall N:set, ZF_closed (UnivOf N).

Axiom UnivOf_Min : forall N U:set, N :e U
  -> TransSet U
  -> ZF_closed U
  -> UnivOf N c= U.

Axiom FalseE : False -> forall p:prop, p.

Axiom TrueI : True.

Axiom notI : forall A:prop, (A -> False) -> ~A.

Axiom notE : forall A:prop, ~A -> A -> False.

Axiom andI : forall (A B : prop), A -> B -> A /\ B.

Axiom andEL : forall (A B : prop), A /\ B -> A.

Axiom andER : forall (A B : prop), A /\ B -> B.

Axiom orIL : forall (A B : prop), A -> A \/ B.

Axiom orIR : forall (A B : prop), B -> A \/ B.

Axiom orE : forall (A B C:prop), (A -> C) -> (B -> C) -> A \/ B -> C.

Section PropN.

Variable P1 P2 P3:prop.

Axiom and3I : P1 -> P2 -> P3 -> P1 /\ P2 /\ P3.
Axiom and3E : P1 /\ P2 /\ P3 -> (forall p:prop, (P1 -> P2 -> P3 -> p) -> p).
Axiom or3I1 : P1 -> P1 \/ P2 \/ P3.
Axiom or3I2 : P2 -> P1 \/ P2 \/ P3.
Axiom or3I3 : P3 -> P1 \/ P2 \/ P3.
Axiom or3E : P1 \/ P2 \/ P3 -> (forall p:prop, (P1 -> p) -> (P2 -> p) -> (P3 -> p) -> p).

Variable P4:prop.

Axiom and4I : P1 -> P2 -> P3 -> P4 -> P1 /\ P2 /\ P3 /\ P4.
Axiom and4E : P1 /\ P2 /\ P3 /\ P4 -> (forall p:prop, (P1 -> P2 -> P3 -> P4 -> p) -> p).
Axiom or4I1 : P1 -> P1 \/ P2 \/ P3 \/ P4.
Axiom or4I2 : P2 -> P1 \/ P2 \/ P3 \/ P4.
Axiom or4I3 : P3 -> P1 \/ P2 \/ P3 \/ P4.
Axiom or4I4 : P4 -> P1 \/ P2 \/ P3 \/ P4.
Axiom or4E : P1 \/ P2 \/ P3 \/ P4 -> (forall p:prop, (P1 -> p) -> (P2 -> p) -> (P3 -> p) -> (P4 -> p) -> p).

Variable P5:prop.

Axiom and5I : P1 -> P2 -> P3 -> P4 -> P5 -> P1 /\ P2 /\ P3 /\ P4 /\ P5.
Axiom and5E : P1 /\ P2 /\ P3 /\ P4 /\ P5 -> (forall p:prop, (P1 -> P2 -> P3 -> P4 -> P5 -> p) -> p).
Axiom or5I1 : P1 -> P1 \/ P2 \/ P3 \/ P4 \/ P5.
Axiom or5I2 : P2 -> P1 \/ P2 \/ P3 \/ P4 \/ P5.
Axiom or5I3 : P3 -> P1 \/ P2 \/ P3 \/ P4 \/ P5.
Axiom or5I4 : P4 -> P1 \/ P2 \/ P3 \/ P4 \/ P5.
Axiom or5I5 : P5 -> P1 \/ P2 \/ P3 \/ P4 \/ P5.
Axiom or5E : P1 \/ P2 \/ P3 \/ P4 \/ P5 -> (forall p:prop, (P1 -> p) -> (P2 -> p) -> (P3 -> p) -> (P4 -> p) -> (P5 -> p) -> p).

Variable P6:prop.

Axiom and6I: P1 -> P2 -> P3 -> P4 -> P5 -> P6 -> P1 /\ P2 /\ P3 /\ P4 /\ P5 /\ P6.
Axiom and6E : P1 /\ P2 /\ P3 /\ P4 /\ P5 /\ P6 -> (forall p:prop, (P1 -> P2 -> P3 -> P4 -> P5 -> P6 -> p) -> p).

Variable P7:prop.

Axiom and7I: P1 -> P2 -> P3 -> P4 -> P5 -> P6 -> P7 -> P1 /\ P2 /\ P3 /\ P4 /\ P5 /\ P6 /\ P7.
Axiom and7E : P1 /\ P2 /\ P3 /\ P4 /\ P5 /\ P6 /\ P7 -> (forall p:prop, (P1 -> P2 -> P3 -> P4 -> P5 -> P6 -> P7 -> p) -> p).

End PropN.

Axiom iffI : forall A B:prop, (A -> B) -> (B -> A) -> (A <-> B).
Axiom iffEL : forall A B:prop, (A <-> B) -> A -> B.
Axiom iffER : forall A B:prop, (A <-> B) -> B -> A.
Axiom iff_ref : forall A:prop, A <-> A.

Axiom neq_i_sym: forall x y, x <> y -> y <> x.

Definition nIn : set->set->prop :=
fun x X => ~In x X.

(* Unicode /:e "2209" *)
Infix /:e 502 := nIn.

Axiom Eps_i_ex : forall P:set -> prop, (exists x, P x) -> P (Eps_i P).

Axiom pred_ext : forall P Q:set -> prop, (forall x, P x <-> Q x) -> P = Q.
Axiom prop_ext_2 : forall p q:prop, (p -> q) -> (q -> p) -> p = q.
Axiom pred_ext_2 : forall P Q:set -> prop, P c= Q -> Q c= P -> P = Q.

Axiom Subq_ref : forall X:set, X c= X.
Axiom Subq_tra : forall X Y Z:set, X c= Y -> Y c= Z -> X c= Z.
Axiom Subq_contra : forall X Y z:set, X c= Y -> z /:e Y -> z /:e X.

Axiom EmptyE : forall x:set, x /:e Empty.
Axiom Subq_Empty : forall X:set, Empty c= X.
Axiom Empty_Subq_eq : forall X:set, X c= Empty -> X = Empty.
Axiom Empty_eq : forall X:set, (forall x, x /:e X) -> X = Empty.

Axiom UnionI : forall X x Y:set, x :e Y -> Y :e X -> x :e Union X.
Axiom UnionE : forall X x:set, x :e Union X -> exists Y:set, x :e Y /\ Y :e X.
Axiom UnionE_impred : forall X x:set, x :e Union X -> forall p:prop, (forall Y:set, x :e Y -> Y :e X -> p) -> p.

Axiom Union_Empty : Union Empty = Empty.

Axiom PowerI : forall X Y:set, Y c= X -> Y :e Power X.
Axiom PowerE : forall X Y:set, Y :e Power X -> Y c= X.
Axiom Power_Subq : forall X Y:set, X c= Y -> Power X c= Power Y.
Axiom Empty_In_Power : forall X:set, Empty :e Power X.
Axiom Self_In_Power : forall X:set, X :e Power X.

Axiom Union_Power_Subq : forall X:set, Union (Power X) c= X.

Axiom xm : forall P:prop, P \/ ~P.
Axiom dneg : forall P:prop, ~~P -> P.
Axiom imp_not_or : forall p q:prop, (p -> q) -> ~p \/ q.
Axiom not_and_or_demorgan : forall p q:prop, ~(p /\ q) -> ~p \/ ~q.

(* Parameter exactly1of2 "3578b0d6a7b318714bc5ea889c6a38cf27f08eaccfab7edbde3cb7a350cf2d9b" "163602f90de012a7426ee39176523ca58bc964ccde619b652cb448bd678f7e21" *)
Parameter exactly1of2 : prop->prop->prop.

Axiom exactly1of2_I1 : forall A B:prop, A -> ~B -> exactly1of2 A B.
Axiom exactly1of2_I2 : forall A B:prop, ~A -> B -> exactly1of2 A B.
Axiom exactly1of2_impI1 : forall A B:prop, (A -> ~B) -> (~A -> B) -> exactly1of2 A B.
Axiom exactly1of2_impI2 : forall A B:prop, (B -> ~A) -> (~B -> A) -> exactly1of2 A B.

Axiom exactly1of2_E : forall A B:prop, exactly1of2 A B ->
forall p:prop,
(A -> ~B -> p) ->
(~A -> B -> p) ->
p.

Axiom exactly1of2_or : forall A B:prop, exactly1of2 A B -> A \/ B.
Axiom exactly1of2_impn12 : forall A B:prop, exactly1of2 A B -> A -> ~B.
Axiom exactly1of2_impn21 : forall A B:prop, exactly1of2 A B -> B -> ~A.
Axiom exactly1of2_nimp12 : forall A B:prop, exactly1of2 A B -> ~A -> B.
Axiom exactly1of2_nimp21 : forall A B:prop, exactly1of2 A B -> ~B -> A.

(* Parameter exactly1of3 "d2a0e4530f6e4a8ef3d5fadfbb12229fa580c2add302f925c85ede027bb4b175" "aa4bcd059b9a4c99635877362627f7d5998ee755c58679934cc62913f8ef06e0" *)
Parameter exactly1of3 : prop->prop->prop->prop.

Axiom exactly1of3_I1 : forall A B C:prop, A -> ~B -> ~C -> exactly1of3 A B C.
Axiom exactly1of3_I2 : forall A B C:prop, ~A -> B -> ~C -> exactly1of3 A B C.
Axiom exactly1of3_I3 : forall A B C:prop, ~A -> ~B -> C -> exactly1of3 A B C.
Axiom exactly1of3_impI1 : forall A B C:prop, (A -> ~B) -> (A -> ~C) -> (B -> ~C) -> (~A -> B \/ C) -> exactly1of3 A B C.
Axiom exactly1of3_impI2 : forall A B C:prop, (B -> ~A) -> (B -> ~C) -> (A -> ~C) -> (~B -> A \/ C) -> exactly1of3 A B C.
Axiom exactly1of3_impI3 : forall A B C:prop, (C -> ~A) -> (C -> ~B) -> (A -> ~B) -> (~A -> B) -> exactly1of3 A B C.

Axiom exactly1of3_E : forall A B C:prop, exactly1of3 A B C ->
forall p:prop,
(A -> ~B -> ~C -> p) ->
(~A -> B -> ~C -> p) ->
(~A -> ~B -> C -> p) ->
p.

Axiom exactly1of3_or : forall A B C:prop, exactly1of3 A B C -> A \/ B \/ C.
Axiom exactly1of3_impn12 : forall A B C:prop, exactly1of3 A B C -> A -> ~B.
Axiom exactly1of3_impn13 : forall A B C:prop, exactly1of3 A B C -> A -> ~C.
Axiom exactly1of3_impn21 : forall A B C:prop, exactly1of3 A B C -> B -> ~A.
Axiom exactly1of3_impn23 : forall A B C:prop, exactly1of3 A B C -> B -> ~C.
Axiom exactly1of3_impn31 : forall A B C:prop, exactly1of3 A B C -> C -> ~A.
Axiom exactly1of3_impn32 : forall A B C:prop, exactly1of3 A B C -> C -> ~B.
Axiom exactly1of3_nimp1 : forall A B C:prop, exactly1of3 A B C -> ~A -> B \/ C.
Axiom exactly1of3_nimp2 : forall A B C:prop, exactly1of3 A B C -> ~B -> A \/ C.
Axiom exactly1of3_nimp3 : forall A B C:prop, exactly1of3 A B C -> ~C -> A \/ B.

Axiom ReplI : forall A:set, forall F:set->set, forall x:set, x :e A -> F x :e {F x|x :e A}.

Axiom ReplE : forall A:set, forall F:set->set, forall y:set, y :e {F x|x :e A} -> exists x :e A, y = F x.

Axiom ReplE_impred : forall A:set, forall F:set->set, forall y:set, y :e {F x|x :e A} -> forall p:prop, (forall x:set, x :e A -> y = F x -> p) -> p.

Axiom Repl_Empty : forall F:set -> set, {F x|x :e Empty} = Empty.

Axiom ReplEq_ext_sub : forall X, forall F G:set -> set, (forall x :e X, F x = G x) -> {F x|x :e X} c= {G x|x :e X}.

Axiom ReplEq_ext : forall X, forall F G:set -> set, (forall x :e X, F x = G x) -> {F x|x :e X} = {G x|x :e X}.

(* Parameter If_i "8c8f550868df4fdc93407b979afa60092db4b1bb96087bc3c2f17fadf3f35cbf" "b8ff52f838d0ff97beb955ee0b26fad79602e1529f8a2854bda0ecd4193a8a3c" *)
Parameter If_i : prop->set->set->set.

Notation IfThenElse If_i.

Axiom If_i_correct : forall p:prop, forall x y:set,
p /\ (if p then x else y) = x \/ ~p /\ (if p then x else y) = y.

Axiom If_i_0 : forall p:prop, forall x y:set,
~ p -> (if p then x else y) = y.

Axiom If_i_1 : forall p:prop, forall x y:set,
p -> (if p then x else y) = x.

Axiom If_i_or : forall p:prop, forall x y:set, (if p then x else y) = x \/ (if p then x else y) = y.

Axiom If_i_eta : forall p:prop, forall x:set, (if p then x else x) = x.

(* Parameter UPair "80aea0a41bb8a47c7340fe8af33487887119c29240a470e920d3f6642b91990d" "74243828e4e6c9c0b467551f19c2ddaebf843f72e2437cc2dea41d079a31107f" *)
Parameter UPair : set->set->set.

Notation SetEnum2 UPair.

Axiom UPairE :
forall x y z:set, x :e {y,z} -> x = y \/ x = z.

Axiom UPairI1 : forall y z:set, y :e {y,z}.

Axiom UPairI2 : forall y z:set, z :e {y,z}.

Axiom UPair_com : forall x y:set, {x,y} = {y,x}.

(* Parameter Sing "158bae29452f8cbf276df6f8db2be0a5d20290e15eca88ffe1e7b41d211d41d7" "bd01a809e97149be7e091bf7cbb44e0c2084c018911c24e159f585455d8e6bd0" *)
Parameter Sing : set -> set.
Notation SetEnum1 Sing.

Axiom SingI : forall x:set, x :e {x}. 
Axiom SingE : forall x y:set, y :e {x} -> y = x. 

(* Parameter binunion "0a445311c45f0eb3ba2217c35ecb47f122b2301b2b80124922fbf03a5c4d223e" "5e1ac4ac93257583d0e9e17d6d048ff7c0d6ccc1a69875b2a505a2d4da305784" *)
Parameter binunion : set -> set -> set.

(* Unicode :\/: "222a" *)
Infix :\/: 345 left := binunion.

Axiom binunionI1 : forall X Y z:set, z :e X -> z :e X :\/: Y.

Axiom binunionI2 : forall X Y z:set, z :e Y -> z :e X :\/: Y.

Axiom binunionE : forall X Y z:set, z :e X :\/: Y -> z :e X \/ z :e Y.

Definition SetAdjoin : set->set->set := fun X y => X :\/: {y}.

Notation SetEnum Empty Sing UPair SetAdjoin.

Axiom Power_0_Sing_0 : Power Empty = {Empty}.

Axiom Repl_UPair : forall F:set->set, forall x y:set, {F z|z :e {x,y}} = {F x,F y}.

Axiom Repl_Sing : forall F:set->set, forall x:set, {F z|z :e {x}} = {F x}.

Axiom Repl_restr : forall X:set, forall F G:set -> set, (forall x:set, x :e X -> F x = G x) -> {F x|x :e X} = {G x|x :e X}.

(* Parameter famunion "d772b0f5d472e1ef525c5f8bd11cf6a4faed2e76d4eacfa455f4d65cc24ec792" "b3e3bf86a58af5d468d398d3acad61ccc50261f43c856a68f8594967a06ec07a" *)
Parameter famunion:set->(set->set)->set.

(* Unicode \/_ "22C3" *)
(* Subscript \/_ *)
Binder \/_ , := famunion.

Axiom famunionI:forall X:set, forall F:(set->set), forall x y:set, x :e X -> y :e F x -> y :e \/_ x :e X, F x.

Axiom famunionE:forall X:set, forall F:(set->set), forall y:set, y :e (\/_ x :e X, F x) -> exists x :e X, y :e F x.

Axiom famunionE_impred : forall X : set , forall F : (set -> set) , forall y : set , y :e (\/_ x :e X , F x) -> forall p:prop, (forall x, x :e X -> y :e F x -> p) -> p.

Axiom UnionEq_famunionId:forall X:set, Union X = \/_ x :e X, x.

Axiom ReplEq_famunion_Sing:forall X:set, forall F:(set->set), {F x|x :e X} = \/_ x :e X, {F x}.

Axiom Power_Sing : forall x:set, Power {x} = {Empty,{x}}.
Axiom Power_Sing_0 : Power {Empty} = {Empty,{Empty}}.

(* Parameter Sep "f7e63d81e8f98ac9bc7864e0b01f93952ef3b0cbf9777abab27bcbd743b6b079" "f336a4ec8d55185095e45a638507748bac5384e04e0c48d008e4f6a9653e9c44" *)
Parameter Sep: set -> (set -> prop) -> set.

Notation Sep Sep.

Axiom SepI:forall X:set, forall P:(set->prop), forall x:set, x :e X -> P x -> x :e {x :e X|P x}.
Axiom SepE:forall X:set, forall P:(set->prop), forall x:set, x :e {x :e X|P x} -> x :e X /\ P x.
Axiom SepE1:forall X:set, forall P:(set->prop), forall x:set, x :e {x :e X|P x} -> x :e X.
Axiom SepE2:forall X:set, forall P:(set->prop), forall x:set, x :e {x :e X|P x} -> P x.

Axiom Sep_Subq : forall X:set, forall P:set->prop, {x :e X|P x} c= X.

Axiom Sep_In_Power : forall X:set, forall P:set->prop, {x :e X|P x} :e Power X.

(* Parameter ReplSep "f627d20f1b21063483a5b96e4e2704bac09415a75fed6806a2587ce257f1f2fd" "ec807b205da3293041239ff9552e2912636525180ddecb3a2b285b91b53f70d8" *)
Parameter ReplSep : set->(set->prop)->(set->set)->set.
Notation ReplSep ReplSep.

Axiom ReplSepI: forall X:set, forall P:set->prop, forall F:set->set, forall x:set, x :e X -> P x -> F x :e {F x|x :e X, P x}.

Axiom ReplSepE:forall X:set, forall P:set->prop, forall F:set->set, forall y:set, y :e {F x|x :e X, P x} -> exists x:set, x :e X /\ P x /\ y = F x.

Axiom ReplSepE_impred: forall X:set, forall P:set->prop, forall F:set->set, forall y:set, y :e {F x|x :e X, P x} -> forall p:prop, (forall x :e X, P x -> y = F x -> p) -> p.

(* Parameter ReplSep2 "816cc62796568c2de8e31e57b826d72c2e70ee3394c00fbc921f2e41e996e83a" "da098a2dd3a59275101fdd49b6d2258642997171eac15c6b60570c638743e785" *)
Parameter ReplSep2 : set -> (set -> set) -> (set -> set -> prop) -> (set -> set -> set) -> set.

Axiom ReplSep2I : forall A, forall B:set -> set, forall P:set -> set -> prop, forall F:set -> set -> set, forall x :e A, forall y :e B x, P x y -> F x y :e ReplSep2 A B P F.

Axiom ReplSep2E_impred : forall A, forall B:set -> set, forall P:set -> set -> prop, forall F:set -> set -> set, forall r :e ReplSep2 A B P F, forall p:prop, (forall x :e A, forall y :e B x, P x y -> r = F x y -> p) -> p.

Axiom ReplSep2E : forall A, forall B:set -> set, forall P:set -> set -> prop, forall F:set -> set -> set, forall r :e ReplSep2 A B P F, exists x :e A, exists y :e B x, P x y /\ r = F x y.

Axiom binunion_asso:forall X Y Z:set, X :\/: (Y :\/: Z) = (X :\/: Y) :\/: Z.
Axiom binunion_com:forall X Y:set, X :\/: Y = Y :\/: X.
Axiom binunion_idl:forall X:set, Empty :\/: X = X.
Axiom binunion_idr:forall X:set, X :\/: Empty = X.
Axiom binunion_idem:forall X:set, X :\/: X = X.
Axiom binunion_Subq_1: forall X Y:set, X c= X :\/: Y.
Axiom binunion_Subq_2: forall X Y:set, Y c= X :\/: Y.
Axiom binunion_Subq_min: forall X Y Z:set, X c= Z -> Y c= Z -> X :\/: Y c= Z.
Axiom Subq_binunion_eq:forall X Y, (X c= Y) = (X :\/: Y = Y).
Axiom binunion_nIn_I : forall X Y z:set, z /:e X -> z /:e Y -> z /:e X :\/: Y.
Axiom binunion_nIn_E : forall X Y z:set, z /:e X :\/: Y -> z /:e X /\ z /:e Y.

(* Parameter binintersect "8cf6b1f490ef8eb37db39c526ab9d7c756e98b0eb12143156198f1956deb5036" "b2abd2e5215c0170efe42d2fa0fb8a62cdafe2c8fbd0d37ca14e3497e54ba729" *)
Parameter binintersect:set->set->set.

(* Unicode :/\: "2229" *)
Infix :/\: 340 left := binintersect.

Axiom binintersectI:forall X Y z, z :e X -> z :e Y -> z :e X :/\: Y.
Axiom binintersectE:forall X Y z, z :e X :/\: Y -> z :e X /\ z :e Y.
Axiom binintersectE1:forall X Y z, z :e X :/\: Y -> z :e X.
Axiom binintersectE2:forall X Y z, z :e X :/\: Y -> z :e Y.
Axiom binintersect_Subq_1:forall X Y:set, X :/\: Y c= X.
Axiom binintersect_Subq_2:forall X Y:set, X :/\: Y c= Y.
Axiom binintersect_Subq_eq_1 : forall X Y, X c= Y -> X :/\: Y = X.
Axiom binintersect_Subq_max:forall X Y Z:set, Z c= X -> Z c= Y -> Z c= X :/\: Y.
Axiom binintersect_asso:forall X Y Z:set, X :/\: (Y :/\: Z) = (X :/\: Y) :/\: Z.
Axiom binintersect_com: forall X Y:set, X :/\: Y = Y :/\: X.
Axiom binintersect_annil:forall X:set, Empty :/\: X = Empty.
Axiom binintersect_annir:forall X:set, X :/\: Empty = Empty.
Axiom binintersect_idem:forall X:set, X :/\: X = X.
Axiom binintersect_binunion_distr:forall X Y Z:set, X :/\: (Y :\/: Z) = X :/\: Y :\/: X :/\: Z.
Axiom binunion_binintersect_distr:forall X Y Z:set, X :\/: Y :/\: Z = (X :\/: Y) :/\: (X :\/: Z).
Axiom Subq_binintersection_eq:forall X Y:set, (X c= Y) = (X :/\: Y = X).
Axiom binintersect_nIn_I1 : forall X Y z:set, z /:e X -> z /:e X :/\: Y.
Axiom binintersect_nIn_I2 : forall X Y z:set, z /:e Y -> z /:e X :/\: Y.
Axiom binintersect_nIn_E : forall X Y z:set, z /:e X :/\: Y -> z /:e X \/ z /:e Y.

(* Parameter setminus "cc569397a7e47880ecd75c888fb7c5512aee4bcb1e7f6bd2c5f80cccd368c060" "c68e5a1f5f57bc5b6e12b423f8c24b51b48bcc32149a86fc2c30a969a15d8881" *)
Parameter setminus:set->set->set.

(* Unicode :\: "2216" *)
Infix :\: 350 := setminus.

Axiom setminusI:forall X Y z, (z :e X) -> (z /:e Y) -> z :e X :\: Y.
Axiom setminusE:forall X Y z, (z :e X :\: Y) -> z :e X /\ z /:e Y.
Axiom setminusE1:forall X Y z, (z :e X :\: Y) -> z :e X.
Axiom setminusE2:forall X Y z, (z :e X :\: Y) -> z /:e Y.
Axiom setminus_Subq:forall X Y:set, X :\: Y c= X.
Axiom setminus_Subq_contra:forall X Y Z:set, Z c= Y -> X :\: Y c= X :\: Z.
Axiom setminus_nIn_I1: forall X Y z, z /:e X -> z /:e X :\: Y.
Axiom setminus_nIn_I2: forall X Y z, z :e Y -> z /:e X :\: Y.
Axiom setminus_nIn_E: forall X Y z, z /:e X :\: Y -> z /:e X \/ z :e Y.
Axiom setminus_selfannih:forall X:set, (X :\: X) = Empty.
Axiom setminus_binintersect:forall X Y Z:set, X :\: Y :/\: Z = (X :\: Y) :\/: (X :\: Z).
Axiom setminus_binunion:forall X Y Z:set, X :\: Y :\/: Z = (X :\: Y) :\: Z.
Axiom binintersect_setminus:forall X Y Z:set, (X :/\: Y) :\: Z = X :/\: (Y :\: Z).
Axiom binunion_setminus:forall X Y Z:set, X :\/: Y :\: Z = (X :\: Z) :\/: (Y :\: Z).
Axiom setminus_setminus:forall X Y Z:set, X :\: (Y :\: Z) = (X :\: Y) :\/: (X :/\: Z).
Axiom setminus_annil:forall X:set, Empty :\: X = Empty.
Axiom setminus_idr:forall X:set, X :\: Empty = X.

Axiom In_irref : forall x, x /:e x.
Axiom In_no2cycle : forall x y, x :e y -> y :e x -> False.
Axiom In_no3cycle : forall x y z, x :e y -> y :e z -> z :e x -> False.
Axiom In_no4cycle : forall x y z w, x :e y -> y :e z -> z :e w -> w :e x -> False.

(* Parameter ordsucc "9db634daee7fc36315ddda5f5f694934869921e9c5f55e8b25c91c0a07c5cbec" "65d8837d7b0172ae830bed36c8407fcd41b7d875033d2284eb2df245b42295a6" *)
Parameter ordsucc : set->set.

Axiom ordsuccI1 : forall x:set, x c= ordsucc x.
Axiom ordsuccI2 : forall x:set, x :e ordsucc x.
Axiom ordsuccE : forall x y:set, y :e ordsucc x -> y :e x \/ y = x.

Notation Nat Empty ordsucc.

Axiom neq_0_ordsucc : forall a:set, 0 <> ordsucc a.
Axiom neq_ordsucc_0 : forall a:set, ordsucc a <> 0.

Axiom ordsucc_inj : forall a b:set, ordsucc a = ordsucc b -> a = b.
Axiom ordsucc_inj_contra : forall a b:set, a <> b -> ordsucc a <> ordsucc b.

Axiom In_0_1 : 0 :e 1.
Axiom In_0_2 : 0 :e 2.
Axiom In_1_2 : 1 :e 2.

Definition nat_p : set->prop := fun n:set => forall p:set->prop, p 0 -> (forall x:set, p x -> p (ordsucc x)) -> p n.

Axiom nat_0 : nat_p 0.
Axiom nat_ordsucc : forall n:set, nat_p n -> nat_p (ordsucc n).
Axiom nat_1 : nat_p 1.
Axiom nat_2 : nat_p 2.
Axiom nat_3: nat_p 3.
Axiom nat_4: nat_p 4.
Axiom nat_5: nat_p 5.
Axiom nat_6: nat_p 6.
Axiom nat_0_in_ordsucc : forall n, nat_p n -> 0 :e ordsucc n.
Axiom nat_ordsucc_in_ordsucc : forall n, nat_p n -> forall m :e n, ordsucc m :e ordsucc n.
Axiom nat_ind : forall p:set->prop, p 0 -> (forall n, nat_p n -> p n -> p (ordsucc n)) -> forall n, nat_p n -> p n.
Axiom nat_inv : forall n, nat_p n -> n = 0 \/ exists x, nat_p x /\ n = ordsucc x.
Axiom nat_complete_ind : forall p:set->prop, (forall n, nat_p n -> (forall m :e n, p m) -> p n) -> forall n, nat_p n -> p n.
Axiom nat_p_trans : forall n, nat_p n -> forall m :e n, nat_p m.
Axiom nat_trans : forall n, nat_p n -> forall m :e n, m c= n.
Axiom nat_ordsucc_trans : forall n, nat_p n -> forall m :e ordsucc n, m c= n.

Axiom Union_ordsucc_eq : forall n, nat_p n -> Union (ordsucc n) = n.

Axiom In_0_3: 0 :e 3.
Axiom In_1_3: 1 :e 3.
Axiom In_2_3: 2 :e 3.
Axiom In_0_4: 0 :e 4.
Axiom In_1_4: 1 :e 4.
Axiom In_2_4: 2 :e 4.
Axiom In_3_4: 3 :e 4.
Axiom In_0_5: 0 :e 5.
Axiom In_1_5: 1 :e 5.
Axiom In_2_5: 2 :e 5.
Axiom In_3_5: 3 :e 5.
Axiom In_4_5: 4 :e 5.
Axiom In_0_6: 0 :e 6.
Axiom In_1_6: 1 :e 6.
Axiom In_2_6: 2 :e 6.
Axiom In_3_6: 3 :e 6.
Axiom In_4_6: 4 :e 6.
Axiom In_5_6: 5 :e 6.

Axiom cases_1: forall i :e 1, forall p:set->prop, p 0 -> p i.
Axiom cases_2: forall i :e 2, forall p:set->prop, p 0 -> p 1 -> p i.
Axiom cases_3: forall i :e 3, forall p:set->prop, p 0 -> p 1 -> p 2 -> p i.
Axiom cases_4: forall i :e 4, forall p:set->prop, p 0 -> p 1 -> p 2 -> p 3 -> p i.
Axiom cases_5: forall i :e 5, forall p:set->prop, p 0 -> p 1 -> p 2 -> p 3 -> p 4 -> p i.
Axiom cases_6: forall i :e 6, forall p:set->prop, p 0 -> p 1 -> p 2 -> p 3 -> p 4 -> p 5 -> p i.

Axiom neq_0_1 : 0 <> 1.
Axiom neq_0_2 : 0 <> 2.
Axiom neq_1_2 : 1 <> 2.
Axiom neq_1_0 : 1 <> 0.
Axiom neq_2_0 : 2 <> 0.
Axiom neq_2_1 : 2 <> 1.
Axiom neq_3_0: 3 <> 0.
Axiom neq_3_1: 3 <> 1.
Axiom neq_3_2: 3 <> 2.
Axiom neq_4_0: 4 <> 0.
Axiom neq_4_1: 4 <> 1.
Axiom neq_4_2: 4 <> 2.
Axiom neq_4_3: 4 <> 3.
Axiom neq_5_0: 5 <> 0.
Axiom neq_5_1: 5 <> 1.
Axiom neq_5_2: 5 <> 2.
Axiom neq_5_3: 5 <> 3.
Axiom neq_5_4: 5 <> 4.

Axiom ZF_closed_I : forall U,
 Union_closed U ->
 Power_closed U ->
 Repl_closed U ->
 ZF_closed U.

Axiom ZF_closed_E : forall U, ZF_closed U ->
 forall p:prop,
 (Union_closed U ->
  Power_closed U ->
  Repl_closed U -> p)
 -> p.

Axiom ZF_Union_closed : forall U, ZF_closed U ->
  forall X :e U, Union X :e U.

Axiom ZF_Power_closed : forall U, ZF_closed U ->
  forall X :e U, Power X :e U.

Axiom ZF_Repl_closed : forall U, ZF_closed U ->
  forall X :e U, forall F:set->set, (forall x :e X, F x :e U) -> {F x|x:eX} :e U.

Axiom ZF_UPair_closed : forall U, ZF_closed U ->
  forall x y :e U, {x,y} :e U.

Axiom ZF_Sing_closed : forall U, ZF_closed U ->
  forall x :e U, {x} :e U.

Axiom ZF_binunion_closed : forall U, ZF_closed U ->
  forall X Y :e U, (X :\/: Y) :e U.

Axiom ZF_ordsucc_closed : forall U, ZF_closed U ->
  forall x :e U, ordsucc x :e U.

Axiom nat_p_UnivOf_Empty : forall n:set, nat_p n -> n :e UnivOf Empty.

(* Unicode omega "3c9" *)
(* Parameter omega "39cdf86d83c7136517f803d29d0c748ea45a274ccbf9b8488f9cda3e21f4b47c" "6fc30ac8f2153537e397b9ff2d9c981f80c151a73f96cf9d56ae2ee27dfd1eb2" *)
Parameter omega : set.

Axiom omega_nat_p : forall n :e omega, nat_p n.

Axiom nat_p_omega : forall n:set, nat_p n -> n :e omega.

Axiom omega_ordsucc : forall n :e omega, ordsucc n :e omega.

Definition ordinal : set->prop := fun (alpha:set) => TransSet alpha /\ forall beta :e alpha, TransSet beta.

Axiom ordinal_TransSet : forall alpha:set, ordinal alpha -> TransSet alpha.

Axiom ordinal_In_TransSet : forall alpha:set, ordinal alpha -> forall beta :e alpha, TransSet beta.

Axiom ordinal_Empty : ordinal Empty.

Axiom ordinal_Hered : forall alpha:set, ordinal alpha -> forall beta :e alpha, ordinal beta.

Axiom TransSet_ordsucc : forall X:set, TransSet X -> TransSet (ordsucc X).

Axiom ordinal_ordsucc : forall alpha:set, ordinal alpha -> ordinal (ordsucc alpha).

Axiom nat_p_ordinal : forall n:set, nat_p n -> ordinal n.

Axiom ordinal_1 : ordinal 1.

Axiom ordinal_2 : ordinal 2.

Axiom omega_TransSet : TransSet omega.

Axiom omega_ordinal : ordinal omega.

Axiom ordsucc_omega_ordinal: ordinal (ordsucc omega).

Axiom TransSet_ordsucc_In_Subq : forall X:set, TransSet X -> forall x :e X, ordsucc x c= X.

Axiom ordinal_ordsucc_In_Subq : forall alpha, ordinal alpha -> forall beta :e alpha, ordsucc beta c= alpha.

Axiom ordinal_trichotomy_or : forall alpha beta:set, ordinal alpha -> ordinal beta -> alpha :e beta \/ alpha = beta \/ beta :e alpha.

Axiom ordinal_In_Or_Subq : forall alpha beta, ordinal alpha -> ordinal beta -> alpha :e beta \/ beta c= alpha.

Axiom ordinal_linear : forall alpha beta, ordinal alpha -> ordinal beta -> alpha c= beta \/ beta c= alpha.

Axiom ordinal_ordsucc_In_eq : forall alpha beta, ordinal alpha -> beta :e alpha -> ordsucc beta :e alpha \/ alpha = ordsucc beta.

Axiom ordinal_lim_or_succ : forall alpha, ordinal alpha -> (forall beta :e alpha, ordsucc beta :e alpha) \/ (exists beta :e alpha, alpha = ordsucc beta).

Axiom ordinal_ordsucc_In : forall alpha, ordinal alpha -> forall beta :e alpha, ordsucc beta :e ordsucc alpha.

Axiom ordinal_Union : forall X, (forall x :e X, ordinal x) -> ordinal (Union X).

Axiom ordinal_famunion : forall X, forall F:set -> set, (forall x :e X, ordinal (F x)) -> ordinal (\/_ x :e X, F x).

Axiom ordinal_binintersect : forall alpha beta, ordinal alpha -> ordinal beta -> ordinal (alpha :/\: beta).

Axiom ordinal_binunion : forall alpha beta, ordinal alpha -> ordinal beta -> ordinal (alpha :\/: beta).

Axiom ordinal_Sep : forall alpha, ordinal alpha -> forall p:set -> prop, (forall beta :e alpha, forall gamma :e beta, p beta -> p gamma) -> ordinal {beta :e alpha|p beta}.

Definition inj : set->set->(set->set)->prop :=
  fun X Y f =>
  (forall u :e X, f u :e Y)
  /\
  (forall u v :e X, f u = f v -> u = v).

Definition surj : set->set->(set->set)->prop :=
  fun X Y f =>
  (forall u :e X, f u :e Y)
  /\
  (forall w :e Y, exists u :e X, f u = w).

Definition bij : set->set->(set->set)->prop :=
  fun X Y f =>
  (forall u :e X, f u :e Y)
  /\
  (forall u v :e X, f u = f v -> u = v)
  /\
  (forall w :e Y, exists u :e X, f u = w).

Axiom bijI : forall X Y, forall f:set -> set,
    (forall u :e X, f u :e Y)
 -> (forall u v :e X, f u = f v -> u = v)
 -> (forall w :e Y, exists u :e X, f u = w)
 -> bij X Y f.

Axiom bijE : forall X Y, forall f:set -> set,
    bij X Y f
 -> forall p:prop,
      ((forall u :e X, f u :e Y)
    -> (forall u v :e X, f u = f v -> u = v)
    -> (forall w :e Y, exists u :e X, f u = w)
    -> p)
   -> p.
  
(* Parameter inv "e1e47685e70397861382a17f4ecc47d07cdab63beca11b1d0c6d2985d3e2d38b" "896fa967e973688effc566a01c68f328848acd8b37e857ad23e133fdd4a50463" *)
Parameter inv : set -> (set -> set) -> set -> set.

Axiom surj_rinv : forall X Y, forall f:set->set, (forall w :e Y, exists u :e X, f u = w) -> forall y :e Y, inv X f y :e X /\ f (inv X f y) = y.

Axiom inj_linv : forall X, forall f:set->set, (forall u v :e X, f u = f v -> u = v) -> forall x :e X, inv X f (f x) = x.

Axiom bij_inv : forall X Y, forall f:set->set, bij X Y f -> bij Y X (inv X f).

Axiom bij_comp : forall X Y Z:set, forall f g:set->set, bij X Y f -> bij Y Z g -> bij X Z (fun x => g (f x)).

Axiom bij_id : forall X, bij X X (fun x => x).

Axiom bij_inj : forall X Y, forall f:set -> set, bij X Y f -> inj X Y f.

Axiom bij_surj : forall X Y, forall f:set -> set, bij X Y f -> surj X Y f.

Axiom inj_surj_bij : forall X Y, forall f:set -> set, inj X Y f -> surj X Y f -> bij X Y f.

Axiom surj_inv_inj : forall X Y, forall f:set -> set, (forall y :e Y, exists x :e X, f x = y) -> inj Y X (inv X f).

Definition atleastp : set -> set -> prop
 := fun X Y : set => exists f : set -> set, inj X Y f.

Definition equip : set -> set -> prop
 := fun X Y : set => exists f : set -> set, bij X Y f.

Axiom equip_ref : forall X, equip X X.
Axiom equip_sym : forall X Y, equip X Y -> equip Y X.
Axiom equip_tra : forall X Y Z, equip X Y -> equip Y Z -> equip X Z.

Definition finite : set -> prop := fun X => exists n :e omega, equip X n.
Definition infinite : set -> prop := fun X => ~finite X.

Axiom KnasterTarski_set: forall A, forall F:set->set,
    (forall U :e Power A, F U :e Power A)
 -> (forall U V :e Power A, U c= V -> F U c= F V)
 -> exists Y :e Power A, F Y = Y.
Axiom image_In_Power : forall A B, forall f:set -> set, (forall x :e A, f x :e B) -> forall U :e Power A, {f x|x :e U} :e Power B.
Axiom image_monotone : forall f:set -> set, forall U V, U c= V -> {f x|x :e U} c= {f x|x :e V}.
Axiom setminus_In_Power : forall A U, A :\: U :e Power A.
Axiom setminus_antimonotone : forall A U V, U c= V -> A :\: V c= A :\: U.
Axiom SchroederBernstein: forall A B, forall f g:set -> set, inj A B f -> inj B A g -> equip A B.

Axiom f_eq_i : forall f:set -> set, forall x y, x = y -> f x = f y.
Axiom f_eq_i_i : forall f:set -> set -> set, forall x y z w, x = y -> z = w -> f x z = f y w.
Axiom eq_i_tra : forall x y z, x = y -> y = z -> x = z.

Definition nSubq : set->set->prop :=
fun X Y => ~Subq X Y.

(* Unicode /c= "2288" *)
Infix /c= 502 := nSubq.

Axiom Sing_inv : forall x Y, {x} = Y -> x :e Y /\ forall y :e Y, y = x.

Axiom TransSet_In_ordsucc_Subq : forall x y, TransSet y -> x :e ordsucc y -> x c= y.
Axiom inv_Repl_eq : forall X, forall f g:set -> set, (forall x :e X, f (g x) = x) -> {f y|y :e {g x|x :e X}} = X.
Axiom invol_Repl_eq : forall X, forall f:set -> set, (forall x :e X, f (f x) = x) -> {f y|y :e {f x|x :e X}} = X.

Axiom Eps_i_set_R : forall X:set, forall P:set->prop, forall x :e X, P x -> Eps_i (fun x => x :e X /\ P x) :e X /\ P (Eps_i (fun x => x :e X /\ P x)).

Axiom exandE_i : forall P Q:set -> prop, (exists x, P x /\ Q x) -> forall r:prop, (forall x, P x -> Q x -> r) -> r.

Axiom exandE_ii : forall P Q:(set -> set) -> prop, (exists x:set -> set, P x /\ Q x) -> forall p:prop, (forall x:set -> set, P x -> Q x -> p) -> p.

Axiom exandE_iii : forall P Q:(set -> set -> set) -> prop, (exists x:set -> set -> set, P x /\ Q x) -> forall p:prop, (forall x:set -> set -> set, P x -> Q x -> p) -> p.

Axiom exandE_iiii : forall P Q:(set -> set -> set -> set) -> prop, (exists x:set -> set -> set -> set, P x /\ Q x) -> forall p:prop, (forall x:set -> set -> set -> set, P x -> Q x -> p) -> p.

Axiom exandE_iio : forall P Q:(set -> set -> prop) -> prop, (exists x:set -> set -> prop, P x /\ Q x) -> forall p:prop, (forall x:set -> set -> prop, P x -> Q x -> p) -> p.

Axiom exandE_iiio : forall P Q:(set -> set -> set -> prop) -> prop, (exists x:set -> set -> set -> prop, P x /\ Q x) -> forall p:prop, (forall x:set -> set -> set -> prop, P x -> Q x -> p) -> p.

Section Descr_ii.

Variable P : (set -> set) -> prop.

(* Parameter Descr_ii "a6e81668bfd1db6e6eb6a13bf66094509af176d9d0daccda274aa6582f6dcd7c" "3bae39e9880bbf5d70538d82bbb05caf44c2c11484d80d06dee0589d6f75178c" *)
Parameter Descr_ii : set -> set.

Hypothesis Pex: exists f:set -> set, P f.
Hypothesis Puniq: forall f g:set -> set, P f -> P g -> f = g.

Axiom Descr_ii_prop : P Descr_ii.

End Descr_ii.

Section Descr_iii.

Variable P : (set -> set -> set) -> prop.

(* Parameter Descr_iii "dc42f3fe5d0c55512ef81fe5d2ad0ff27c1052a6814b1b27f5a5dcb6d86240bf" "ca5fc17a582fdd4350456951ccbb37275637ba6c06694213083ed9434fe3d545" *)
Parameter Descr_iii : set -> set -> set.

Hypothesis Pex: exists f:set -> set -> set, P f.
Hypothesis Puniq: forall f g:set -> set -> set, P f -> P g -> f = g.

Axiom Descr_iii_prop : P Descr_iii.

End Descr_iii.

Section Descr_iio.

Variable P : (set -> set -> prop) -> prop.

(* Parameter Descr_iio "9909a953d666fea995cf1ccfe3d98dba3b95210581af4af82ae04f546c4c34a5" "e8e5113bb5208434f24bf352985586094222b59a435d2d632e542c768fb9c029" *)
Parameter Descr_iio : set -> set -> prop.

Hypothesis Pex: exists f:set -> set -> prop, P f.
Hypothesis Puniq: forall f g:set -> set -> prop, P f -> P g -> f = g.

Axiom Descr_iio_prop : P Descr_iio.

End Descr_iio.

Section Descr_Vo1.

Variable P : Vo 1 -> prop.

(* Parameter Descr_Vo1 "322bf09a1711d51a4512e112e1767cb2616a7708dc89d7312c8064cfee6e3315" "615c0ac7fca2b62596ed34285f29a77b39225d1deed75d43b7ae87c33ba37083" *)
Parameter Descr_Vo1 : Vo 1.

Hypothesis Pex: exists f:Vo 1, P f.
Hypothesis Puniq: forall f g:Vo 1, P f -> P g -> f = g.

Axiom Descr_Vo1_prop : P Descr_Vo1.

End Descr_Vo1.

Section Descr_Vo2.

Variable P : Vo 2 -> prop.

(* Parameter Descr_Vo2 "cc8f114cf9f75d4b7c382c62411d262d2241962151177e3b0506480d69962acc" "a64b5b4306387d52672cb5cdbc1cb423709703e6c04fdd94fa6ffca008f7e1ab" *)
Parameter Descr_Vo2 : Vo 2.

Hypothesis Pex: exists f:Vo 2, P f.
Hypothesis Puniq: forall f g:Vo 2, P f -> P g -> f = g.

Axiom Descr_Vo2_prop : P Descr_Vo2.

End Descr_Vo2.

Section If_ii.

Variable p:prop.
Variable f g:set -> set.

(* Parameter If_ii "e76df3235104afd8b513a92c00d3cc56d71dd961510bf955a508d9c2713c3f29" "17057f3db7be61b4e6bd237e7b37125096af29c45cb784bb9cc29b1d52333779" *)
Parameter If_ii : set -> set.

Axiom If_ii_1 : p -> If_ii = f.

Axiom If_ii_0 : ~p -> If_ii = g.

End If_ii.

Section If_iii.

Variable p:prop.
Variable f g:set -> set -> set.

(* Parameter If_iii "53034f33cbed012c3c6db42812d3964f65a258627a765f5bede719198af1d1ca" "3314762dce5a2e94b7e9e468173b047dd4a9fac6ee2c5f553c6ea15e9c8b7542" *)
Parameter If_iii : set -> set -> set.

Axiom If_iii_1 : p -> If_iii = f.

Axiom If_iii_0 : ~p -> If_iii = g.

End If_iii.

Section If_Vo1.

Variable p:prop.
Variable f g:Vo 1.

(* Parameter If_Vo1 "33be70138f61ae5ce327b6b29a949448c54f06c2da932a4fcf7d7a0cfc29f72e" "2bb1d80de996e76ceb61fc1636c53ea4dc6f7ce534bd5caee16a3ba4c8794a58" *)
Parameter If_Vo1 : Vo 1.

Axiom If_Vo1_1 : p -> If_Vo1 = f.

Axiom If_Vo1_0 : ~p -> If_Vo1 = g.

End If_Vo1.

Section If_iio.

Variable p:prop.
Variable f g:set -> set -> prop.

(* Parameter If_iio "216c935441f8678edc47540d419667fe9e5ab01fda1f1afbc64eacaea6a9cbfc" "bf2fb7b3431387bbd1ede0aa0b590233207130df523e71e36aaebd675479e880" *)
Parameter If_iio : set -> set -> prop.

Axiom If_iio_1 : p -> If_iio = f.

Axiom If_iio_0 : ~p -> If_iio = g.

End If_iio.

Section If_Vo2.

Variable p:prop.
Variable f g:Vo 2.

(* Parameter If_Vo2 "8117f6db2fb9c820e5905451e109f8ef633101b911baa48945806dc5bf927693" "6cf28b2480e4fa77008de59ed21788efe58b7d6926c3a8b72ec889b0c27b2f2e" *)
Parameter If_Vo2 : Vo 2.

Axiom If_Vo2_1 : p -> If_Vo2 = f.

Axiom If_Vo2_0 : ~p -> If_Vo2 = g.

End If_Vo2.

Section EpsilonRec_i.

Variable F:set -> (set -> set) -> set.

(* Parameter In_rec_i "f97da687c51f5a332ff57562bd465232bc70c9165b0afe0a54e6440fc4962a9f" "fac413e747a57408ad38b3855d3cde8673f86206e95ccdadff2b5babaf0c219e" *)
Parameter In_rec_i : set -> set.

Hypothesis Fr:forall X:set, forall g h:set -> set, (forall x :e X, g x = h x) -> F X g = F X h.

Axiom In_rec_i_eq : forall X:set, In_rec_i X = F X In_rec_i.

End EpsilonRec_i.

Section EpsilonRec_ii.

Variable F:set -> (set -> (set -> set)) -> (set -> set).

(* Parameter In_rec_ii "4d137cad40b107eb0fc2c707372525f1279575e6cadb4ebc129108161af3cedb" "f3c9abbc5074c0d68e744893a170de526469426a5e95400ae7fc81f74f412f7e" *)
Parameter In_rec_ii : set -> (set -> set).

Hypothesis Fr:forall X:set, forall g h:set -> (set -> set), (forall x :e X, g x = h x) -> F X g = F X h.

Axiom In_rec_ii_eq : forall X:set, In_rec_ii X = F X In_rec_ii.

End EpsilonRec_ii.

Section EpsilonRec_iii.

Variable F:set -> (set -> (set -> set -> set)) -> (set -> set -> set).

(* Parameter In_rec_iii "222f1b8dcfb0d2e33cc4b232e87cbcdfe5c4a2bdc5326011eb70c6c9aeefa556" "9b3a85b85e8269209d0ca8bf18ef658e56f967161bf5b7da5e193d24d345dd06" *)
Parameter In_rec_iii : set -> (set -> set -> set).

Hypothesis Fr:forall X:set, forall g h:set -> (set -> set -> set), (forall x :e X, g x = h x) -> F X g = F X h.

Axiom In_rec_iii_eq : forall X:set, In_rec_iii X = F X In_rec_iii.

End EpsilonRec_iii.

Section EpsilonRec_iio.

Variable F:set -> (set -> (set -> set -> prop)) -> (set -> set -> prop).

(* Parameter In_rec_iio "2cb990eb7cf33a7bea142678f254baf1970aa17b7016039b89df7652eff72aba" "8465061e06db87ff5ec9bf4bd2245a29d557f6b265478036bee39419282a5e28" *)
Parameter In_rec_iio : set -> (set -> set -> prop).

Hypothesis Fr:forall X:set, forall g h:set -> (set -> set -> prop), (forall x :e X, g x = h x) -> F X g = F X h.

Axiom In_rec_iio_eq : forall X:set, In_rec_iio X = F X In_rec_iio.

End EpsilonRec_iio.

Section EpsilonRec_Vo1.

Variable F:set -> (set -> Vo 1) -> Vo 1.

(* Parameter In_rec_Vo1 "45519cf90ff63f7cea32c7ebbbae0922cfc609d577dc157e25e68e131cddf2df" "e9c5f22f769cd18d0d29090a943f66f6006f0d132fafe90f542ee2ee8a3f7b59" *)
Parameter In_rec_Vo1 : set -> Vo 1.

Hypothesis Fr:forall X:set, forall g h:set -> Vo 1, (forall x :e X, g x = h x) -> F X g = F X h.

Axiom In_rec_Vo1_eq : forall X:set, In_rec_Vo1 X = F X In_rec_Vo1.

End EpsilonRec_Vo1.

Section EpsilonRec_Vo2.

Variable F:set -> (set -> Vo 2) -> Vo 2.

(* Parameter In_rec_Vo2 "e249fde27e212bc28b301523be2eee37636e29fc084bd9b775cb02f921e2ad7f" "8bc8d37461c7653ced731399d140c0d164fb9231e77b2824088e534889c31596" *)
Parameter In_rec_Vo2 : set -> Vo 2.

Hypothesis Fr:forall X:set, forall g h:set -> Vo 2, (forall x :e X, g x = h x) -> F X g = F X h.

Axiom In_rec_Vo2_eq : forall X:set, In_rec_Vo2 X = F X In_rec_Vo2.

End EpsilonRec_Vo2.

Section If_Vo3.

Variable p:prop.
Variable f g:Vo 3.

(* Parameter If_Vo3 "5b91106169bd98c177a0ff2754005f1488a83383fc6fc918d8c61f613843cf0f" "73dd2d0fb9a3283dfd7b1d719404da0bf605e7b4c7b714a2b4e2cb1a38d98c6f" *)
Parameter If_Vo3 : Vo 3.

Axiom If_Vo3_1 : p -> If_Vo3 = f.

Axiom If_Vo3_0 : ~p -> If_Vo3 = g.

End If_Vo3.

Section Descr_Vo3.

Variable P : Vo 3 -> prop.

(* Parameter Descr_Vo3 "2e63292920e9c098907a70c431c7555afc9d4d26c8920d41192c83c02196acbe" "f25ee4a03f8810e3e5a11b184db6c8f282acaa7ef4bfd93c4b2de131431b977c" *)
Parameter Descr_Vo3 : Vo 3.

Hypothesis Pex: exists f:Vo 3, P f.
Hypothesis Puniq: forall f g:Vo 3, P f -> P g -> f = g.

Axiom Descr_Vo3_prop : P Descr_Vo3.

End Descr_Vo3.

Section EpsilonRec_Vo3.

Variable F:set -> (set -> Vo 3) -> Vo 3.

(* Parameter In_rec_Vo3 "058168fdbe0aa41756ceb986449745cd561e65bf2dd594384cd039169aa7ec90" "80f7da89cc801b8279f42f9e1ed519f72d50d76e88aba5efdb67c4ae1e59aee0" *)
Parameter In_rec_Vo3 : set -> Vo 3.

Hypothesis Fr:forall X:set, forall g h:set -> Vo 3, (forall x :e X, g x = h x) -> F X g = F X h.

Axiom In_rec_Vo3_eq : forall X:set, In_rec_Vo3 X = F X In_rec_Vo3.

End EpsilonRec_Vo3.

Section If_Vo4.

Variable p:prop.
Variable f g:Vo 4.

(* Parameter If_Vo4 "6dc2e406a4ee93aabecb0252fd45bdf4b390d29b477ecdf9f4656d42c47ed098" "1a8f92ceed76bef818d85515ce73c347dd0e2c0bcfd3fdfc1fcaf4ec26faed04" *)
Parameter If_Vo4 : Vo 4.

Axiom If_Vo4_1 : p -> If_Vo4 = f.
Axiom If_Vo4_0 : ~p -> If_Vo4 = g.

End If_Vo4.

Section Descr_Vo4.

Variable P : Vo 4 -> prop.

(* Parameter Descr_Vo4 "28ea4ee0409fe1fc4b4516175b2254cb311b9609fd2a4015768b4a520fe69214" "8b81abb8b64cec9ea874d5c4dd619a9733a734933a713ef54ed7e7273510b0c3" *)
Parameter Descr_Vo4 : Vo 4.

Hypothesis Pex: exists f:Vo 4, P f.
Hypothesis Puniq: forall f g:Vo 4, P f -> P g -> f = g.

Axiom Descr_Vo4_prop : P Descr_Vo4.

End Descr_Vo4.

Section EpsilonRec_Vo4.

Variable F:set -> (set -> Vo 4) -> Vo 4.

(* Parameter In_rec_Vo4 "65bb4bac5d306fd1707029e38ff3088a6d8ed5aab414f1faf79ba5294ee2d01e" "d82c5791815ca8155da516354e8f8024d8b9d43a14ce62e2526e4563ff64e67f" *)
Parameter In_rec_Vo4 : set -> Vo 4.

Hypothesis Fr:forall X:set, forall g h:set -> Vo 4, (forall x :e X, g x = h x) -> F X g = F X h.

Axiom In_rec_Vo4_eq : forall X:set, In_rec_Vo4 X = F X In_rec_Vo4.

End EpsilonRec_Vo4.

Definition bigintersect := fun (D:(set->prop)->prop) (x:set) => forall P:set->prop, D P -> P x.

Definition reflexive : (set->set->prop)->prop := fun R => forall x:set, R x x.
Definition irreflexive : (set->set->prop)->prop := fun R => forall x:set, ~R x x.
Definition symmetric : (set->set->prop)->prop := fun R => forall x y:set, R x y -> R y x.
Definition antisymmetric : (set->set->prop)->prop := fun R => forall x y:set, R x y -> R y x -> x = y.
Definition transitive : (set->set->prop)->prop := fun R => forall x y z:set, R x y -> R y z -> R x z.
Definition eqreln : (set->set->prop)->prop := fun R => reflexive R /\ symmetric R /\ transitive R.
Definition per : (set->set->prop)->prop := fun R => symmetric R /\ transitive R.
Definition linear : (set->set->prop)->prop := fun R => forall x y:set, R x y \/ R y x.
Definition trichotomous_or : (set->set->prop)->prop := fun R => forall x y:set, R x y \/ x = y \/ R y x.
Definition partialorder : (set->set->prop)->prop := fun R => reflexive R /\ antisymmetric R /\ transitive R.
Definition totalorder : (set->set->prop)->prop := fun R => partialorder R /\ linear R.
Definition strictpartialorder : (set->set->prop)->prop := fun R => irreflexive R /\ transitive R.
Definition stricttotalorder : (set->set->prop)->prop := fun R => strictpartialorder R /\ trichotomous_or R.

Axiom per_sym : forall R:set->set->prop, per R -> symmetric R.

Axiom per_tra : forall R:set->set->prop, per R -> transitive R.

Axiom per_stra1 : forall R:set->set->prop, per R -> forall x y z:set, R y x -> R y z -> R x z.

Axiom per_stra2 : forall R:set->set->prop, per R -> forall x y z:set, R x y -> R z y -> R x z.

Axiom per_stra3 : forall R:set->set->prop, per R -> forall x y z:set, R y x -> R z y -> R x z.

Axiom per_ref1 : forall R:set->set->prop, per R -> forall x y:set, R x y -> R x x.

Axiom per_ref2 : forall R:set->set->prop, per R -> forall x y:set, R x y -> R y y.

Axiom partialorder_strictpartialorder : forall R:set->set->prop,
  partialorder R -> strictpartialorder (fun x y => R x y /\ x <> y).

Definition reflclos : (set->set->prop)->(set->set->prop) := fun R x y => R x y \/ x = y.

Axiom reflclos_refl : forall R:set->set->prop, reflexive (reflclos R).

Axiom reflclos_min : forall R S:set->set->prop, R c= S -> reflexive S -> reflclos R c= S.

Axiom strictpartialorder_partialorder_reflclos : forall R:set->set->prop, strictpartialorder R -> partialorder (reflclos R).

Axiom stricttotalorder_totalorder_reflclos : forall R:set->set->prop,
  stricttotalorder R -> totalorder (reflclos R).

Section Zermelo1908.

(* Parameter ZermeloWO "dc4124cb3e699eb9154ce37eaa547c4d08adc8fd41c311d706024418f4f1c8d6" "36a362f5d7e56550e98a38468fb4fc4d70ea17f4707cfdd2f69fc2cce37a9643" *)
Parameter ZermeloWO : set -> set -> prop.

Axiom ZermeloWO_Eps : forall a:set, (Eps_i (ZermeloWO a)) = a.
Axiom ZermeloWO_ref : reflexive ZermeloWO.
Axiom ZermeloWO_lin : linear ZermeloWO.
Axiom ZermeloWO_tra : transitive ZermeloWO.
Axiom ZermeloWO_antisym : antisymmetric ZermeloWO.
Axiom ZermeloWO_partialorder : partialorder ZermeloWO.
Axiom ZermeloWO_totalorder : totalorder ZermeloWO.
Axiom ZermeloWO_wo : forall p:set->prop, (exists x:set, p x) -> exists x:set, p x /\ forall y:set, p y -> ZermeloWO x y.

Definition ZermeloWOstrict := fun (a b:set) => ZermeloWO a b /\ a <> b.

Axiom ZermeloWOstrict_trich : trichotomous_or ZermeloWOstrict.
Axiom ZermeloWOstrict_stricttotalorder : stricttotalorder ZermeloWOstrict.
Axiom ZermeloWOstrict_wo : forall (p:set -> prop), (exists x:set, p x) -> exists x:set, p x /\ forall y:set, p y /\ y <> x -> ZermeloWOstrict x y.

Axiom Zermelo_WO : exists r : set -> set -> prop,
    totalorder r
 /\ (forall p:set->prop, (exists x:set, p x) -> exists x:set, p x /\ forall y:set, p y -> r x y).

Axiom Zermelo_WO_strict : exists r : set -> set -> prop,
    stricttotalorder r
 /\ (forall p:set->prop, (exists x:set, p x) -> exists x:set, p x /\ forall y:set, p y /\ y <> x -> r x y).

End Zermelo1908.

Axiom eq_imp_or : (fun (x y:prop) => (x -> y)) = (fun (x y:prop) => (~x \/ y)).

Axiom famunion_Empty: forall F:set -> set, (\/_ x :e 0, F x) = 0.

Axiom Empty_or_ex : forall X:set, X = Empty \/ exists x:set, x :e X.

Axiom nIn_0_0 : 0 /:e 0.
Axiom nIn_1_0 : 1 /:e 0.
Axiom nIn_2_0 : 2 /:e 0.
Axiom nIn_1_1 : 1 /:e 1.
Axiom nIn_2_2 : 2 /:e 2.
Axiom Subq_0_0 : 0 c= 0.
Axiom Subq_0_1 : 0 c= 1.
Axiom Subq_0_2 : 0 c= 2.
Axiom nSubq_1_0 : 1 /c= 0.
Axiom Subq_1_1 : 1 c= 1.
Axiom Subq_1_2 : 1 c= 2.
Axiom nSubq_2_0 : 2 /c= 0.
Axiom nSubq_2_1 : 2 /c= 1.
Axiom Subq_2_2 : 2 c= 2.
Axiom In_0_7: 0 :e 7.
Axiom In_1_7: 1 :e 7.
Axiom In_2_7: 2 :e 7.
Axiom In_3_7: 3 :e 7.
Axiom In_4_7: 4 :e 7.
Axiom In_5_7: 5 :e 7.
Axiom In_6_7: 6 :e 7.
Axiom In_0_8: 0 :e 8.
Axiom In_1_8: 1 :e 8.
Axiom In_2_8: 2 :e 8.
Axiom In_3_8: 3 :e 8.
Axiom In_4_8: 4 :e 8.
Axiom In_5_8: 5 :e 8.
Axiom In_6_8: 6 :e 8.
Axiom In_7_8: 7 :e 8.
Axiom In_0_9: 0 :e 9.
Axiom In_1_9: 1 :e 9.
Axiom In_2_9: 2 :e 9.
Axiom In_3_9: 3 :e 9.
Axiom In_4_9: 4 :e 9.
Axiom In_5_9: 5 :e 9.
Axiom In_6_9: 6 :e 9.
Axiom In_7_9: 7 :e 9.
Axiom In_8_9: 8 :e 9.

Section NatRec.

Variable z:set.
Variable f:set->set->set.
Let F : set->(set->set)->set := fun n g => if Union n :e n then f (Union n) (g (Union n)) else z.

Definition nat_primrec : set->set := In_rec_i F.

Axiom nat_primrec_r : forall X:set, forall g h:set -> set, (forall x :e X, g x = h x) -> F X g = F X h.

Axiom nat_primrec_0 : nat_primrec 0 = z.

Axiom nat_primrec_S : forall n:set, nat_p n -> nat_primrec (ordsucc n) = f n (nat_primrec n).

End NatRec.

Section NatArith.

Definition add_nat : set->set->set := fun n m:set => nat_primrec n (fun _ r => ordsucc r) m.

Infix + 360 right := add_nat.

Axiom add_nat_0R : forall n:set, n + 0 = n.

Axiom add_nat_SR : forall n m:set, nat_p m -> n + ordsucc m = ordsucc (n + m).

Axiom add_nat_p : forall n:set, nat_p n -> forall m:set, nat_p m -> nat_p (n + m).

Axiom add_nat_asso : forall n:set, nat_p n -> forall m:set, nat_p m -> forall k:set, nat_p k -> (n+m)+k = n+(m+k).

Axiom add_nat_0L : forall m:set, nat_p m -> 0+m = m.

Axiom add_nat_SL : forall n:set, nat_p n -> forall m:set, nat_p m -> ordsucc n + m = ordsucc (n+m).

Axiom add_nat_com : forall n:set, nat_p n -> forall m:set, nat_p m -> n + m = m + n.

Definition mul_nat : set->set->set := fun n m:set => nat_primrec 0 (fun _ r => n + r) m.

Infix * 355 right := mul_nat.

Axiom mul_nat_0R : forall n:set, n * 0 = 0.

Axiom mul_nat_SR : forall n m:set, nat_p m -> n * ordsucc m = n + n * m.

Axiom mul_nat_p : forall n:set, nat_p n -> forall m:set, nat_p m -> nat_p (n * m).

Axiom mul_nat_0L : forall m:set, nat_p m -> 0 * m = 0.

Axiom mul_nat_SL : forall n:set, nat_p n -> forall m:set, nat_p m -> ordsucc n * m = n * m + m.

Axiom mul_nat_com : forall n:set, nat_p n -> forall m:set, nat_p m -> n * m = m * n.

Axiom mul_add_nat_distrL : forall n:set, nat_p n -> forall m:set, nat_p m -> forall k:set, nat_p k -> n * (m + k) = n * m + n * k.

Axiom mul_add_nat_distrR : forall n:set, nat_p n -> forall m:set, nat_p m -> forall k:set, nat_p k -> (n + m) * k = n * k + m * k.

Axiom mul_nat_asso : forall n:set, nat_p n -> forall m:set, nat_p m -> forall k:set, nat_p k -> (n*m)*k = n*(m*k).

Axiom add_nat_1_1_2 : 1 + 1 = 2.

Definition divides_nat : set -> set -> prop :=
  fun m n => m :e omega /\ n :e omega /\ exists k :e omega, m * k = n.

Definition prime_nat : set -> prop :=
  fun n => n :e omega /\ 1 :e n /\ forall k :e omega, divides_nat k n -> k = 1 \/ k = n.

Definition coprime_nat : set->set->prop := fun a b => a :e omega /\ b :e omega /\ forall x :e omega :\: 1, divides_nat x a -> divides_nat x b -> x = 1.

Definition equiv_nat_mod : set -> set -> set -> prop
  := fun m k n => m :e omega /\ k :e omega /\ n :e omega :\: 1
       /\ ((exists q :e omega, m + q * n = k)
        \/ (exists q :e omega, k + q * n = m)).

Definition exp_nat : set->set->set := fun n m:set => nat_primrec 1 (fun _ r => n * r) m.

Infix ^ 342 right := exp_nat.

Definition even_nat : set -> prop := fun n => n :e omega /\ exists m :e omega, n = 2 * m.
Definition odd_nat : set -> prop := fun n => n :e omega /\ forall m :e omega, n <> 2 * m.

Definition nat_factorial : set -> set := fun n => nat_primrec 1 (fun k r => ordsucc k * r) n.

End NatArith.

Axiom PigeonHole_nat : forall n, nat_p n -> forall f:set -> set, (forall i :e ordsucc n, f i :e n) -> ~(forall i j :e ordsucc n, f i = f j -> i = j).

Axiom PigeonHole_nat_bij : forall n, nat_p n -> forall f:set -> set, (forall i :e n, f i :e n) -> (forall i j :e n, f i = f j -> i = j) -> bij n n f.

Axiom cases_7: forall i :e 7, forall p:set->prop, p 0 -> p 1 -> p 2 -> p 3 -> p 4 -> p 5 -> p 6 -> p i.
Axiom cases_8: forall i :e 8, forall p:set->prop, p 0 -> p 1 -> p 2 -> p 3 -> p 4 -> p 5 -> p 6 -> p 7 -> p i.
Axiom cases_9: forall i :e 9, forall p:set->prop, p 0 -> p 1 -> p 2 -> p 3 -> p 4 -> p 5 -> p 6 -> p 7 -> p 8 -> p i.

Axiom nIn_2_1 : 2 /:e 1.
Axiom neq_6_0: 6 <> 0.
Axiom neq_6_1: 6 <> 1.
Axiom neq_6_2: 6 <> 2.
Axiom neq_6_3: 6 <> 3.
Axiom neq_6_4: 6 <> 4.
Axiom neq_6_5: 6 <> 5.
Axiom neq_7_0: 7 <> 0.
Axiom neq_7_1: 7 <> 1.
Axiom neq_7_2: 7 <> 2.
Axiom neq_7_3: 7 <> 3.
Axiom neq_7_4: 7 <> 4.
Axiom neq_7_5: 7 <> 5.
Axiom neq_7_6: 7 <> 6.
Axiom neq_8_0: 8 <> 0.
Axiom neq_8_1: 8 <> 1.
Axiom neq_8_2: 8 <> 2.
Axiom neq_8_3: 8 <> 3.
Axiom neq_8_4: 8 <> 4.
Axiom neq_8_5: 8 <> 5.
Axiom neq_8_6: 8 <> 6.
Axiom neq_8_7: 8 <> 7.
Axiom neq_9_0: 9 <> 0.
Axiom neq_9_1: 9 <> 1.
Axiom neq_9_2: 9 <> 2.
Axiom neq_9_3: 9 <> 3.
Axiom neq_9_4: 9 <> 4.
Axiom neq_9_5: 9 <> 5.
Axiom neq_9_6: 9 <> 6.
Axiom neq_9_7: 9 <> 7.
Axiom neq_9_8: 9 <> 8.
Axiom Subq_1_Sing0 : 1 c= {0}.
Axiom Subq_Sing0_1 : {0} c= 1.
Axiom eq_1_Sing0 : 1 = {0}.
Axiom Subq_2_UPair01 : 2 c= {0,1}.
Axiom Subq_UPair01_2 : {0,1} c= 2.
Axiom eq_2_UPair01 : 2 = {0,1}.
Axiom ordinal_ind : forall p:set->prop, 
(forall alpha, ordinal alpha -> (forall beta :e alpha, p beta) -> p alpha)
->
forall alpha, ordinal alpha -> p alpha.

Axiom least_ordinal_ex : forall p:set -> prop, (exists alpha, ordinal alpha /\ p alpha) -> exists alpha, ordinal alpha /\ p alpha /\ forall beta :e alpha, ~p beta.

Axiom ordinal_trichotomy_or_impred : forall alpha beta, ordinal alpha -> ordinal beta -> forall p:prop, (alpha :e beta -> p) -> (alpha = beta -> p) -> (beta :e alpha -> p) -> p.

Axiom ordinal_trichotomy : forall alpha beta:set,
 ordinal alpha -> ordinal beta -> exactly1of3 (alpha :e beta) (alpha = beta) (beta :e alpha).

(*** Injection of set into itself that will correspond to x |-> (1,x) after pairing is defined. ***)
Definition Inj1 : set -> set := In_rec_i (fun X f => {0} :\/: {f x|x :e X}).

Axiom Inj1_eq : forall X:set, Inj1 X = {0} :\/: {Inj1 x|x :e X}.
Axiom Inj1I1 : forall X:set, 0 :e Inj1 X.
Axiom Inj1I2 : forall X x:set, x :e X -> Inj1 x :e Inj1 X.
Axiom Inj1E : forall X y:set, y :e Inj1 X -> y = 0 \/ exists x :e X, y = Inj1 x.
Axiom Inj1NE1 : forall x:set, Inj1 x <> 0.
Axiom Inj1NE2 : forall x:set, Inj1 x /:e {0}.

(*** Injection of set into itself that will correspond to x |-> (0,x) after pairing is defined. ***)
Definition Inj0 : set -> set := fun X => {Inj1 x|x :e X}.

Axiom Inj0I : forall X x:set, x :e X -> Inj1 x :e Inj0 X.
Axiom Inj0E : forall X y:set, y :e Inj0 X -> exists x:set, x :e X /\ y = Inj1 x.

(*** Unj : Left inverse of Inj1 and Inj0 ***)
Definition Unj : set -> set := In_rec_i (fun X f => {f x|x :e X :\: {0}}).

Axiom Unj_eq : forall X:set, Unj X = {Unj x|x :e X :\: {0}}.
Axiom Unj_Inj1_eq : forall X:set, Unj (Inj1 X) = X.
Axiom Inj1_inj : forall X Y:set, Inj1 X = Inj1 Y -> X = Y.
Axiom Unj_Inj0_eq : forall X:set, Unj (Inj0 X) = X.
Axiom Inj0_inj : forall X Y:set, Inj0 X = Inj0 Y -> X = Y.
Axiom Inj0_0 : Inj0 0 = 0.
Axiom Inj0_Inj1_neq : forall X Y:set, Inj0 X <> Inj1 Y.

(*** setsum ***)
Definition setsum : set -> set -> set := fun X Y => {Inj0 x|x :e X} :\/: {Inj1 y|y :e Y}.

(* Unicode :+: "002b" *)
Infix :+: 450 left := setsum.

Axiom Inj0_setsum : forall X Y x:set, x :e X -> Inj0 x :e X :+: Y.
Axiom Inj1_setsum : forall X Y y:set, y :e Y -> Inj1 y :e X :+: Y.
Axiom setsum_Inj_inv : forall X Y z:set, z :e X :+: Y -> (exists x :e X, z = Inj0 x) \/ (exists y :e Y, z = Inj1 y).

Axiom Inj0_setsum_0L : forall X:set, 0 :+: X = Inj0 X.
Axiom Inj1_setsum_1L : forall X:set, 1 :+: X = Inj1 X.
Axiom nat_setsum1_ordsucc : forall n:set, nat_p n -> 1 :+: n = ordsucc n.
Axiom setsum_0_0 : 0 :+: 0 = 0.
Axiom setsum_1_0_1 : 1 :+: 0 = 1.
Axiom setsum_1_1_2 : 1 :+: 1 = 2.
Axiom setsum_mon : forall X Y W Z, X c= W -> Y c= Z -> X :+: Y c= W :+: Z.

Definition combine_funcs : set -> set -> (set -> set) -> (set -> set) -> set -> set :=
  fun X Y f g z =>
   if z = Inj0 (Unj z) then f (Unj z) else g (Unj z).

Axiom combine_funcs_eq1 : forall X Y, forall f g:set -> set,
  forall x, combine_funcs X Y f g (Inj0 x) = f x.

Axiom combine_funcs_eq2 : forall X Y, forall f g:set -> set,
  forall y, combine_funcs X Y f g (Inj1 y) = g y.

Section pair_setsum.

Let pair := setsum.

Axiom pair_0_0 : pair 0 0 = 0.
Axiom pair_1_0_1 : pair 1 0 = 1.
Axiom pair_1_1_2 : pair 1 1 = 2.
Axiom nat_pair1_ordsucc : forall n:set, nat_p n -> pair 1 n = ordsucc n.

Definition proj0 : set -> set := fun Z => {Unj z|z :e Z, exists x:set, Inj0 x = z}.
Definition proj1 : set -> set := fun Z => {Unj z|z :e Z, exists y:set, Inj1 y = z}.

Axiom Inj0_pair_0_eq : Inj0 = pair 0.
Axiom Inj1_pair_1_eq : Inj1 = pair 1.
Axiom pairI0 : forall X Y x, x :e X -> pair 0 x :e pair X Y.
Axiom pairI1 : forall X Y y, y :e Y -> pair 1 y :e pair X Y.
Axiom pairE : forall X Y z, z :e pair X Y -> (exists x :e X, z = pair 0 x) \/ (exists y :e Y, z = pair 1 y).
Axiom pairE0 : forall X Y x, pair 0 x :e pair X Y -> x :e X.
Axiom pairE1 : forall X Y y, pair 1 y :e pair X Y -> y :e Y.
Axiom pairEq : forall X Y z, z :e pair X Y <-> (exists x :e X, z = pair 0 x) \/ (exists y :e Y, z = pair 1 y).
Axiom pairSubq : forall X Y W Z, X c= W -> Y c= Z -> pair X Y c= pair W Z.
Axiom proj0I : forall w u:set, pair 0 u :e w -> u :e proj0 w.
Axiom proj0E : forall w u:set, u :e proj0 w -> pair 0 u :e w.
Axiom proj1I : forall w u:set, pair 1 u :e w -> u :e proj1 w.
Axiom proj1E : forall w u:set, u :e proj1 w -> pair 1 u :e w.
Axiom proj0_pair_eq : forall X Y:set, proj0 (pair X Y) = X.
Axiom proj1_pair_eq : forall X Y:set, proj1 (pair X Y) = Y.
Axiom pair_inj : forall x y w z:set, pair x y = pair w z -> x = w /\ y = z.
Axiom pair_eta_Subq_proj : forall w, pair (proj0 w) (proj1 w) c= w.

(*** Sigma X Y = {(x,y) | x in X, y in Y x} ***)
Definition Sigma : set -> (set -> set) -> set :=
fun X Y => \/_ x :e X, {pair x y|y :e Y x}.

(* Unicode Sigma_ "2211" *)
Binder+ Sigma_ , := Sigma.

Axiom pair_Sigma : forall X:set, forall Y:set -> set, forall x :e X, forall y :e Y x, pair x y :e Sigma_ x :e X, Y x.

Axiom Sigma_eta_proj0_proj1 : forall X:set, forall Y:set -> set, forall z :e (Sigma_ x :e X, Y x), pair (proj0 z) (proj1 z) = z /\ proj0 z :e X /\ proj1 z :e Y (proj0 z).

Axiom proj_Sigma_eta : forall X:set, forall Y:set -> set, forall z :e (Sigma_ x :e X, Y x), pair (proj0 z) (proj1 z) = z.

Axiom proj0_Sigma : forall X:set, forall Y:set -> set, forall z:set, z :e (Sigma_ x :e X, Y x) -> proj0 z :e X.

Axiom proj1_Sigma : forall X:set, forall Y:set -> set, forall z:set, z :e (Sigma_ x :e X, Y x) -> proj1 z :e Y (proj0 z).

Axiom pair_Sigma_E0 : forall X:set, forall Y:set->set, forall x y:set, pair x y :e (Sigma_ x :e X, Y x) -> x :e X.

Axiom pair_Sigma_E1 : forall X:set, forall Y:set->set, forall x y:set, pair x y :e (Sigma_ x :e X, Y x) -> y :e Y x.

Axiom Sigma_E : forall X:set, forall Y:set->set, forall z:set, z :e (Sigma_ x :e X, Y x) -> exists x :e X, exists y :e Y x, z = pair x y.

Axiom Sigma_Eq : forall X:set, forall Y:set->set, forall z:set, z :e (Sigma_ x :e X, Y x) <-> exists x :e X, exists y :e Y x, z = pair x y.

(*** Covariance of subsets of Sigmas ***)
Axiom Sigma_mon : forall X Y:set, X c= Y -> forall Z W:set->set, (forall x :e X, Z x c= W x) -> (Sigma_ x :e X, Z x) c= Sigma_ y :e Y, W y.

Axiom Sigma_mon0 : forall X Y:set, X c= Y -> forall Z:set->set, (Sigma_ x :e X, Z x) c= Sigma_ y :e Y, Z y.

Axiom Sigma_mon1 : forall X:set, forall Z W:set->set, (forall x, x :e X -> Z x c= W x) -> (Sigma_ x :e X, Z x) c= Sigma_ x :e X, W x.

Axiom Sigma_Power_1 : forall X:set, X :e Power 1 -> forall Y:set->set, (forall x :e X, Y x :e Power 1) -> (Sigma_ x :e X, Y x) :e Power 1.

Definition setprod : set->set->set := fun X Y:set => Sigma_ x :e X, Y.

(* Unicode :*: "2a2f" *)
Infix :*: 440 left := setprod.

Axiom pair_setprod : forall X Y:set, forall (x :e X) (y :e Y), pair x y :e X :*: Y.

Axiom proj0_setprod : forall X Y:set, forall z :e X :*: Y, proj0 z :e X.

Axiom proj1_setprod : forall X Y:set, forall z :e X :*: Y, proj1 z :e Y.

Axiom pair_setprod_E0 : forall X Y x y:set, pair x y :e X :*: Y -> x :e X.

Axiom pair_setprod_E1 : forall X Y x y:set, pair x y :e X :*: Y -> y :e Y.

(*** lam X F = {(x,y) | x :e X, y :e F x} = \/_{x :e X} {(x,y) | y :e (F x)} = Sigma X F ***)
Let lam : set -> (set -> set) -> set := Sigma.

(***  ap f x = {proj1 z | z :e f,  exists y, z = pair x y}} ***)
Definition ap : set -> set -> set := fun f x => {proj1 z|z :e f, exists y:set, z = pair x y}.

Notation SetImplicitOp ap.
Notation SetLam Sigma.

Axiom lamI : forall X:set, forall F:set->set, forall x :e X, forall y :e F x, pair x y :e fun x :e X => F x.

Axiom lamE : forall X:set, forall F:set->set, forall z:set, z :e (fun x :e X => F x) -> exists x :e X, exists y :e F x, z = pair x y.

Axiom lamEq : forall X:set, forall F:set->set, forall z, z :e (fun x :e X => F x) <-> exists x :e X, exists y :e F x, z = pair x y.

Axiom apI : forall f x y, pair x y :e f -> y :e f x.

Axiom apE : forall f x y, y :e f x -> pair x y :e f.

Axiom apEq : forall f x y, y :e f x <-> pair x y :e f.

Axiom beta : forall X:set, forall F:set -> set, forall x:set, x :e X -> (fun x :e X => F x) x = F x.

Axiom beta0 : forall X:set, forall F:set -> set, forall x:set, x /:e X -> (fun x :e X => F x) x = 0.

Axiom proj0_ap_0 : forall u, proj0 u = u 0.

Axiom proj1_ap_1 : forall u, proj1 u = u 1.

Axiom pair_ap_0 : forall x y:set, (pair x y) 0 = x.

Axiom pair_ap_1 : forall x y:set, (pair x y) 1 = y.

Axiom pair_ap_n2 : forall x y i:set, i /:e 2 -> (pair x y) i = 0.

Axiom ap0_Sigma : forall X:set, forall Y:set -> set, forall z:set, z :e (Sigma_ x :e X, Y x) -> (z 0) :e X.

Axiom ap1_Sigma : forall X:set, forall Y:set -> set, forall z:set, z :e (Sigma_ x :e X, Y x) -> (z 1) :e (Y (z 0)).

Definition pair_p:set->prop
:= fun u:set => pair (u 0) (u 1) = u.

Axiom pair_p_I : forall x y, pair_p (pair x y).

Axiom pair_p_I2 : forall w, (forall u :e w, pair_p u /\ u 0 :e 2) -> pair_p w.

Axiom pair_p_In_ap : forall w f, pair_p w -> w :e f -> w 1 :e ap f (w 0).

Definition tuple_p : set->set->prop :=
fun n u => forall z :e u, exists i :e n, exists x:set, z = pair i x.

Axiom pair_p_tuple2 : pair_p = tuple_p 2.

Axiom tuple_p_2_tuple : forall x y:set, tuple_p 2 (x,y).

Axiom tuple_pair : forall x y:set, pair x y = (x,y).

Definition Pi : set -> (set -> set) -> set := fun X Y => {f :e Power (Sigma_ x :e X, Union (Y x)) | forall x :e X, f x :e Y x}.

(* Unicode Pi_ "220f" *)
Binder+ Pi_ , := Pi.

Axiom PiI : forall X:set, forall Y:set->set, forall f:set,
    (forall u :e f, pair_p u /\ u 0 :e X) -> (forall x :e X, f x :e Y x) -> f :e Pi_ x :e X, Y x.

Axiom PiE : forall X:set, forall Y:set->set, forall f:set,
  f :e (Pi_ x :e X, Y x) -> (forall u :e f, pair_p u /\ u 0 :e X) /\ (forall x :e X, f x :e Y x).

Axiom PiEq : forall X:set, forall Y:set->set, forall f:set,
    f :e Pi X Y <-> (forall u :e f, pair_p u /\ u 0 :e X) /\ (forall x :e X, f x :e Y x).

Axiom lam_Pi : forall X:set, forall Y:set -> set, forall F:set -> set,
 (forall x :e X, F x :e Y x) -> (fun x :e X => F x) :e (Pi_ x :e X, Y x).

Axiom ap_Pi : forall X:set, forall Y:set -> set, forall f:set, forall x:set, f :e (Pi_ x :e X, Y x) -> x :e X -> f x :e Y x.

Axiom Pi_ext_Subq : forall X:set, forall Y:set -> set, forall f g :e (Pi_ x :e X, Y x), (forall x :e X, f x c= g x) -> f c= g.

Axiom Pi_ext : forall X:set, forall Y:set -> set, forall f g :e (Pi_ x :e X, Y x), (forall x :e X, f x = g x) -> f = g.

Axiom Pi_eta : forall X:set, forall Y:set -> set, forall f:set, f :e (Pi_ x :e X, Y x) -> (fun x :e X => f x) = f.

Definition setexp : set->set->set := fun X Y:set => Pi_ y :e Y, X.

(* Superscript :^: *)
Infix :^: 430 left := setexp.

Axiom pair_tuple_fun : pair = (fun x y => (x,y)).

Axiom lamI2 : forall X, forall F:set->set, forall x :e X, forall y :e F x, (x,y) :e fun x :e X => F x.

Axiom lamE2 : forall X, forall F : set -> set , forall z : set , z :e (fun x :e X => F x) -> exists x :e X, exists y :e F x, z = (x,y).

Axiom tuple_2_inj : forall x y w z:set, (x,y) = (w,z) -> x = w /\ y = z.

Section Tuples.

Variable x0 x1: set.
Axiom tuple_2_0_eq: (x0,x1) 0 = x0.

Axiom tuple_2_1_eq: (x0,x1) 1 = x1.

End Tuples.

Definition Sep2 : set -> (set -> set) -> (set -> set -> prop) -> set
 := fun X Y R => {u :e Sigma_ x :e X, Y x | R (u 0) (u 1)}.

Axiom Sep2I: forall X, forall Y:set -> set, forall R:set -> set -> prop,
   forall x :e X, forall y :e Y x, R x y -> (x,y) :e Sep2 X Y R.

Axiom Sep2E: forall X, forall Y:set -> set, forall R:set -> set -> prop,
   forall u :e Sep2 X Y R, exists x :e X, exists y :e Y x, u = (x,y) /\ R x y.

Axiom Sep2E': forall X, forall Y:set -> set, forall R:set -> set -> prop,
   forall x y, (x,y) :e Sep2 X Y R -> x :e X /\ y :e Y x /\ R x y.

Axiom Sep2E'1: forall X, forall Y:set -> set, forall R:set -> set -> prop,
   forall x y, (x,y) :e Sep2 X Y R -> x :e X.

Axiom Sep2E'2: forall X, forall Y:set -> set, forall R:set -> set -> prop,
   forall x y, (x,y) :e Sep2 X Y R -> y :e Y x.

Axiom Sep2E'3: forall X, forall Y:set -> set, forall R:set -> set -> prop,
   forall x y, (x,y) :e Sep2 X Y R -> R x y.

Definition set_of_pairs : set -> prop := fun X => forall x :e X, exists y z, x = (y,z).

Axiom set_of_pairs_ext : forall X Y,
     set_of_pairs X -> set_of_pairs Y
  -> (forall v w, (v,w) :e X <-> (v,w) :e Y)
  -> X = Y.

Axiom Sep2_set_of_pairs : forall X, forall Y:set -> set, forall R:set -> set -> prop,
   set_of_pairs (Sep2 X Y R).

Axiom Sep2_ext : forall X, forall Y:set -> set, forall R R':set -> set -> prop,
     (forall x :e X, forall y :e Y x, R x y <-> R' x y)
  -> Sep2 X Y R = Sep2 X Y R'.

Axiom lam_ext_sub: forall X, forall F G:set -> set, (forall x :e X, F x = G x) -> (fun x :e X => F x) c= (fun x :e X => G x).

Axiom lam_ext: forall X, forall F G:set -> set, (forall x :e X, F x = G x) -> (fun x :e X => F x) = (fun x :e X => G x).

Axiom lam_eta: forall X, forall F:set -> set, (fun x :e X => (fun x :e X => F x) x) = (fun x :e X => F x).

Axiom tuple_2_eta : forall x y, (fun i :e 2 => (x,y) i) = (x,y).

Definition lam2 : set -> (set -> set) -> (set -> set -> set) -> set
 := fun X Y F => fun x :e X => fun y :e Y x => F x y.

Axiom beta2 : forall X, forall Y:set -> set, forall F:set->set->set, forall x :e X, forall y :e Y x, lam2 X Y F x y = F x y.

Axiom lam2_ext: forall X, forall Y:set -> set, forall F G:set -> set -> set,
     (forall x :e X, forall y :e Y x, F x y = G x y)
  -> lam2 X Y F = lam2 X Y G.

Definition encode_u : set -> (set -> set) -> set := lam.
Definition decode_u : set -> set -> set := ap.

Definition encode_b : set -> (set -> set -> set) -> set := fun X F => lam2 X (fun _ => X) F.
Definition decode_b : set -> set -> set -> set := fun F x y => F x y.

Definition encode_p : set -> (set -> prop) -> set := fun X P => Sep X P.
Definition decode_p : set -> set -> prop := fun P x => x :e P.

Definition encode_r : set -> (set -> set -> prop) -> set := fun X R => Sep2 X (fun _ => X) R.
Definition decode_r : set -> set -> set -> prop := fun R x y => (x,y) :e R.

Definition encode_c : set -> ((set -> prop) -> prop) -> set := fun X C => Sep (Power X) (fun U => (C (fun x => x :e U))).
Definition decode_c : set -> (set -> prop) -> prop := fun C U => exists V, (forall x, U x <-> x :e V) /\ V :e C.

Axiom decode_encode_u : forall X, forall F:set -> set, forall x :e X, decode_u (encode_u X F) x = F x.

Axiom encode_u_ext : forall X, forall F F':set -> set, (forall x :e X, F x = F' x) -> encode_u X F = encode_u X F'.

Axiom decode_encode_b : forall X, forall F:set -> set -> set, forall x y :e X, decode_b (encode_b X F) x y = F x y.

Axiom encode_b_ext : forall X, forall F F':set -> set -> set, (forall x y :e X, F x y = F' x y) -> encode_b X F = encode_b X F'.

Axiom decode_encode_p : forall X, forall P:set -> prop, forall x :e X, (decode_p (encode_p X P) x) = (P x).

Axiom encode_p_ext : forall X, forall P P':set -> prop, (forall x :e X, P x <-> P' x) -> encode_p X P = encode_p X P'.

Axiom decode_encode_r : forall X, forall R:set -> set -> prop, forall x y :e X, (decode_r (encode_r X R) x y) = (R x y).

Axiom encode_r_ext : forall X, forall R R':set -> set -> prop, (forall x y :e X, R x y <-> R' x y) -> encode_r X R = encode_r X R'.

Axiom decode_encode_c : forall X, forall C:(set -> prop) -> prop, forall U:set -> prop, (forall x, U x -> x :e X) -> (decode_c (encode_c X C) U) = (C U).

Axiom encode_c_ext : forall X, forall C C':(set -> prop) -> prop, (forall U:set -> prop, (forall x, U x -> x :e X) -> (C U <-> C' U)) -> encode_c X C = encode_c X C'.

Axiom setprod_mon : forall X Y:set, X c= Y -> forall Z W:set, Z c= W -> X :*: Z c= Y :*: W.

Axiom setprod_mon0 : forall X Y:set, X c= Y -> forall Z:set, X :*: Z c= Y :*: Z.

Axiom setprod_mon1 : forall X:set, forall Z W:set, Z c= W -> X :*: Z c= X :*: W.

Axiom pair_eta_Subq : forall w, pair (w 0) (w 1) c= w.

Axiom Sigma_eta : forall X:set, forall Y:set -> set, forall z :e (Sigma_ x :e X, Y x), pair (z 0) (z 1) = z.

Axiom ReplEq_setprod_ext : forall X Y, forall F G:set -> set -> set, (forall x :e X, forall y :e Y, F x y = G x y) -> {F (w 0) (w 1)|w :e X :*: Y} = {G (w 0) (w 1)|w :e X :*: Y}.

Axiom tuple_p_3_tuple : forall x y z:set, tuple_p 3 (x,y,z).

Axiom tuple_p_4_tuple : forall x y z w:set, tuple_p 4 (x,y,z,w).

Axiom Pi_Power_1 : forall X:set, forall Y:set->set, (forall x :e X, Y x :e Power 1) -> (Pi_ x :e X, Y x) :e Power 1.

Axiom Pi_0_dom_mon : forall X Y:set, forall A:set->set, X c= Y -> (forall y :e Y, y /:e X -> 0 :e A y)
 -> (Pi_ x :e X, A x) c= Pi_ y :e Y, A y.

Axiom Pi_cod_mon : forall X:set, forall A B:set->set, (forall x :e X, A x c= B x) -> (Pi_ x :e X, A x) c= Pi_ x :e X, B x.

Axiom Pi_0_mon : forall X Y:set, forall A B:set->set,
 (forall x :e X, A x c= B x) -> X c= Y -> (forall y :e Y, y /:e X -> 0 :e B y)
 -> (Pi_ x :e X, A x) c= Pi_ y :e Y, B y.

Axiom setexp_2_eq : forall X:set, X :*: X = X :^: 2.

Axiom setexp_0_dom_mon : forall A:set, 0 :e A -> forall X Y:set, X c= Y -> A :^: X c= A :^: Y.

Axiom setexp_0_mon : forall X Y A B:set, 0 :e B -> A c= B -> X c= Y -> A :^: X c= B :^: Y.

Axiom nat_in_setexp_mon : forall A:set, 0 :e A -> forall n, nat_p n -> forall m :e n, A :^: m c= A :^: n.

Axiom tupleI0 : forall X Y x, x :e X -> (0,x) :e (X,Y).

Axiom tupleI1 : forall X Y y, y :e Y -> (1,y) :e (X,Y).

Axiom tupleE : forall X Y z, z :e (X,Y) -> (exists x :e X, z = (0,x)) \/ (exists y :e Y, z = (1,y)).

Axiom tuple_2_Sigma : forall X:set, forall Y:set -> set, forall x :e X, forall y :e Y x, (x,y) :e Sigma_ x :e X, Y x.

Axiom tuple_2_setprod : forall X:set, forall Y:set, forall x :e X, forall y :e Y, (x,y) :e X :*: Y.

Axiom tuple_Sigma_eta : forall X:set, forall Y:set -> set, forall z :e (Sigma_ x :e X, Y x), (z 0,z 1) = z.

Axiom apI2 : forall f x y, (x,y) :e f -> y :e f x.

Axiom apE2 : forall f x y, y :e f x -> (x,y) :e f.

Axiom ap_const_0 : forall x, 0 x = 0.

Axiom tuple_2_in_A_2 : forall x y A, x :e A -> y :e A -> (x,y) :e A :^: 2.

Axiom tuple_2_bij_2 : forall x y, x :e 2 -> y :e 2 -> x <> y -> bij 2 2 (fun i => (x,y) i).

Axiom tuple_3_eta : forall x y z, (fun i :e 3 => (x,y,z) i) = (x,y,z).

Axiom tuple_4_eta : forall x y z w, (fun i :e 4 => (x,y,z,w) i) = (x,y,z,w).

Section Tuples.

Variable x0 x1 x2: set.

Axiom tuple_3_0_eq: (x0,x1,x2) 0 = x0.

Axiom tuple_3_1_eq: (x0,x1,x2) 1 = x1.

Axiom tuple_3_2_eq: (x0,x1,x2) 2 = x2.

Variable x3: set.
Axiom tuple_4_0_eq: (x0,x1,x2,x3) 0 = x0.

Axiom tuple_4_1_eq: (x0,x1,x2,x3) 1 = x1.

Axiom tuple_4_2_eq: (x0,x1,x2,x3) 2 = x2.

Axiom tuple_4_3_eq: (x0,x1,x2,x3) 3 = x3.

Variable x4: set.

Axiom tuple_5_0_eq: (x0,x1,x2,x3,x4) 0 = x0.

Axiom tuple_5_1_eq: (x0,x1,x2,x3,x4) 1 = x1.

Axiom tuple_5_2_eq: (x0,x1,x2,x3,x4) 2 = x2.

Axiom tuple_5_3_eq: (x0,x1,x2,x3,x4) 3 = x3.

Axiom tuple_5_4_eq: (x0,x1,x2,x3,x4) 4 = x4.

Variable x5: set.
Axiom tuple_6_0_eq: (x0,x1,x2,x3,x4,x5) 0 = x0.

Axiom tuple_6_1_eq: (x0,x1,x2,x3,x4,x5) 1 = x1.

Axiom tuple_6_2_eq: (x0,x1,x2,x3,x4,x5) 2 = x2.

Axiom tuple_6_3_eq: (x0,x1,x2,x3,x4,x5) 3 = x3.

Axiom tuple_6_4_eq: (x0,x1,x2,x3,x4,x5) 4 = x4.

Axiom tuple_6_5_eq: (x0,x1,x2,x3,x4,x5) 5 = x5.

Variable x6: set.
Axiom tuple_7_0_eq: (x0,x1,x2,x3,x4,x5,x6) 0 = x0.

Axiom tuple_7_1_eq: (x0,x1,x2,x3,x4,x5,x6) 1 = x1.

Axiom tuple_7_2_eq: (x0,x1,x2,x3,x4,x5,x6) 2 = x2.

Axiom tuple_7_3_eq: (x0,x1,x2,x3,x4,x5,x6) 3 = x3.

Axiom tuple_7_4_eq: (x0,x1,x2,x3,x4,x5,x6) 4 = x4.

Axiom tuple_7_5_eq: (x0,x1,x2,x3,x4,x5,x6) 5 = x5.

Axiom tuple_7_6_eq: (x0,x1,x2,x3,x4,x5,x6) 6 = x6.

Variable x7: set.

Axiom tuple_8_0_eq: (x0,x1,x2,x3,x4,x5,x6,x7) 0 = x0.

Axiom tuple_8_1_eq: (x0,x1,x2,x3,x4,x5,x6,x7) 1 = x1.

Axiom tuple_8_2_eq: (x0,x1,x2,x3,x4,x5,x6,x7) 2 = x2.

Axiom tuple_8_3_eq: (x0,x1,x2,x3,x4,x5,x6,x7) 3 = x3.

Axiom tuple_8_4_eq: (x0,x1,x2,x3,x4,x5,x6,x7) 4 = x4.

Axiom tuple_8_5_eq: (x0,x1,x2,x3,x4,x5,x6,x7) 5 = x5.

Axiom tuple_8_6_eq: (x0,x1,x2,x3,x4,x5,x6,x7) 6 = x6.

Axiom tuple_8_7_eq: (x0,x1,x2,x3,x4,x5,x6,x7) 7 = x7.

Variable x8: set.
Axiom tuple_9_0_eq: (x0,x1,x2,x3,x4,x5,x6,x7,x8) 0 = x0.

Axiom tuple_9_1_eq: (x0,x1,x2,x3,x4,x5,x6,x7,x8) 1 = x1.

Axiom tuple_9_2_eq: (x0,x1,x2,x3,x4,x5,x6,x7,x8) 2 = x2.

Axiom tuple_9_3_eq: (x0,x1,x2,x3,x4,x5,x6,x7,x8) 3 = x3.

Axiom tuple_9_4_eq: (x0,x1,x2,x3,x4,x5,x6,x7,x8) 4 = x4.

Axiom tuple_9_5_eq: (x0,x1,x2,x3,x4,x5,x6,x7,x8) 5 = x5.

Axiom tuple_9_6_eq: (x0,x1,x2,x3,x4,x5,x6,x7,x8) 6 = x6.

Axiom tuple_9_7_eq: (x0,x1,x2,x3,x4,x5,x6,x7,x8) 7 = x7.

Axiom tuple_9_8_eq: (x0,x1,x2,x3,x4,x5,x6,x7,x8) 8 = x8.

End Tuples.

End pair_setsum.

(* Unicode Sigma_ "2211" *)
Binder+ Sigma_ , := Sigma.

(* Unicode :*: "2a2f" *)
Infix :*: 440 left := setprod.

(* Unicode Pi_ "220f" *)
Binder+ Pi_ , := Pi.

(* Superscript :^: *)
Infix :^: 430 left := setexp.

Axiom tuple_3_in_A_3 : forall x y z A, x :e A -> y :e A -> z :e A -> (x,y,z) :e A :^: 3.

Axiom tuple_3_bij_3 : forall x y z, x :e 3 -> y :e 3 -> z :e 3 -> x <> y -> x <> z -> y <> z -> bij 3 3 (fun i => (x,y,z) i).

Axiom tuple_4_in_A_4 : forall x y z w A, x :e A -> y :e A -> z :e A -> w :e A -> (x,y,z,w) :e A :^: 4.

Axiom tuple_4_bij_4 : forall x y z w, x :e 4 -> y :e 4 -> z :e 4 -> w :e 4 -> x <> y -> x <> z -> x <> w -> y <> z -> y <> w -> z <> w -> bij 4 4 (fun i => (x,y,z,w) i).

Axiom iff_refl : forall A:prop, A <-> A.

Axiom iff_sym : forall A B:prop, (A <-> B) -> (B <-> A).

Axiom iff_trans : forall A B C: prop, (A <-> B) -> (B <-> C) -> (A <-> C).

Axiom not_or_and_demorgan : forall A B:prop, ~(A \/ B) -> ~A /\ ~B.

Axiom and_not_or_demorgan : forall A B:prop, ~A /\ ~B -> ~(A \/ B).

Axiom not_ex_all_demorgan_i : forall P:set->prop, (~exists x, P x) -> forall x, ~P x.

Axiom not_all_ex_demorgan_i : forall P:set->prop, ~(forall x, P x) -> exists x, ~P x.

Axiom eq_or_nand : or = (fun (x y:prop) => ~(~x /\ ~y)).

(* Parameter EpsR_i_i_1 "ddf851fd1854df71be5ab088768ea86709a9288535efee95c3e876766b3c9195" "20c61c861cf1a0ec40aa6c975b43cd41a1479be2503a10765e97a8492374fbb0" *)
Parameter EpsR_i_i_1 : (set->set->prop) -> set.

(* Parameter EpsR_i_i_2 "73402bd7c3bf0477017bc48f6f236eef4ba9c1b3cffe34afb0a7b991fea12054" "eced574473e7bc0629a71e0b88779fd6c752d24e0ef24f1e40d37c12fedf400a" *)
Parameter EpsR_i_i_2 : (set->set->prop) -> set.

Axiom EpsR_i_i_12 : forall R:set->set->prop, (exists x y, R x y) -> R (EpsR_i_i_1 R) (EpsR_i_i_2 R).

(* Parameter DescrR_i_io_1 "1f005fdad5c6f98763a15a5e5539088f5d43b7d1be866b0b204fda1ce9ed9248" "1d3fd4a14ef05bd43f5c147d7966cf05fd2fed808eea94f56380454b9a6044b2" *)
Parameter DescrR_i_io_1 : (set->(set->prop)->prop) -> set.

(* Parameter DescrR_i_io_2 "28d8599686476258c12dcc5fc5f5974335febd7d5259e1a8e5918b7f9b91ca03" "768eb2ad186988375e6055394e36e90c81323954b8a44eb08816fb7a84db2272" *)
Parameter DescrR_i_io_2 : (set->(set->prop)->prop) -> set->prop.

Axiom DescrR_i_io_12 : forall R:set->(set->prop)->prop, (exists x, (exists y:set->prop, R x y) /\ (forall y z:set -> prop, R x y -> R x z -> y = z)) -> R (DescrR_i_io_1 R) (DescrR_i_io_2 R).

(** Conway describes this way of formalizing in ZF in an appendix to Part Zero of his book,
    but rejects formalization in favor of "Mathematician's Liberation."
 **)

Definition PNoEq_ : set -> (set -> prop) -> (set -> prop) -> prop
 := fun alpha p q => forall beta :e alpha, p beta <-> q beta.

Axiom PNoEq_ref_ : forall alpha, forall p:set -> prop, PNoEq_ alpha p p.

Axiom PNoEq_sym_ : forall alpha, forall p q:set -> prop, PNoEq_ alpha p q -> PNoEq_ alpha q p.

Axiom PNoEq_tra_ : forall alpha, forall p q r:set -> prop, PNoEq_ alpha p q -> PNoEq_ alpha q r -> PNoEq_ alpha p r.

Axiom PNoEq_antimon_ : forall p q:set -> prop, forall alpha, ordinal alpha -> forall beta :e alpha, PNoEq_ alpha p q -> PNoEq_ beta p q.

Definition PNoLt_ : set -> (set -> prop) -> (set -> prop) -> prop
 := fun alpha p q => exists beta :e alpha, PNoEq_ beta p q /\ ~p beta /\ q beta.

Axiom PNoLt_E_ : forall alpha, forall p q:set -> prop, PNoLt_ alpha p q ->
  forall R:prop, (forall beta, beta :e alpha -> PNoEq_ beta p q -> ~p beta -> q beta -> R) -> R.

Axiom PNoLt_irref_ : forall alpha, forall p:set -> prop, ~PNoLt_ alpha p p.

Axiom PNoLt_mon_ : forall p q:set -> prop, forall alpha, ordinal alpha -> forall beta :e alpha, PNoLt_ beta p q -> PNoLt_ alpha p q.

Axiom PNoLt_trichotomy_or_ : forall p q:set -> prop, forall alpha, ordinal alpha
  -> PNoLt_ alpha p q \/ PNoEq_ alpha p q \/ PNoLt_ alpha q p.

Axiom PNoLt_tra_ : forall alpha, ordinal alpha -> forall p q r:set -> prop, PNoLt_ alpha p q -> PNoLt_ alpha q r -> PNoLt_ alpha p r.

(* Parameter PNoLt "2336eb45d48549dd8a6a128edc17a8761fd9043c180691483bcf16e1acc9f00a" "8f57a05ce4764eff8bc94b278352b6755f1a46566cd7220a5488a4a595a47189" *)
Parameter PNoLt : set -> (set -> prop) -> set -> (set -> prop) -> prop.

Axiom PNoLtI1 : forall alpha beta, forall p q:set -> prop,
  PNoLt_ (alpha :/\: beta) p q -> PNoLt alpha p beta q.

Axiom PNoLtI2 : forall alpha beta, forall p q:set -> prop,
  alpha :e beta -> PNoEq_ alpha p q -> q alpha -> PNoLt alpha p beta q.

Axiom PNoLtI3 : forall alpha beta, forall p q:set -> prop,
  beta :e alpha -> PNoEq_ beta p q -> ~p beta -> PNoLt alpha p beta q.

Axiom PNoLtE : forall alpha beta, forall p q:set -> prop,
  PNoLt alpha p beta q ->
  forall R:prop,
      (PNoLt_ (alpha :/\: beta) p q -> R)
   -> (alpha :e beta -> PNoEq_ alpha p q -> q alpha -> R)
   -> (beta :e alpha -> PNoEq_ beta p q -> ~p beta -> R)
   -> R.

Axiom PNoLtE2 : forall alpha, forall p q:set -> prop,
  PNoLt alpha p alpha q -> PNoLt_ alpha p q.

Axiom PNoLt_irref : forall alpha, forall p:set -> prop, ~PNoLt alpha p alpha p.

Axiom PNoLt_trichotomy_or : forall alpha beta, forall p q:set -> prop,
 ordinal alpha -> ordinal beta ->
 PNoLt alpha p beta q \/ alpha = beta /\ PNoEq_ alpha p q \/ PNoLt beta q alpha p.

Axiom PNoLtEq_tra : forall alpha beta, ordinal alpha -> ordinal beta -> forall p q r:set -> prop, PNoLt alpha p beta q -> PNoEq_ beta q r -> PNoLt alpha p beta r.

Axiom PNoEqLt_tra : forall alpha beta, ordinal alpha -> ordinal beta -> forall p q r:set -> prop, PNoEq_ alpha p q -> PNoLt alpha q beta r -> PNoLt alpha p beta r.

Axiom PNoLt_tra : forall alpha beta gamma, ordinal alpha -> ordinal beta -> ordinal gamma -> forall p q r:set -> prop, PNoLt alpha p beta q -> PNoLt beta q gamma r -> PNoLt alpha p gamma r.

Definition PNoLe : set -> (set -> prop) -> set -> (set -> prop) -> prop
   := fun alpha p beta q => PNoLt alpha p beta q \/ alpha = beta /\ PNoEq_ alpha p q.

Axiom PNoLeI1 : forall alpha beta, forall p q:set -> prop,
   PNoLt alpha p beta q -> PNoLe alpha p beta q.

Axiom PNoLeI2 : forall alpha, forall p q:set -> prop,
   PNoEq_ alpha p q -> PNoLe alpha p alpha q.

Axiom PNoLe_ref : forall alpha, forall p:set -> prop, PNoLe alpha p alpha p.

Axiom PNoLe_antisym : forall alpha beta, ordinal alpha -> ordinal beta ->
 forall p q:set -> prop,
 PNoLe alpha p beta q -> PNoLe beta q alpha p -> alpha = beta /\ PNoEq_ alpha p q.

Axiom PNoLtLe_tra : forall alpha beta gamma, ordinal alpha -> ordinal beta -> ordinal gamma -> forall p q r:set -> prop, PNoLt alpha p beta q -> PNoLe beta q gamma r -> PNoLt alpha p gamma r.

Axiom PNoLeLt_tra : forall alpha beta gamma, ordinal alpha -> ordinal beta -> ordinal gamma -> forall p q r:set -> prop, PNoLe alpha p beta q -> PNoLt beta q gamma r -> PNoLt alpha p gamma r.

Axiom PNoEqLe_tra : forall alpha beta, ordinal alpha -> ordinal beta -> forall p q r:set -> prop, PNoEq_ alpha p q -> PNoLe alpha q beta r -> PNoLe alpha p beta r.

Axiom PNoLeEq_tra : forall alpha beta, ordinal alpha -> ordinal beta -> forall p q r:set -> prop, PNoLe alpha p beta q -> PNoEq_ beta q r -> PNoLe alpha p beta r.

Axiom PNoLe_tra : forall alpha beta gamma, ordinal alpha -> ordinal beta -> ordinal gamma -> forall p q r:set -> prop, PNoLe alpha p beta q -> PNoLe beta q gamma r -> PNoLe alpha p gamma r.

Definition PNo_downc : (set -> (set -> prop) -> prop) -> set -> (set -> prop) -> prop
 := fun L alpha p => exists beta, ordinal beta /\ exists q:set -> prop, L beta q /\ PNoLe alpha p beta q.

Definition PNo_upc : (set -> (set -> prop) -> prop) -> set -> (set -> prop) -> prop
 := fun R alpha p => exists beta, ordinal beta /\ exists q:set -> prop, R beta q /\ PNoLe beta q alpha p.

Axiom PNoLe_downc : forall L:set -> (set -> prop) -> prop, forall alpha beta, forall p q:set -> prop,
  ordinal alpha -> ordinal beta ->
  PNo_downc L alpha p -> PNoLe beta q alpha p -> PNo_downc L beta q.

Axiom PNo_downc_ref : forall L:set -> (set -> prop) -> prop, forall alpha, ordinal alpha -> forall p:set -> prop, L alpha p -> PNo_downc L alpha p.

Axiom PNo_upc_ref : forall R:set -> (set -> prop) -> prop, forall alpha, ordinal alpha -> forall p:set -> prop, R alpha p -> PNo_upc R alpha p.

Axiom PNoLe_upc : forall R:set -> (set -> prop) -> prop, forall alpha beta, forall p q:set -> prop,
  ordinal alpha -> ordinal beta ->
  PNo_upc R alpha p -> PNoLe alpha p beta q -> PNo_upc R beta q.

Definition PNoLt_pwise : (set -> (set -> prop) -> prop) -> (set -> (set -> prop) -> prop) -> prop
  := fun L R => forall gamma, ordinal gamma -> forall p:set -> prop, L gamma p -> forall delta, ordinal delta -> forall q:set -> prop, R delta q -> PNoLt gamma p delta q.

Axiom PNoLt_pwise_downc_upc : forall L R:set -> (set -> prop) -> prop,
    PNoLt_pwise L R -> PNoLt_pwise (PNo_downc L) (PNo_upc R).

Definition PNo_rel_strict_upperbd : (set -> (set -> prop) -> prop) -> set -> (set -> prop) -> prop
  := fun L alpha p =>
       forall beta :e alpha, forall q:set -> prop, PNo_downc L beta q -> PNoLt beta q alpha p.

Definition PNo_rel_strict_lowerbd : (set -> (set -> prop) -> prop) -> set -> (set -> prop) -> prop
  := fun R alpha p =>
       forall beta :e alpha, forall q:set -> prop, PNo_upc R beta q -> PNoLt alpha p beta q.

Definition PNo_rel_strict_imv : (set -> (set -> prop) -> prop) -> (set -> (set -> prop) -> prop) -> set -> (set -> prop) -> prop
  := fun L R alpha p => PNo_rel_strict_upperbd L alpha p /\ PNo_rel_strict_lowerbd R alpha p.

Axiom PNoEq_rel_strict_upperbd : forall L:set -> (set -> prop) -> prop, forall alpha, ordinal alpha -> forall p q:set -> prop,
  PNoEq_ alpha p q -> PNo_rel_strict_upperbd L alpha p -> PNo_rel_strict_upperbd L alpha q.

Axiom PNo_rel_strict_upperbd_antimon : forall L:set -> (set -> prop) -> prop, forall alpha, ordinal alpha -> forall p:set -> prop, forall beta :e alpha,
  PNo_rel_strict_upperbd L alpha p -> PNo_rel_strict_upperbd L beta p.

Axiom PNoEq_rel_strict_lowerbd : forall R:set -> (set -> prop) -> prop, forall alpha, ordinal alpha -> forall p q:set -> prop,
  PNoEq_ alpha p q -> PNo_rel_strict_lowerbd R alpha p -> PNo_rel_strict_lowerbd R alpha q.

Axiom PNo_rel_strict_lowerbd_antimon : forall R:set -> (set -> prop) -> prop, forall alpha, ordinal alpha -> forall p:set -> prop, forall beta :e alpha,
  PNo_rel_strict_lowerbd R alpha p -> PNo_rel_strict_lowerbd R beta p.

Axiom PNoEq_rel_strict_imv : forall L R:set -> (set -> prop) -> prop, forall alpha, ordinal alpha -> forall p q:set -> prop,
  PNoEq_ alpha p q -> PNo_rel_strict_imv L R alpha p -> PNo_rel_strict_imv L R alpha q.

Axiom PNo_rel_strict_imv_antimon : forall L R:set -> (set -> prop) -> prop, forall alpha, ordinal alpha -> forall p:set -> prop, forall beta :e alpha,
  PNo_rel_strict_imv L R alpha p -> PNo_rel_strict_imv L R beta p.

Definition PNo_rel_strict_uniq_imv : (set -> (set -> prop) -> prop) -> (set -> (set -> prop) -> prop) -> set -> (set -> prop) -> prop
  := fun L R alpha p => PNo_rel_strict_imv L R alpha p /\ forall q:set -> prop, PNo_rel_strict_imv L R alpha q -> PNoEq_ alpha p q.

Definition PNo_rel_strict_split_imv : (set -> (set -> prop) -> prop) -> (set -> (set -> prop) -> prop) -> set -> (set -> prop) -> prop
  := fun L R alpha p =>
         PNo_rel_strict_imv L R (ordsucc alpha) (fun delta => p delta /\ delta <> alpha)
      /\ PNo_rel_strict_imv L R (ordsucc alpha) (fun delta => p delta \/ delta = alpha).

Axiom PNo_extend0_eq : forall alpha, forall p:set -> prop, PNoEq_ alpha p (fun delta => p delta /\ delta <> alpha).

Axiom PNo_extend1_eq : forall alpha, forall p:set -> prop, PNoEq_ alpha p (fun delta => p delta \/ delta = alpha).

Axiom PNo_rel_imv_ex : forall L R:set -> (set -> prop) -> prop,
  PNoLt_pwise L R ->
  forall alpha, ordinal alpha ->
      (exists p:set -> prop, PNo_rel_strict_uniq_imv L R alpha p)
   \/ (exists tau :e alpha, exists p:set -> prop, PNo_rel_strict_split_imv L R tau p).

Definition PNo_lenbdd : set -> (set -> (set -> prop) -> prop) -> prop
  := fun alpha L => forall beta, forall p:set -> prop, L beta p -> beta :e alpha.

Axiom PNo_lenbdd_strict_imv_extend0 : forall L R:set -> (set -> prop) -> prop,
  forall alpha, ordinal alpha -> PNo_lenbdd alpha L -> PNo_lenbdd alpha R ->
  forall p:set -> prop,
  PNo_rel_strict_imv L R alpha p -> PNo_rel_strict_imv L R (ordsucc alpha) (fun delta => p delta /\ delta <> alpha).

Axiom PNo_lenbdd_strict_imv_extend1 : forall L R:set -> (set -> prop) -> prop,
  forall alpha, ordinal alpha -> PNo_lenbdd alpha L -> PNo_lenbdd alpha R ->
  forall p:set -> prop,
  PNo_rel_strict_imv L R alpha p -> PNo_rel_strict_imv L R (ordsucc alpha) (fun delta => p delta \/ delta = alpha).

Axiom PNo_lenbdd_strict_imv_split : forall L R:set -> (set -> prop) -> prop,
  forall alpha, ordinal alpha -> PNo_lenbdd alpha L -> PNo_lenbdd alpha R ->
  forall p:set -> prop,
  PNo_rel_strict_imv L R alpha p -> PNo_rel_strict_split_imv L R alpha p.

Axiom PNo_rel_imv_bdd_ex : forall L R:set -> (set -> prop) -> prop,
  PNoLt_pwise L R ->
  forall alpha, ordinal alpha
   -> PNo_lenbdd alpha L
   -> PNo_lenbdd alpha R
   -> exists beta :e ordsucc alpha,
      exists p:set -> prop, PNo_rel_strict_split_imv L R beta p.

Definition PNo_strict_upperbd : (set -> (set -> prop) -> prop) -> set -> (set -> prop) -> prop
  := fun L alpha p =>
       forall beta, ordinal beta -> forall q:set -> prop, L beta q -> PNoLt beta q alpha p.

Definition PNo_strict_lowerbd : (set -> (set -> prop) -> prop) -> set -> (set -> prop) -> prop
  := fun R alpha p =>
       forall beta, ordinal beta -> forall q:set -> prop, R beta q -> PNoLt alpha p beta q.

Definition PNo_strict_imv : (set -> (set -> prop) -> prop) -> (set -> (set -> prop) -> prop) -> set -> (set -> prop) -> prop
  := fun L R alpha p => PNo_strict_upperbd L alpha p /\ PNo_strict_lowerbd R alpha p.

Axiom PNoEq_strict_upperbd : forall L:set -> (set -> prop) -> prop, forall alpha, ordinal alpha -> forall p q:set -> prop,
  PNoEq_ alpha p q -> PNo_strict_upperbd L alpha p -> PNo_strict_upperbd L alpha q.

Axiom PNoEq_strict_lowerbd : forall R:set -> (set -> prop) -> prop, forall alpha, ordinal alpha -> forall p q:set -> prop,
  PNoEq_ alpha p q -> PNo_strict_lowerbd R alpha p -> PNo_strict_lowerbd R alpha q.

Axiom PNoEq_strict_imv : forall L R:set -> (set -> prop) -> prop, forall alpha, ordinal alpha -> forall p q:set -> prop,
  PNoEq_ alpha p q -> PNo_strict_imv L R alpha p -> PNo_strict_imv L R alpha q.

Axiom PNo_strict_upperbd_imp_rel_strict_upperbd : forall L:set -> (set -> prop) -> prop, forall alpha, ordinal alpha ->
  forall beta :e ordsucc alpha, forall p:set -> prop,
   PNo_strict_upperbd L alpha p -> PNo_rel_strict_upperbd L beta p.

Axiom PNo_strict_lowerbd_imp_rel_strict_lowerbd : forall R:set -> (set -> prop) -> prop, forall alpha, ordinal alpha ->
  forall beta :e ordsucc alpha, forall p:set -> prop,
   PNo_strict_lowerbd R alpha p -> PNo_rel_strict_lowerbd R beta p.

Axiom PNo_strict_imv_imp_rel_strict_imv : forall L R:set -> (set -> prop) -> prop, forall alpha, ordinal alpha ->
  forall beta :e ordsucc alpha, forall p:set -> prop,
   PNo_strict_imv L R alpha p -> PNo_rel_strict_imv L R beta p.

Axiom PNo_rel_split_imv_imp_strict_imv : forall L R:set -> (set -> prop) -> prop,
  forall alpha, ordinal alpha -> forall p:set -> prop,
       PNo_rel_strict_split_imv L R alpha p
    -> PNo_strict_imv L R alpha p.

Axiom ordinal_PNo_strict_imv : forall L R:set -> (set -> prop) -> prop,
  forall alpha, ordinal alpha ->
  forall p:set -> prop, (forall beta :e alpha, p beta) -> 
  (forall beta, ordinal beta -> forall q:set -> prop, L beta q -> beta :e alpha) ->
  (forall beta :e alpha, L beta p) ->
  (forall beta, ordinal beta -> forall q:set -> prop, ~R beta q) ->
  PNo_strict_imv L R alpha p.

Axiom PNo_lenbdd_strict_imv_ex : forall L R:set -> (set -> prop) -> prop,
  PNoLt_pwise L R ->
  forall alpha, ordinal alpha
   -> PNo_lenbdd alpha L
   -> PNo_lenbdd alpha R
   -> exists beta :e ordsucc alpha,
      exists p:set -> prop, PNo_strict_imv L R beta p.

Definition PNo_least_rep : (set -> (set -> prop) -> prop) -> (set -> (set -> prop) -> prop) -> set -> (set -> prop) -> prop
  := fun L R beta p => ordinal beta
       /\ PNo_strict_imv L R beta p
       /\ forall gamma :e beta,
           forall q:set -> prop, ~PNo_strict_imv L R gamma q.

Axiom PNo_lenbdd_least_rep_ex : forall L R:set -> (set -> prop) -> prop,
  PNoLt_pwise L R ->
  forall alpha, ordinal alpha
   -> PNo_lenbdd alpha L
   -> PNo_lenbdd alpha R
   -> exists beta, exists p:set -> prop, PNo_least_rep L R beta p.

Definition PNo_least_rep2 : (set -> (set -> prop) -> prop) -> (set -> (set -> prop) -> prop) -> set -> (set -> prop) -> prop
  := fun L R beta p => PNo_least_rep L R beta p /\ forall x, x /:e beta -> ~p x.

Axiom PNo_strict_imv_pred_eq : forall L R:set -> (set -> prop) -> prop,
  PNoLt_pwise L R ->
  forall alpha, ordinal alpha -> forall p q:set -> prop,
     PNo_least_rep L R alpha p
  -> PNo_strict_imv L R alpha q
  -> forall beta :e alpha, p beta <-> q beta.

Axiom PNo_lenbdd_least_rep2_exuniq2 : forall L R:set -> (set -> prop) -> prop,
  PNoLt_pwise L R ->
  forall alpha, ordinal alpha
   -> PNo_lenbdd alpha L
   -> PNo_lenbdd alpha R
   -> exists beta,
        (exists p:set -> prop, PNo_least_rep2 L R beta p)
     /\ (forall p q:set -> prop, PNo_least_rep2 L R beta p -> PNo_least_rep2 L R beta q -> p = q).

(* Parameter PNo_bd "1b39e85278dd9e820e7b6258957386ac55934d784aa3702c57a28ec807453b01" "ed76e76de9b58e621daa601cca73b4159a437ba0e73114924cb92ec8044f2aa2" *)
Parameter PNo_bd : (set -> (set -> prop) -> prop) -> (set -> (set -> prop) -> prop) -> set.

(* Parameter PNo_pred "be07c39b18a3aa93f066f4c064fee3941ec27cfd07a4728b6209135c77ce5704" "b2d51dcfccb9527e9551b0d0c47d891c9031a1d4ee87bba5a9ae5215025d107a" *)
Parameter PNo_pred : (set -> (set -> prop) -> prop) -> (set -> (set -> prop) -> prop) -> set -> prop.

Axiom PNo_bd_pred_lem : forall L R:set -> (set -> prop) -> prop,
  PNoLt_pwise L R ->
  forall alpha, ordinal alpha
   -> PNo_lenbdd alpha L
   -> PNo_lenbdd alpha R
   -> PNo_least_rep2 L R (PNo_bd L R) (PNo_pred L R).

Axiom PNo_bd_pred : forall L R:set -> (set -> prop) -> prop,
  PNoLt_pwise L R ->
  forall alpha, ordinal alpha
   -> PNo_lenbdd alpha L
   -> PNo_lenbdd alpha R
   -> PNo_least_rep L R (PNo_bd L R) (PNo_pred L R).

Axiom PNo_bd_ord : forall L R:set -> (set -> prop) -> prop,
  PNoLt_pwise L R ->
  forall alpha, ordinal alpha
   -> PNo_lenbdd alpha L
   -> PNo_lenbdd alpha R
   -> ordinal (PNo_bd L R).

Axiom PNo_bd_pred_strict_imv : forall L R:set -> (set -> prop) -> prop,
  PNoLt_pwise L R ->
  forall alpha, ordinal alpha
   -> PNo_lenbdd alpha L
   -> PNo_lenbdd alpha R
   -> PNo_strict_imv L R (PNo_bd L R) (PNo_pred L R).

Axiom PNo_bd_least_imv : forall L R:set -> (set -> prop) -> prop,
  PNoLt_pwise L R ->
  forall alpha, ordinal alpha
   -> PNo_lenbdd alpha L
   -> PNo_lenbdd alpha R
   -> forall gamma :e PNo_bd L R,
           forall q:set -> prop, ~PNo_strict_imv L R gamma q.

Axiom PNo_bd_In : forall L R:set -> (set -> prop) -> prop,
  PNoLt_pwise L R ->
  forall alpha, ordinal alpha
   -> PNo_lenbdd alpha L
   -> PNo_lenbdd alpha R
   -> PNo_bd L R :e ordsucc alpha.

Definition PNoCutL : set -> (set -> prop) -> set -> (set -> prop) -> prop
  := fun alpha p beta q => beta :e alpha /\ PNoLt beta q alpha p.
Definition PNoCutR : set -> (set -> prop) -> set -> (set -> prop) -> prop
  := fun alpha p beta q => beta :e alpha /\ PNoLt alpha p beta q.

Axiom PNoCutL_lenbdd : forall alpha, forall p:set -> prop, PNo_lenbdd alpha (PNoCutL alpha p).

Axiom PNoCutR_lenbdd : forall alpha, forall p:set -> prop, PNo_lenbdd alpha (PNoCutR alpha p).

Axiom PNoCut_pwise : forall alpha, ordinal alpha -> forall p:set -> prop, PNoLt_pwise (PNoCutL alpha p) (PNoCutR alpha p).

Axiom PNoCut_strict_imv : forall alpha, ordinal alpha -> forall p:set -> prop, PNo_strict_imv (PNoCutL alpha p) (PNoCutR alpha p) alpha p.

Axiom PNoCut_bd_eq : forall alpha, ordinal alpha -> forall p:set -> prop, PNo_bd (PNoCutL alpha p) (PNoCutR alpha p) = alpha.

Axiom PNoCut_pred_eq : forall alpha, ordinal alpha -> forall p:set -> prop, PNoEq_ alpha p (PNo_pred (PNoCutL alpha p) (PNoCutR alpha p)).

Section TaggedSets.

Let tag : set -> set := fun alpha => SetAdjoin alpha {1}.
Postfix ' 100 := tag.

Axiom not_TransSet_Sing1 : ~TransSet {1}.

Axiom not_ordinal_Sing1 : ~ordinal {1}.

Axiom tagged_not_ordinal : forall y, ~ordinal (y ').

Axiom tagged_notin_ordinal : forall alpha y, ordinal alpha -> (y ') /:e alpha.

Axiom tagged_eqE_Subq : forall alpha beta, ordinal alpha -> alpha ' = beta ' -> alpha c= beta.

Axiom tagged_eqE_eq : forall alpha beta, ordinal alpha -> ordinal beta -> alpha ' = beta ' -> alpha = beta.

Axiom tagged_ReplE : forall alpha beta, ordinal alpha -> ordinal beta -> beta ' :e {gamma '|gamma :e alpha} -> beta :e alpha.

Axiom ordinal_notin_tagged_Repl : forall alpha Y, ordinal alpha -> alpha /:e {y '|y :e Y}.

Definition SNoElts_ : set -> set := fun alpha => alpha :\/: {beta '|beta :e alpha}.

Axiom SNoElts_mon : forall alpha beta, alpha c= beta -> SNoElts_ alpha c= SNoElts_ beta.

Definition SNo_ : set -> set -> prop := fun alpha x =>
    x c= SNoElts_ alpha
 /\ forall beta :e alpha, exactly1of2 (beta ' :e x) (beta :e x).

Definition PSNo : set -> (set -> prop) -> set :=
  fun alpha p => {beta :e alpha|p beta} :\/: {beta '|beta :e alpha, ~p beta}.

Axiom PNoEq_PSNo : forall alpha, ordinal alpha -> forall p:set -> prop, PNoEq_ alpha (fun beta => beta :e PSNo alpha p) p.

Axiom SNo_PSNo : forall alpha, ordinal alpha -> forall p:set -> prop, SNo_ alpha (PSNo alpha p).

Axiom SNo_PSNo_eta_ : forall alpha x, ordinal alpha -> SNo_ alpha x -> x = PSNo alpha (fun beta => beta :e x).

(* Parameter SNo "87d7604c7ea9a2ae0537066afb358a94e6ac0cd80ba277e6b064422035a620cf" "11faa7a742daf8e4f9aaf08e90b175467e22d0e6ad3ed089af1be90cfc17314b" *)
Parameter SNo : set -> prop.

Axiom SNo_SNo : forall alpha, ordinal alpha -> forall z, SNo_ alpha z -> SNo z.

(* Parameter SNoLev "bf1decfd8f4025a2271f2a64d1290eae65933d0f2f0f04b89520449195f1aeb8" "293b77d05dab711767d698fb4484aab2a884304256765be0733e6bd5348119e8" *)
Parameter SNoLev : set -> set.

Axiom SNoLev_uniq_Subq : forall x alpha beta, ordinal alpha -> ordinal beta -> SNo_ alpha x -> SNo_ beta x -> alpha c= beta.

Axiom SNoLev_uniq : forall x alpha beta, ordinal alpha -> ordinal beta -> SNo_ alpha x -> SNo_ beta x -> alpha = beta.

Axiom SNoLev_prop : forall x, SNo x -> ordinal (SNoLev x) /\ SNo_ (SNoLev x) x.

Axiom SNoLev_ordinal : forall x, SNo x -> ordinal (SNoLev x).

Axiom SNoLev_ : forall x, SNo x -> SNo_ (SNoLev x) x.

Axiom SNo_PSNo_eta : forall x, SNo x -> x = PSNo (SNoLev x) (fun beta => beta :e x).

Axiom SNoLev_PSNo : forall alpha, ordinal alpha -> forall p:set -> prop, SNoLev (PSNo alpha p) = alpha.

Axiom SNo_Subq : forall x y, SNo x -> SNo y -> SNoLev x c= SNoLev y -> (forall alpha :e SNoLev x, alpha :e x <-> alpha :e y) -> x c= y.

Definition SNoEq_ : set -> set -> set -> prop
 := fun alpha x y => PNoEq_ alpha (fun beta => beta :e x) (fun beta => beta :e y).

Axiom SNoEq_I : forall alpha x y, (forall beta :e alpha, beta :e x <-> beta :e y) -> SNoEq_ alpha x y.

Axiom SNoEq_E : forall alpha x y, SNoEq_ alpha x y -> forall beta :e alpha, beta :e x <-> beta :e y.

Axiom SNoEq_E1 : forall alpha x y, SNoEq_ alpha x y -> forall beta :e alpha, beta :e x -> beta :e y.

Axiom SNoEq_E2 : forall alpha x y, SNoEq_ alpha x y -> forall beta :e alpha, beta :e y -> beta :e x.

Axiom SNoEq_antimon_ : forall alpha, ordinal alpha -> forall beta :e alpha, forall x y, SNoEq_ alpha x y -> SNoEq_ beta x y.

Axiom SNo_eq : forall x y, SNo x -> SNo y -> SNoLev x = SNoLev y -> SNoEq_ (SNoLev x) x y -> x = y.

Let ctag : set -> set := fun alpha => SetAdjoin alpha {2}.

Postfix '' 100 := ctag.

Axiom ctagged_not_ordinal : forall y, ~ordinal (y '').
Axiom ctagged_notin_ordinal : forall alpha y, ordinal alpha -> (y '') /:e alpha.
Axiom Sing2_notin_SingSing1 : {2} /:e {{1}}.

Axiom ctagged_notin_SNo : forall x y, SNo x -> (y '') /:e x.
Axiom ctagged_eqE_eq : forall x y, SNo x -> SNo y -> forall u :e x, forall v :e y, u '' = v '' -> u = v.

Definition SNo_pair : set -> set -> set := fun x y => x :\/: {u ''| u :e y}.

Axiom SNo_pair_prop_1 : forall x1 y1 x2 y2, SNo x1 -> SNo x2 -> SNo_pair x1 y1 = SNo_pair x2 y2 -> x1 = x2.
Axiom SNo_pair_prop_2 : forall x1 y1 x2 y2, SNo x1 -> SNo y1 -> SNo x2 -> SNo y2 -> SNo_pair x1 y1 = SNo_pair x2 y2 -> y1 = y2.
Axiom SNo_pair_prop : forall x1 y1 x2 y2, SNo x1 -> SNo y1 -> SNo x2 -> SNo y2 -> SNo_pair x1 y1 = SNo_pair x2 y2 -> x1 = x2 /\ y1 = y2.
Axiom SNo_pair_0 : forall x, SNo_pair x 0 = x.

End TaggedSets.

Definition SNoLt : set -> set -> prop :=
  fun x y => PNoLt (SNoLev x) (fun beta => beta :e x) (SNoLev y) (fun beta => beta :e y).

Infix < 490 := SNoLt.

Definition SNoLe : set -> set -> prop :=
  fun x y => PNoLe (SNoLev x) (fun beta => beta :e x) (SNoLev y) (fun beta => beta :e y).

(* Unicode <= "2264" *)
Infix <= 490 := SNoLe.

Axiom SNoLtLe : forall x y, x < y -> x <= y.

Axiom SNoLeE : forall x y, SNo x -> SNo y -> x <= y -> x < y \/ x = y.

Axiom SNoEq_ref_ : forall alpha x, SNoEq_ alpha x x.

Axiom SNoEq_sym_ : forall alpha x y, SNoEq_ alpha x y -> SNoEq_ alpha y x.

Axiom SNoEq_tra_ : forall alpha x y z, SNoEq_ alpha x y -> SNoEq_ alpha y z -> SNoEq_ alpha x z.

Axiom SNoLtE : forall x y, SNo x -> SNo y -> x < y ->
 forall p:prop,
    (forall z, SNo z -> SNoLev z :e SNoLev x :/\: SNoLev y -> SNoEq_ (SNoLev z) z x -> SNoEq_ (SNoLev z) z y -> x < z -> z < y -> SNoLev z /:e x -> SNoLev z :e y -> p)
 -> (SNoLev x :e SNoLev y -> SNoEq_ (SNoLev x) x y -> SNoLev x :e y -> p)
 -> (SNoLev y :e SNoLev x -> SNoEq_ (SNoLev y) x y -> SNoLev y /:e x -> p)
 -> p.

(** The analogous theorem to PNoLtI1 can be recovered by SNoLt_tra (transitivity) and SNoLtI2 and SNoLtI3. **)

Axiom SNoLtI2 : forall x y,
     SNoLev x :e SNoLev y
  -> SNoEq_ (SNoLev x) x y
  -> SNoLev x :e y
  -> x < y.

Axiom SNoLtI3 : forall x y,
     SNoLev y :e SNoLev x
  -> SNoEq_ (SNoLev y) x y
  -> SNoLev y /:e x
  -> x < y.

Axiom SNoLt_irref : forall x, ~SNoLt x x.

Axiom SNoLt_trichotomy_or : forall x y, SNo x -> SNo y -> x < y \/ x = y \/ y < x.
Axiom SNoLt_trichotomy_or_impred : forall x y, SNo x -> SNo y ->
  forall p:prop,
      (x < y -> p)
   -> (x = y -> p)
   -> (y < x -> p)
   -> p.

Axiom SNoLt_tra : forall x y z, SNo x -> SNo y -> SNo z -> x < y -> y < z -> x < z.

Axiom SNoLe_ref : forall x, SNoLe x x.

Axiom SNoLe_antisym : forall x y, SNo x -> SNo y -> x <= y -> y <= x -> x = y.

Axiom SNoLtLe_tra : forall x y z, SNo x -> SNo y -> SNo z -> x < y -> y <= z -> x < z.

Axiom SNoLeLt_tra : forall x y z, SNo x -> SNo y -> SNo z -> x <= y -> y < z -> x < z.

Axiom SNoLe_tra : forall x y z, SNo x -> SNo y -> SNo z -> x <= y -> y <= z -> x <= z.

Axiom SNoLtLe_or : forall x y, SNo x -> SNo y -> x < y \/ y <= x.

Axiom SNoLt_PSNo_PNoLt : forall alpha beta, forall p q:set -> prop,
 ordinal alpha -> ordinal beta ->
 PSNo alpha p < PSNo beta q -> PNoLt alpha p beta q.

Axiom PNoLt_SNoLt_PSNo : forall alpha beta, forall p q:set -> prop,
 ordinal alpha -> ordinal beta ->
 PNoLt alpha p beta q -> PSNo alpha p < PSNo beta q.

Definition SNoCut : set -> set -> set :=
  fun L R => PSNo (PNo_bd (fun alpha p => ordinal alpha /\ PSNo alpha p :e L) (fun alpha p => ordinal alpha /\ PSNo alpha p :e R)) (PNo_pred (fun alpha p => ordinal alpha /\ PSNo alpha p :e L) (fun alpha p => ordinal alpha /\ PSNo alpha p :e R)).

Definition SNoCutP : set -> set -> prop :=
 fun L R =>
      (forall x :e L, SNo x)
   /\ (forall y :e R, SNo y)
   /\ (forall x :e L, forall y :e R, x < y).

Axiom SNoCutP_SNoCut : forall L R, SNoCutP L R
 -> SNo (SNoCut L R)
 /\ SNoLev (SNoCut L R) :e ordsucc ((\/_ x :e L, ordsucc (SNoLev x)) :\/: (\/_ y :e R, ordsucc (SNoLev y)))
 /\ (forall x :e L, x < SNoCut L R)
 /\ (forall y :e R, SNoCut L R < y)
 /\ (forall z, SNo z -> (forall x :e L, x < z) -> (forall y :e R, z < y) -> SNoLev (SNoCut L R) c= SNoLev z /\ SNoEq_ (SNoLev (SNoCut L R)) (SNoCut L R) z).

Axiom SNoCutP_SNoCut_impred : forall L R, SNoCutP L R
 -> forall p:prop,
      (SNo (SNoCut L R)
    -> SNoLev (SNoCut L R) :e ordsucc ((\/_ x :e L, ordsucc (SNoLev x)) :\/: (\/_ y :e R, ordsucc (SNoLev y)))
    -> (forall x :e L, x < SNoCut L R)
    -> (forall y :e R, SNoCut L R < y)
    -> (forall z, SNo z -> (forall x :e L, x < z) -> (forall y :e R, z < y) -> SNoLev (SNoCut L R) c= SNoLev z /\ SNoEq_ (SNoLev (SNoCut L R)) (SNoCut L R) z)
    -> p)
   -> p.

Axiom SNoCutP_L_0: forall L, (forall x :e L, SNo x) -> SNoCutP L 0.
Axiom SNoCutP_0_R: forall R, (forall x :e R, SNo x) -> SNoCutP 0 R.
Axiom SNoCutP_0_0: SNoCutP 0 0.
Axiom SNoCut_0_0: SNoCut 0 0 = 0.

Axiom ordinal_SNoLt_In : forall alpha beta, ordinal alpha -> ordinal beta -> alpha < beta -> alpha :e beta.

Axiom ordinal_SNoLe_Subq : forall alpha beta, ordinal alpha -> ordinal beta -> alpha <= beta -> alpha c= beta.

Definition SNoS_ : set -> set := fun alpha => {x :e Power (SNoElts_ alpha)|exists beta :e alpha, SNo_ beta x}.

Axiom SNoS_E : forall alpha, ordinal alpha -> forall x :e SNoS_ alpha, exists beta :e alpha, SNo_ beta x.

Section TaggedSets2.

Let tag : set -> set := fun alpha => SetAdjoin alpha {1}.
Postfix ' 100 := tag.

Axiom SNoS_I : forall alpha, ordinal alpha -> forall x, forall beta :e alpha, SNo_ beta x -> x :e SNoS_ alpha.

Axiom SNoS_I2 : forall x y, SNo x -> SNo y -> SNoLev x :e SNoLev y -> x :e SNoS_ (SNoLev y).
 
Axiom SNoS_Subq : forall alpha beta, ordinal alpha -> ordinal beta -> alpha c= beta -> SNoS_ alpha c= SNoS_ beta.

Axiom SNoLev_uniq2 : forall alpha, ordinal alpha -> forall x, SNo_ alpha x -> SNoLev x = alpha.

Axiom SNoS_E2 : forall alpha, ordinal alpha -> forall x :e SNoS_ alpha,
 forall p:prop,
     (SNoLev x :e alpha -> ordinal (SNoLev x) -> SNo x -> SNo_ (SNoLev x) x -> p)
  -> p.

Axiom SNoS_In_neq : forall w, SNo w -> forall x :e SNoS_ (SNoLev w), x <> w.

Axiom SNoS_SNoLev : forall z, SNo z -> z :e SNoS_ (ordsucc (SNoLev z)).

Definition SNoL : set -> set := fun z => {x :e SNoS_ (SNoLev z) | x < z}.
Definition SNoR : set -> set := fun z => {y :e SNoS_ (SNoLev z) | z < y}.

Axiom SNoCutP_SNoL_SNoR: forall z, SNo z -> SNoCutP (SNoL z) (SNoR z).

Axiom SNoL_E : forall x, SNo x -> forall w :e SNoL x,
  forall p:prop,
       (SNo w -> SNoLev w :e SNoLev x -> w < x -> p)
    -> p.

Axiom SNoR_E : forall x, SNo x -> forall z :e SNoR x,
  forall p:prop,
       (SNo z -> SNoLev z :e SNoLev x -> x < z -> p)
    -> p.

Axiom SNoL_SNoS : forall x, SNo x -> forall w :e SNoL x, w :e SNoS_ (SNoLev x).
Axiom SNoR_SNoS : forall x, SNo x -> forall z :e SNoR x, z :e SNoS_ (SNoLev x).
Axiom SNoL_SNoS_ : forall z, SNoL z c= SNoS_ (SNoLev z).
Axiom SNoR_SNoS_ : forall z, SNoR z c= SNoS_ (SNoLev z).

Axiom SNoL_I : forall z, SNo z -> forall x, SNo x -> SNoLev x :e SNoLev z -> x < z -> x :e SNoL z.

Axiom SNoR_I : forall z, SNo z -> forall y, SNo y -> SNoLev y :e SNoLev z -> z < y -> y :e SNoR z.

Axiom SNo_eta : forall z, SNo z -> z = SNoCut (SNoL z) (SNoR z).

Axiom SNoCutP_SNo_SNoCut : forall L R, SNoCutP L R -> SNo (SNoCut L R).

Axiom SNoCutP_SNoCut_L : forall L R, SNoCutP L R -> forall x :e L, x < SNoCut L R.

Axiom SNoCutP_SNoCut_R : forall L R, SNoCutP L R -> forall y :e R, SNoCut L R < y.

Axiom SNoCutP_SNoCut_fst : forall L R, SNoCutP L R ->
 forall z, SNo z
   -> (forall x :e L, x < z)
   -> (forall y :e R, z < y)
   -> SNoLev (SNoCut L R) c= SNoLev z
   /\ SNoEq_ (SNoLev (SNoCut L R)) (SNoCut L R) z.

Axiom SNoCut_Le : forall L1 R1 L2 R2, SNoCutP L1 R1 -> SNoCutP L2 R2
  -> (forall w :e L1, w < SNoCut L2 R2)
  -> (forall z :e R2, SNoCut L1 R1 < z)
  -> SNoCut L1 R1 <= SNoCut L2 R2.

Axiom SNoCut_ext : forall L1 R1 L2 R2, SNoCutP L1 R1 -> SNoCutP L2 R2
  -> (forall w :e L1, w < SNoCut L2 R2)
  -> (forall z :e R1, SNoCut L2 R2 < z)
  -> (forall w :e L2, w < SNoCut L1 R1)
  -> (forall z :e R2, SNoCut L1 R1 < z)
  -> SNoCut L1 R1 = SNoCut L2 R2.

Axiom SNoLt_SNoL_or_SNoR_impred: forall x y, SNo x -> SNo y -> x < y ->
 forall p:prop,
    (forall z :e SNoL y, z :e SNoR x -> p)
 -> (x :e SNoL y -> p)
 -> (y :e SNoR x -> p)
 -> p.

Axiom SNoL_or_SNoR_impred: forall x y, SNo x -> SNo y ->
 forall p:prop,
    (x = y -> p)
 -> (forall z :e SNoL y, z :e SNoR x -> p)
 -> (x :e SNoL y -> p)
 -> (y :e SNoR x -> p)
 -> (forall z :e SNoR y, z :e SNoL x -> p)
 -> (x :e SNoR y -> p)
 -> (y :e SNoL x -> p)
 -> p.

Axiom ordinal_SNo_ : forall alpha, ordinal alpha -> SNo_ alpha alpha.

Axiom ordinal_SNoL : forall alpha, ordinal alpha -> SNoL alpha = SNoS_ alpha.
Axiom ordinal_SNoR : forall alpha, ordinal alpha -> SNoR alpha = Empty.
Axiom ordinal_SNoCutP : forall alpha, ordinal alpha -> SNoCutP (SNoS_ alpha) Empty.
Axiom ordinal_SNoCut_eta : forall alpha, ordinal alpha -> alpha = SNoCut (SNoS_ alpha) Empty.

Axiom SNo_0 : SNo 0.
Axiom SNoLev_0 : SNoLev 0 = 0.
Axiom SNoL_0 : SNoL 0 = 0.
Axiom SNoR_0 : SNoR 0 = 0.
Axiom SNoL_1 : SNoL 1 = 1.
Axiom SNoR_1 : SNoR 1 = 0.
Axiom SNo_max_SNoLev : forall x, SNo x -> (forall y :e SNoS_ (SNoLev x), y < x) -> SNoLev x = x.
Axiom SNo_max_ordinal : forall x, SNo x -> (forall y :e SNoS_ (SNoLev x), y < x) -> ordinal x.

Definition SNo_extend0 : set -> set := fun x => PSNo (ordsucc (SNoLev x)) (fun delta => delta :e x /\ delta <> SNoLev x).

Definition SNo_extend1 : set -> set := fun x => PSNo (ordsucc (SNoLev x)) (fun delta => delta :e x \/ delta = SNoLev x).

Axiom SNo_extend0_SNo_ : forall x, SNo x -> SNo_ (ordsucc (SNoLev x)) (SNo_extend0 x).

Axiom SNo_extend1_SNo_ : forall x, SNo x -> SNo_ (ordsucc (SNoLev x)) (SNo_extend1 x).

Axiom SNo_extend0_SNo : forall x, SNo x -> SNo (SNo_extend0 x).

Axiom SNo_extend1_SNo : forall x, SNo x -> SNo (SNo_extend1 x).

Axiom SNo_extend0_SNoLev : forall x, SNo x -> SNoLev (SNo_extend0 x) = ordsucc (SNoLev x).

Axiom SNo_extend1_SNoLev : forall x, SNo x -> SNoLev (SNo_extend1 x) = ordsucc (SNoLev x).

Axiom SNo_extend0_nIn : forall x, SNo x -> SNoLev x /:e SNo_extend0 x.

Axiom SNo_extend1_In : forall x, SNo x -> SNoLev x :e SNo_extend1 x.

Axiom SNo_extend0_SNoEq : forall x, SNo x -> SNoEq_ (SNoLev x) (SNo_extend0 x) x.

Axiom SNo_extend1_SNoEq : forall x, SNo x -> SNoEq_ (SNoLev x) (SNo_extend1 x) x.

Axiom SNo_extend0_Lt: forall x, SNo x -> SNo_extend0 x < x.
Axiom SNo_extend1_Gt: forall x, SNo x -> x < SNo_extend1 x.

Axiom nat_p_SNo: forall n, nat_p n -> SNo n.
Axiom omega_SNo: forall n :e omega, SNo n.

(** eps_ n is the Surreal Number 1/2^n, without needing to define division or exponents first **)
Definition eps_ : set -> set := fun n => {0} :\/: {(ordsucc m) ' | m :e n}.

Axiom eps_ordinal_In_eq_0 : forall n alpha, ordinal alpha -> alpha :e eps_ n -> alpha = 0.
Axiom eps_0_1 : eps_ 0 = 1.
Axiom SNo__eps_ : forall n :e omega, SNo_ (ordsucc n) (eps_ n).
Axiom SNo_eps_ : forall n :e omega, SNo (eps_ n).
Axiom SNoLev_eps_ : forall n :e omega, SNoLev (eps_ n) = ordsucc n.
Axiom SNo_eps_SNoS_omega : forall n :e omega, eps_ n :e SNoS_ omega.
Axiom SNo_eps_decr : forall n :e omega, forall m :e n, eps_ n < eps_ m.
Axiom SNo_eps_pos : forall n :e omega, 0 < eps_ n.
Axiom SNo_pos_eps_Lt : forall n, nat_p n -> forall x :e SNoS_ (ordsucc n), 0 < x -> eps_ n < x.
Axiom SNo_pos_eps_Le : forall n, nat_p n -> forall x :e SNoS_ (ordsucc (ordsucc n)), 0 < x -> eps_ n <= x.

End TaggedSets2.

Axiom ordinal_SNo : forall alpha, ordinal alpha -> SNo alpha.

Axiom ordinal_SNoLev : forall alpha, ordinal alpha -> SNoLev alpha = alpha.

Axiom ordinal_SNoLev_max : forall alpha, ordinal alpha -> forall z, SNo z -> SNoLev z :e alpha -> z < alpha.

Axiom ordinal_In_SNoLt : forall alpha, ordinal alpha -> forall beta :e alpha, beta < alpha.

Axiom ordinal_SNoLev_max_2 : forall alpha, ordinal alpha -> forall z, SNo z -> SNoLev z :e ordsucc alpha -> z <= alpha.

Axiom ordinal_Subq_SNoLe : forall alpha beta, ordinal alpha -> ordinal beta -> alpha c= beta -> alpha <= beta.

Axiom SNo_etaE : forall z, SNo z ->
  forall p:prop,
     (forall L R, SNoCutP L R
       -> (forall x :e L, SNoLev x :e SNoLev z)
       -> (forall y :e R, SNoLev y :e SNoLev z)
       -> z = SNoCut L R
       -> p)
   -> p.

(*** surreal induction ***)
Axiom SNo_ind : forall P:set -> prop,
  (forall L R, SNoCutP L R
   -> (forall x :e L, P x)
   -> (forall y :e R, P y)
   -> P (SNoCut L R))
 -> forall z, SNo z -> P z.

(*** surreal recursion ***)
Section SurrealRecI.

Variable F:set -> (set -> set) -> set.

(* Parameter SNo_rec_i "352082c509ab97c1757375f37a2ac62ed806c7b39944c98161720a584364bfaf" "be45dfaed6c479503a967f3834400c4fd18a8a567c8887787251ed89579f7be3" *)
Parameter SNo_rec_i : set -> set.

Hypothesis Fr: forall z, SNo z ->
   forall g h:set -> set, (forall w :e SNoS_ (SNoLev z), g w = h w)
     -> F z g = F z h.

Axiom SNo_rec_i_eq : forall z, SNo z -> SNo_rec_i z = F z SNo_rec_i.

End SurrealRecI.

Section SurrealRecII.

Variable F:set -> (set -> (set -> set)) -> (set -> set).

(* Parameter SNo_rec_ii "030b1b3db48f720b8db18b1192717cad8f204fff5fff81201b9a2414f5036417" "e148e62186e718374accb69cda703e3440725cca8832aed55c0b32731f7401ab" *)
Parameter SNo_rec_ii : set -> (set -> set).

Hypothesis Fr: forall z, SNo z ->
   forall g h:set -> (set -> set), (forall w :e SNoS_ (SNoLev z), g w = h w)
     -> F z g = F z h.

Axiom SNo_rec_ii_eq : forall z, SNo z -> SNo_rec_ii z = F z SNo_rec_ii.

End SurrealRecII.

Section SurrealRec2.

Variable F:set -> set -> (set -> set -> set) -> set.

(* Parameter SNo_rec2 "9c6267051fa817eed39b404ea37e7913b3571fe071763da2ebc1baa56b4b77f5" "7d10ab58310ebefb7f8bf63883310aa10fc2535f53bb48db513a868bc02ec028" *)
Parameter SNo_rec2 : set -> set -> set.

Hypothesis Fr: forall w, SNo w -> forall z, SNo z ->
   forall g h:set -> set -> set,
        (forall x :e SNoS_ (SNoLev w), forall y, SNo y -> g x y = h x y)
     -> (forall y :e SNoS_ (SNoLev z), g w y = h w y)
     -> F w z g = F w z h.

Axiom SNo_rec2_eq : forall w, SNo w -> forall z, SNo z ->
   SNo_rec2 w z = F w z SNo_rec2.

End SurrealRec2.

Axiom SNo_ordinal_ind : forall P:set -> prop,
  (forall alpha, ordinal alpha -> forall x :e SNoS_ alpha, P x)
  ->
  (forall x, SNo x -> P x).

Axiom SNo_ordinal_ind2 : forall P:set -> set -> prop,
  (forall alpha, ordinal alpha ->
   forall beta, ordinal beta ->
   forall x :e SNoS_ alpha, forall y :e SNoS_ beta, P x y)
  ->
  (forall x y, SNo x -> SNo y -> P x y).

Axiom SNo_ordinal_ind3 : forall P:set -> set -> set -> prop,
  (forall alpha, ordinal alpha ->
   forall beta, ordinal beta ->
   forall gamma, ordinal gamma ->
   forall x :e SNoS_ alpha, forall y :e SNoS_ beta, forall z :e SNoS_ gamma, P x y z)
  ->
  (forall x y z, SNo x -> SNo y -> SNo z -> P x y z).

Axiom SNoLev_ind : forall P:set -> prop,
  (forall x, SNo x -> (forall w :e SNoS_ (SNoLev x), P w) -> P x)
  ->
  (forall x, SNo x -> P x).

Axiom SNoLev_ind2 : forall P:set -> set -> prop,
  (forall x y, SNo x -> SNo y
    -> (forall w :e SNoS_ (SNoLev x), P w y)
    -> (forall z :e SNoS_ (SNoLev y), P x z)
    -> (forall w :e SNoS_ (SNoLev x), forall z :e SNoS_ (SNoLev y), P w z)
    -> P x y)
-> forall x y, SNo x -> SNo y -> P x y.

Axiom SNoLev_ind3 : forall P:set -> set -> set -> prop,
  (forall x y z, SNo x -> SNo y -> SNo z
    -> (forall u :e SNoS_ (SNoLev x), P u y z)
    -> (forall v :e SNoS_ (SNoLev y), P x v z)
    -> (forall w :e SNoS_ (SNoLev z), P x y w)
    -> (forall u :e SNoS_ (SNoLev x), forall v :e SNoS_ (SNoLev y), P u v z)
    -> (forall u :e SNoS_ (SNoLev x), forall w :e SNoS_ (SNoLev z), P u y w)
    -> (forall v :e SNoS_ (SNoLev y), forall w :e SNoS_ (SNoLev z), P x v w)
    -> (forall u :e SNoS_ (SNoLev x), forall v :e SNoS_ (SNoLev y), forall w :e SNoS_ (SNoLev z), P u v w)
    -> P x y z)
 -> forall x y z, SNo x -> SNo y -> SNo z -> P x y z.

Axiom SNo_1 : SNo 1.
Axiom SNo_2 : SNo 2.
Axiom SNo_omega : SNo omega.
Axiom SNoLt_0_1 : 0 < 1.
Axiom SNoLt_0_2 : 0 < 2.
Axiom SNoLt_1_2 : 1 < 2.

Axiom SNoLev_0_eq_0 : forall x, SNo x -> SNoLev x = 0 -> x = 0.
Axiom restr_SNo_ : forall x, SNo x -> forall alpha :e SNoLev x, SNo_ alpha (x :/\: SNoElts_ alpha).
Axiom restr_SNo : forall x, SNo x -> forall alpha :e SNoLev x, SNo (x :/\: SNoElts_ alpha).
Axiom restr_SNoLev : forall x, SNo x -> forall alpha :e SNoLev x, SNoLev (x :/\: SNoElts_ alpha) = alpha.
Axiom restr_SNoEq : forall x, SNo x -> forall alpha :e SNoLev x, SNoEq_ alpha (x :/\: SNoElts_ alpha) x.
Axiom restr_SNo_SNoCut : forall x, SNo x -> forall alpha :e SNoLev x, forall p:prop,
    (SNoCutP {w :e SNoL x|SNoLev w :e alpha} {z :e SNoR x|SNoLev z :e alpha}
  -> x :/\: SNoElts_ alpha = SNoCut {w :e SNoL x|SNoLev w :e alpha} {z :e SNoR x|SNoLev z :e alpha}
  -> p)
 -> p.

(* Parameter canonical_elt "7830817b065e5068a5d904d993bb45fa4ddb7b1157b85006099fa8b2d1698319" "24615c6078840ea77a483098ef7fecf7d2e10585bf1f31bd0c61fbaeced3ecb8" *)
Parameter canonical_elt : (set->set->prop)->set->set.
Axiom canonical_elt_rel : forall R:set->set->prop, forall x:set, R x x -> R x (canonical_elt R x).
Axiom canonical_elt_eq : forall R:set->set->prop, per R -> forall x y:set, R x y -> canonical_elt R x = canonical_elt R y.
Axiom canonical_elt_idem : forall R:set->set->prop, per R -> forall x:set, R x x -> canonical_elt R x = canonical_elt R (canonical_elt R x).

(* Parameter quotient "aa0da3fb21dcb8f9e118c9149aed409bb70d0408a316f1cce303813bf2428859" "185d8f16b44939deb8995cbb9be7d1b78b78d5fc4049043a3b6ccc9ec7b33b41" *)
Parameter quotient : (set->set->prop)->set->prop.
Axiom quotient_prop1 : forall R:set->set->prop,
 forall x:set, quotient R x -> R x x.
Axiom quotient_prop2 : forall R:set->set->prop, per R ->
 forall x y:set, quotient R x -> quotient R y -> R x y -> x = y.

(* Parameter canonical_elt_def "3727e8cd9a7e7bc56ef00eafdefe3e298cfb2bd8340a0f164b9611ce2f2e3b2a" "cd4f601256fbe0285d49ded42c4f554df32a64182e0242462437212fe90b44cd" *)
Parameter canonical_elt_def : (set->set->prop)->(set->set)->set->set.
Axiom canonical_elt_def_rel : forall R:set->set->prop, forall d:set->set, forall x:set, R x x -> R x (canonical_elt_def R d x).
Axiom canonical_elt_def_eq :
 forall R:set->set->prop, per R ->
 forall d:set->set, (forall x y:set, R x y -> d x = d y) ->
 forall x y:set, R x y -> canonical_elt_def R d x = canonical_elt_def R d y.
Axiom canonical_elt_def_idem :
 forall R:set->set->prop, per R ->
 forall d:set->set, (forall x y:set, R x y -> d x = d y) ->
 forall x:set, R x x -> canonical_elt_def R d x = canonical_elt_def R d (canonical_elt_def R d x).

(* Parameter quotient_def "f61cccfd432116f3443aff9f776423c64eaa3691d3634bf423d5ddd89caaa136" "612d4b4fd0d22dd5985c10cf0fed7eda4e18dce70710ebd2cd5e91acf3995937" *)
Parameter quotient_def : (set->set->prop)->(set->set)->set->prop.
Axiom quotient_def_prop0 :
 forall R:set->set->prop, per R ->
 forall d:set->set,
 forall x:set, R x (d x) -> x = d x -> quotient_def R d x.
Axiom quotient_def_prop1 :
 forall R:set->set->prop,
 forall d:set->set,
 forall x:set, quotient_def R d x -> R x x.
Axiom quotient_def_prop2 :
 forall R:set->set->prop, per R ->
 forall d:set->set, (forall x y:set, R x y -> d x = d y) ->
 forall x y:set, quotient_def R d x -> quotient_def R d y -> R x y -> x = y.

(**
 Abstract Version of Natural Numbers using Peano axioms.
 Note that base can be thought of as 0 or 1, with the difference
 only showing up if one defines addition and multiplication.
 **)
Section explicit_Nats.

Variable N : set.
Variable base : set.
Variable S : set -> set.

(* Parameter explicit_Nats "4a59caa11140eabb1b7db2d3493fe76a92b002b3b27e3dfdd313708c6c6ca78f" "3fb62f75e778736947d086a36d35ebe45a5d60bf0a340a0761ba08a396d4123a" *)
Parameter explicit_Nats : prop.

Axiom explicit_Nats_I:
    (base :e N)
 -> (forall m :e N, S m :e N)
 -> (forall m :e N, S m <> base)
 -> (forall m n :e N, S m = S n -> m = n)
 -> (forall p:set -> prop, p base -> (forall m, p m -> p (S m)) -> (forall m :e N, p m))
 -> explicit_Nats.

Axiom explicit_Nats_E : forall q:prop, 
    (explicit_Nats
  -> (base :e N)
  -> (forall m :e N, S m :e N)
  -> (forall m :e N, S m <> base)
  -> (forall m n :e N, S m = S n -> m = n)
  -> (forall p:set -> prop, p base -> (forall m, p m -> p (S m)) -> (forall m :e N, p m))
  -> q)
 -> explicit_Nats -> q.

Axiom explicit_Nats_ind : explicit_Nats ->
  forall p:set -> prop,
      p base
   -> (forall m :e N, p m -> p (S m))
   -> forall m :e N, p m.

(* Parameter explicit_Nats_primrec "5ec40a637f9843917a81733636ffe333120e9a78db0c1236764d271d8704674a" "a61e60c0704e01255992ecc776a771ad4ef672b2ed0f4edea9713442d02c0ba9" *)
Parameter explicit_Nats_primrec : set -> (set -> set -> set) -> set -> set.

Axiom explicit_Nats_primrec_base : forall a, forall f:set -> set -> set,
  explicit_Nats -> explicit_Nats_primrec a f base = a.

Axiom explicit_Nats_primrec_S : forall a, forall f:set -> set -> set,
  explicit_Nats ->
  forall n :e N, explicit_Nats_primrec a f (S n) = f n (explicit_Nats_primrec a f n).

Axiom explicit_Nats_primrec_P : explicit_Nats ->
   forall P:set -> prop,
   forall a, P a -> forall f:set -> set -> set, (forall n :e N, forall b, P b -> P (f n b))
 -> forall n :e N, P (explicit_Nats_primrec a f n).

End explicit_Nats.

Axiom explicit_Nats_omega : explicit_Nats omega 0 ordsucc.

Section explicit_Nats_zero.

Variable N : set.
Variable zero : set.
Variable S : set -> set.

(* Parameter explicit_Nats_zero_plus "8bf54ee811b0677aba3d56bc61913a6d81475e1022faa43989b56bfa7aed2021" "9683ebbbd2610b6b9f8f9bb32a63d9d3cf8c376a919e6989444d6d995da2aceb" *)
Parameter explicit_Nats_zero_plus : set -> set -> set.

Infix + 360 right := explicit_Nats_zero_plus.

(* Parameter explicit_Nats_zero_mult "a5462d7cd964ae608154fbea57766c59c7e8a63f8b6d7224fdacf7819d6543b7" "7cf43a3b8ce0af790f9fc86020fd06ab45e597b29a7ff1dbbe8921910d68638b" *)
Parameter explicit_Nats_zero_mult : set -> set -> set.

Infix * 355 right := explicit_Nats_zero_mult.

Hypothesis HN: explicit_Nats N zero S.

Axiom explicit_Nats_zero_plus_N : forall n m :e N, n + m :e N.
Axiom explicit_Nats_zero_plus_0L : forall m :e N, zero + m = m.
Axiom explicit_Nats_zero_plus_SL : forall n m :e N, S n + m = S (n + m).
Axiom explicit_Nats_zero_mult_N : forall n m :e N, n * m :e N.
Axiom explicit_Nats_zero_mult_0L : forall m :e N, zero * m = zero.
Axiom explicit_Nats_zero_mult_SL : forall n m :e N, S n * m = m + n * m.

End explicit_Nats_zero.

Section explicit_Nats_one.

Variable N : set.
Variable one : set.
Variable S : set -> set.

(* Parameter explicit_Nats_one_plus "96a3e501560225fd48b85405b64d8f27956fb33c35c2ef330600bc21c1ef0f6b" "c14dd5291f7204df5484a3c38ca94107f29d636a3cdfbd67faf1196b3bf192d6" *)
Parameter explicit_Nats_one_plus : set -> set -> set.

Infix + 360 right := explicit_Nats_one_plus.

(* Parameter explicit_Nats_one_mult "55e8bac8e9f8532e25fccb59d629f4f95d54a534cc861e1a106d746d54383308" "ec4f9ffffa60d2015503172b35532a59cebea3390c398d0157fd3159e693eb97" *)
Parameter explicit_Nats_one_mult : set -> set -> set.

Infix * 355 right := explicit_Nats_one_mult.

(* Parameter explicit_Nats_one_exp "37d77be7592c2812416b2592340280e577cddf5b5ea328b2cb4ded30e0361515" "cbcee236e6cb4bea1cf64f58905668aa36807a85032ea58e6bb539f5721ff4c4" *)
Parameter explicit_Nats_one_exp : set -> set -> set.

Infix ^ 342 right := explicit_Nats_one_exp.

Hypothesis HN: explicit_Nats N one S.

Axiom explicit_Nats_one_plus_N : forall n m :e N, n + m :e N.
Axiom explicit_Nats_one_plus_1L : forall m :e N, one + m = S m.
Axiom explicit_Nats_one_plus_SL : forall n m :e N, S n + m = S (n + m).
Axiom explicit_Nats_one_mult_N : forall n m :e N, n * m :e N.
Axiom explicit_Nats_one_mult_1L : forall m :e N, one * m = m.
Axiom explicit_Nats_one_mult_SL : forall n m :e N, S n * m = m + n * m.
Axiom explicit_Nats_one_exp_N : forall n m :e N, n ^ m :e N.
Axiom explicit_Nats_one_exp_1L : forall n :e N, n ^ one = n.
Axiom explicit_Nats_one_exp_SL : forall n m :e N, n ^ (S m) = n * n ^ m.

Definition explicit_Nats_one_lt : set -> set -> prop := fun m n => m :e N /\ n :e N /\ exists k :e N, m + k = n.
Definition explicit_Nats_one_le : set -> set -> prop := fun m n => m :e N /\ n :e N /\ (m = n \/ exists k :e N, m + k = n).

Infix < 490 := explicit_Nats_one_lt.

(* Unicode <= "2264" *)
Infix <= 490 := explicit_Nats_one_le.

End explicit_Nats_one.

Section explicit_Nats_transfer.

Variable N : set.
Variable base : set.
Variable S : set -> set.
Variable N' : set.
Variable base' : set.
Variable S' : set -> set.

Variable f:set -> set.

Axiom explicit_Nats_transfer: explicit_Nats N base S -> bij N N' f -> f base = base' -> (forall n :e N, f (S n) = S' (f n)) -> explicit_Nats N' base' S'.

End explicit_Nats_transfer.

Section AssocComm.

Variable R : set.
Variable plus : set -> set -> set.

Infix + 360 right := plus.

Axiom AssocComm_identities :
    (forall x y :e R, x + y :e R)
 -> (forall x y z :e R, x + (y + z) = (x + y) + z)
 -> (forall x y :e R, x + y = y + x)
 -> forall p:prop,
     ((forall x y z :e R, x + y + z = y + x + z)
   -> (forall x y z :e R, x + y + z = z + x + y)
   -> (forall x y z w :e R, (x + y) + (z + w) = (x + z) + (y + w))
   -> (forall x y z w :e R, x + y + z + w = w + x + y + z)
   -> (forall x y z w :e R, x + y + z + w = z + w + x + y)
   -> p)
  -> p.

End AssocComm.

